
STM32F429VGT6 Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b64  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006d18  08006d18  00016d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007020  08007020  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007028  08007028  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08007030  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000208  08007238  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  08007238  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ab  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002873  00000000  00000000  00030be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002557e  00000000  00000000  000351a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbab  00000000  00000000  0005a71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dfce2  00000000  00000000  000682c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e8  00000000  00000000  00148028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000208 	.word	0x20000208
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006cfc 	.word	0x08006cfc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	08006cfc 	.word	0x08006cfc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b972 	b.w	8000e38 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	4688      	mov	r8, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14b      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4615      	mov	r5, r2
 8000b7e:	d967      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0720 	rsb	r7, r2, #32
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b92:	4095      	lsls	r5, r2
 8000b94:	ea47 0803 	orr.w	r8, r7, r3
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba4:	fa1f fc85 	uxth.w	ip, r5
 8000ba8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18eb      	adds	r3, r5, r3
 8000bba:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bbe:	f080 811b 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8118 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bc8:	3f02      	subs	r7, #2
 8000bca:	442b      	add	r3, r5
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be0:	45a4      	cmp	ip, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	192c      	adds	r4, r5, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8107 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	f240 8104 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	442c      	add	r4, r5
 8000bf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfc:	eba4 040c 	sub.w	r4, r4, ip
 8000c00:	2700      	movs	r7, #0
 8000c02:	b11e      	cbz	r6, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0xbe>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80eb 	beq.w	8000df2 <__udivmoddi4+0x286>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c22:	4638      	mov	r0, r7
 8000c24:	4639      	mov	r1, r7
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f783 	clz	r7, r3
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d147      	bne.n	8000cc2 <__udivmoddi4+0x156>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xd0>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80fa 	bhi.w	8000e30 <__udivmoddi4+0x2c4>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4698      	mov	r8, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e0      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000c4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c4e:	e7dd      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xe8>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f040 808f 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5e:	1b49      	subs	r1, r1, r5
 8000c60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c64:	fa1f f885 	uxth.w	r8, r5
 8000c68:	2701      	movs	r7, #1
 8000c6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb08 f10c 	mul.w	r1, r8, ip
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x14c>
 8000ca8:	192c      	adds	r4, r5, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x14a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80b6 	bhi.w	8000e22 <__udivmoddi4+0x2b6>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e79f      	b.n	8000c02 <__udivmoddi4+0x96>
 8000cc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cc6:	40bb      	lsls	r3, r7
 8000cc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ccc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ce6:	0c2c      	lsrs	r4, r5, #16
 8000ce8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cec:	fa1f fa8e 	uxth.w	sl, lr
 8000cf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1e 0303 	adds.w	r3, lr, r3
 8000d08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d0c:	f080 8087 	bcs.w	8000e1e <__udivmoddi4+0x2b2>
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f240 8084 	bls.w	8000e1e <__udivmoddi4+0x2b2>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4473      	add	r3, lr
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d30:	45a2      	cmp	sl, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1e 0404 	adds.w	r4, lr, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	d26b      	bcs.n	8000e16 <__udivmoddi4+0x2aa>
 8000d3e:	45a2      	cmp	sl, r4
 8000d40:	d969      	bls.n	8000e16 <__udivmoddi4+0x2aa>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4474      	add	r4, lr
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4e:	eba4 040a 	sub.w	r4, r4, sl
 8000d52:	454c      	cmp	r4, r9
 8000d54:	46c2      	mov	sl, r8
 8000d56:	464b      	mov	r3, r9
 8000d58:	d354      	bcc.n	8000e04 <__udivmoddi4+0x298>
 8000d5a:	d051      	beq.n	8000e00 <__udivmoddi4+0x294>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d069      	beq.n	8000e34 <__udivmoddi4+0x2c8>
 8000d60:	ebb1 050a 	subs.w	r5, r1, sl
 8000d64:	eb64 0403 	sbc.w	r4, r4, r3
 8000d68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d6c:	40fd      	lsrs	r5, r7
 8000d6e:	40fc      	lsrs	r4, r7
 8000d70:	ea4c 0505 	orr.w	r5, ip, r5
 8000d74:	e9c6 5400 	strd	r5, r4, [r6]
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e747      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f703 	lsr.w	r7, r0, r3
 8000d84:	4095      	lsls	r5, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d92:	4338      	orrs	r0, r7
 8000d94:	0c01      	lsrs	r1, r0, #16
 8000d96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9a:	fa1f f885 	uxth.w	r8, r5
 8000d9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb07 f308 	mul.w	r3, r7, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	fa04 f402 	lsl.w	r4, r4, r2
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x256>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000db8:	d22f      	bcs.n	8000e1a <__udivmoddi4+0x2ae>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d92d      	bls.n	8000e1a <__udivmoddi4+0x2ae>
 8000dbe:	3f02      	subs	r7, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	b281      	uxth	r1, r0
 8000dc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb00 f308 	mul.w	r3, r0, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x27e>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de0:	d217      	bcs.n	8000e12 <__udivmoddi4+0x2a6>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d915      	bls.n	8000e12 <__udivmoddi4+0x2a6>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df0:	e73b      	b.n	8000c6a <__udivmoddi4+0xfe>
 8000df2:	4637      	mov	r7, r6
 8000df4:	4630      	mov	r0, r6
 8000df6:	e709      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df8:	4607      	mov	r7, r0
 8000dfa:	e6e7      	b.n	8000bcc <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fb      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000e00:	4541      	cmp	r1, r8
 8000e02:	d2ab      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e08:	eb69 020e 	sbc.w	r2, r9, lr
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	4613      	mov	r3, r2
 8000e10:	e7a4      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e12:	4660      	mov	r0, ip
 8000e14:	e7e9      	b.n	8000dea <__udivmoddi4+0x27e>
 8000e16:	4618      	mov	r0, r3
 8000e18:	e795      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1a:	4667      	mov	r7, ip
 8000e1c:	e7d1      	b.n	8000dc2 <__udivmoddi4+0x256>
 8000e1e:	4681      	mov	r9, r0
 8000e20:	e77c      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	442c      	add	r4, r5
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0x14c>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	442b      	add	r3, r5
 8000e2e:	e72f      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e30:	4638      	mov	r0, r7
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xda>
 8000e34:	4637      	mov	r7, r6
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0xa0>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_ADC1_Init+0x9c>)
 8000e52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <MX_ADC1_Init+0xa0>)
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e9e:	f001 faf9 	bl	8002494 <HAL_ADC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea8:	f000 ff5e 	bl	8001d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eac:	230c      	movs	r3, #12
 8000eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000ebe:	f001 fb2d 	bl	800251c <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec8:	f000 ff4e 	bl	8001d68 <Error_Handler>
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000228 	.word	0x20000228
 8000ed8:	40012000 	.word	0x40012000
 8000edc:	0f000001 	.word	0x0f000001

08000ee0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_ADC_MspInit+0x7c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d127      	bne.n	8000f52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_ADC_MspInit+0x84>)
 8000f4e:	f002 fbd9 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800

08000f68 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_DAC_Init+0x64>)
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <MX_DAC_Init+0x68>)
 8000f7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <MX_DAC_Init+0x64>)
 8000f7e:	f001 fe0c 	bl	8002b9a <HAL_DAC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f88:	f000 feee 	bl	8001d68 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f8c:	2324      	movs	r3, #36	; 0x24
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_DAC_Init+0x64>)
 8000f9c:	f001 ff40 	bl	8002e20 <HAL_DAC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fa6:	f000 fedf 	bl	8001d68 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000faa:	232c      	movs	r3, #44	; 0x2c
 8000fac:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_DAC_Init+0x64>)
 8000fb6:	f001 ff33 	bl	8002e20 <HAL_DAC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000fc0:	f000 fed2 	bl	8001d68 <Error_Handler>
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200002d0 	.word	0x200002d0
 8000fd0:	40007400 	.word	0x40007400

08000fd4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_DAC_MspInit+0x150>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	f040 8092 	bne.w	800111c <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <HAL_DAC_MspInit+0x154>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a49      	ldr	r2, [pc, #292]	; (8001128 <HAL_DAC_MspInit+0x154>)
 8001002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_DAC_MspInit+0x154>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_DAC_MspInit+0x154>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a42      	ldr	r2, [pc, #264]	; (8001128 <HAL_DAC_MspInit+0x154>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <HAL_DAC_MspInit+0x154>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001030:	2330      	movs	r3, #48	; 0x30
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	483a      	ldr	r0, [pc, #232]	; (800112c <HAL_DAC_MspInit+0x158>)
 8001044:	f002 fb5e 	bl	8003704 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800104a:	4a3a      	ldr	r2, [pc, #232]	; (8001134 <HAL_DAC_MspInit+0x160>)
 800104c:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001050:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001054:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001058:	2240      	movs	r2, #64	; 0x40
 800105a:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001070:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001074:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001078:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800107a:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800108e:	4828      	ldr	r0, [pc, #160]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001090:	f001 ffa8 	bl	8002fe4 <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800109a:	f000 fe65 	bl	8001d68 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a23      	ldr	r2, [pc, #140]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ac:	4a23      	ldr	r2, [pc, #140]	; (800113c <HAL_DAC_MspInit+0x168>)
 80010ae:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010b2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010b6:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ca:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d2:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010da:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010f2:	f001 ff77 	bl	8002fe4 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80010fc:	f000 fe34 	bl	8001d68 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_DAC_MspInit+0x164>)
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <HAL_DAC_MspInit+0x164>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2036      	movs	r0, #54	; 0x36
 8001112:	f001 fd0c 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001116:	2036      	movs	r0, #54	; 0x36
 8001118:	f001 fd25 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40007400 	.word	0x40007400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	20000270 	.word	0x20000270
 8001134:	40026088 	.word	0x40026088
 8001138:	200002e4 	.word	0x200002e4
 800113c:	400260a0 	.word	0x400260a0

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_DMA_Init+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <MX_DMA_Init+0x88>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_DMA_Init+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_DMA_Init+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <MX_DMA_Init+0x88>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_DMA_Init+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2010      	movs	r0, #16
 8001184:	f001 fcd3 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001188:	2010      	movs	r0, #16
 800118a:	f001 fcec 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2011      	movs	r0, #17
 8001194:	f001 fccb 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001198:	2011      	movs	r0, #17
 800119a:	f001 fce4 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	203a      	movs	r0, #58	; 0x3a
 80011a4:	f001 fcc3 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011a8:	203a      	movs	r0, #58	; 0x3a
 80011aa:	f001 fcdc 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2046      	movs	r0, #70	; 0x46
 80011b4:	f001 fcbb 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80011b8:	2046      	movs	r0, #70	; 0x46
 80011ba:	f001 fcd4 	bl	8002b66 <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <MX_GPIO_Init+0xfc>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <MX_GPIO_Init+0xfc>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <MX_GPIO_Init+0xfc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_GPIO_Init+0xfc>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_GPIO_Init+0xfc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MX_GPIO_Init+0xfc>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_PWR_GPIO_Port, MAX485_PWR_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_GPIO_Init+0x100>)
 8001274:	f002 fbf0 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001278:	2200      	movs	r2, #0
 800127a:	f64f 0110 	movw	r1, #63504	; 0xf810
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_GPIO_Init+0x104>)
 8001280:	f002 fbea 	bl	8003a58 <HAL_GPIO_WritePin>
                          |LED5_Pin|Direction_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_PWR_Pin;
 8001284:	2301      	movs	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAX485_PWR_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_GPIO_Init+0x100>)
 800129c:	f002 fa32 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80012a0:	f64f 0310 	movw	r3, #63504	; 0xf810
 80012a4:	617b      	str	r3, [r7, #20]
                          |LED5_Pin|Direction_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_GPIO_Init+0x104>)
 80012ba:	f002 fa23 	bl	8003704 <HAL_GPIO_Init>

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80012d8:	f001 f86a 	bl	80023b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f830 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f7ff ff74 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 80012e4:	f7ff ff2c 	bl	8001140 <MX_DMA_Init>
  MX_ADC1_Init();
 80012e8:	f7ff fda8 	bl	8000e3c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80012ec:	f000 fed8 	bl	80020a0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 80012f0:	f7ff fe3a 	bl	8000f68 <MX_DAC_Init>
  MX_TIM2_Init();
 80012f4:	f000 fdf8 	bl	8001ee8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80012f8:	f000 fe42 	bl	8001f80 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80012fc:	f000 fefa 	bl	80020f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Perform initializations */
  Startup(Channel_1_sine_val, Channel_2_sine_val, tx_buff);
 8001300:	4a09      	ldr	r2, [pc, #36]	; (8001328 <main+0x54>)
 8001302:	490a      	ldr	r1, [pc, #40]	; (800132c <main+0x58>)
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <main+0x5c>)
 8001306:	f000 f88b 	bl	8001420 <Startup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* Wait for instructions*/
      HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, 0); // Set MAX485 to listening
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <main+0x60>)
 8001310:	f002 fba2 	bl	8003a58 <HAL_GPIO_WritePin>
	  HAL_UART_Receive(&huart2, rx_buff, uartSize_rx, 100);
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	220a      	movs	r2, #10
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <main+0x64>)
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <main+0x68>)
 800131c:	f003 fd5e 	bl	8004ddc <HAL_UART_Receive>
	  Message_handler(rx_buff);
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <main+0x64>)
 8001322:	f000 f90d 	bl	8001540 <Message_handler>
      HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, 0); // Set MAX485 to listening
 8001326:	e7f0      	b.n	800130a <main+0x36>
 8001328:	20000374 	.word	0x20000374
 800132c:	20000380 	.word	0x20000380
 8001330:	200004c0 	.word	0x200004c0
 8001334:	40020c00 	.word	0x40020c00
 8001338:	20000348 	.word	0x20000348
 800133c:	20000784 	.word	0x20000784

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	; 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	2230      	movs	r2, #48	; 0x30
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f004 fc04 	bl	8005b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <SystemClock_Config+0xd8>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a2a      	ldr	r2, [pc, #168]	; (8001418 <SystemClock_Config+0xd8>)
 800136e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <SystemClock_Config+0xd8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <SystemClock_Config+0xdc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a24      	ldr	r2, [pc, #144]	; (800141c <SystemClock_Config+0xdc>)
 800138a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <SystemClock_Config+0xdc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a4:	2310      	movs	r3, #16
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ac:	2300      	movs	r3, #0
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b0:	2308      	movs	r3, #8
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013b4:	23b4      	movs	r3, #180	; 0xb4
 80013b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013bc:	2307      	movs	r3, #7
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fbb1 	bl	8003b2c <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d0:	f000 fcca 	bl	8001d68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013d4:	f002 fb5a 	bl	8003a8c <HAL_PWREx_EnableOverDrive>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80013de:	f000 fcc3 	bl	8001d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	230f      	movs	r3, #15
 80013e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e6:	2302      	movs	r3, #2
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2105      	movs	r1, #5
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fe03 	bl	800400c <HAL_RCC_ClockConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800140c:	f000 fcac 	bl	8001d68 <Error_Handler>
  }
}
 8001410:	bf00      	nop
 8001412:	3750      	adds	r7, #80	; 0x50
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <Startup>:

/* USER CODE BEGIN 4 */
void Startup(uint32_t Channel_1_sine_val[Ns], uint32_t Channel_2_sine_val[Ns],	uint8_t tx_buff[uartSize_tx]) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]

	/* Creating the Sine waveform at the DACs outputs 1 and 2*/
	set_clock_TIM2(); // Setting frequency of timer 2
 800142c:	f000 fc1c 	bl	8001c68 <set_clock_TIM2>
	set_clock_TIM4(); // Setting frequency of timer 4
 8001430:	f000 fc5a 	bl	8001ce8 <set_clock_TIM4>
	HAL_TIM_Base_Start(&htim2); // Start timer 2
 8001434:	4832      	ldr	r0, [pc, #200]	; (8001500 <Startup+0xe0>)
 8001436:	f002 ffe0 	bl	80043fa <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4); // Start timer 4
 800143a:	4832      	ldr	r0, [pc, #200]	; (8001504 <Startup+0xe4>)
 800143c:	f002 ffdd 	bl	80043fa <HAL_TIM_Base_Start>
	Get_channel_1_sine(); // Generate the sine wave look up table
 8001440:	f000 fafa 	bl	8001a38 <Get_channel_1_sine>
	Get_channel_2_sine(); // Generate the  sine wave look up table
 8001444:	f000 fb84 	bl	8001b50 <Get_channel_2_sine>
	HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, Channel_1_sine_val, Ns, DAC_ALIGN_12B_R); //Start the DAC DMA implementation for output 1.
 8001448:	2300      	movs	r3, #0
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2350      	movs	r3, #80	; 0x50
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	2100      	movs	r1, #0
 8001452:	482d      	ldr	r0, [pc, #180]	; (8001508 <Startup+0xe8>)
 8001454:	f001 fbc4 	bl	8002be0 <HAL_DAC_Start_DMA>
	/* Any code between here will cause phase lag between the output signals. */
	HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, Channel_2_sine_val, Ns, DAC_ALIGN_12B_R); //Start the DAC DMA implementation for output 2.
 8001458:	2300      	movs	r3, #0
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2350      	movs	r3, #80	; 0x50
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	2110      	movs	r1, #16
 8001462:	4829      	ldr	r0, [pc, #164]	; (8001508 <Startup+0xe8>)
 8001464:	f001 fbbc 	bl	8002be0 <HAL_DAC_Start_DMA>

	/* Setting signal output indicators to on  */
	HAL_GPIO_WritePin(GPIOD, LED1_Pin, 1); // Turn LED1 on
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146e:	4827      	ldr	r0, [pc, #156]	; (800150c <Startup+0xec>)
 8001470:	f002 faf2 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, 1); // Turn LED2 on
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147a:	4824      	ldr	r0, [pc, #144]	; (800150c <Startup+0xec>)
 800147c:	f002 faec 	bl	8003a58 <HAL_GPIO_WritePin>

	/* Setting up RS485 communications */
	HAL_GPIO_WritePin(MAX485_PWR_GPIO_Port, MAX485_PWR_Pin, 1); // Turn on the MAX485 chip
 8001480:	2201      	movs	r2, #1
 8001482:	2101      	movs	r1, #1
 8001484:	4822      	ldr	r0, [pc, #136]	; (8001510 <Startup+0xf0>)
 8001486:	f002 fae7 	bl	8003a58 <HAL_GPIO_WritePin>

	/* Building start up message */
	tx_buff[0] = 0x3C; // |<|     : Start of message byte.
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	223c      	movs	r2, #60	; 0x3c
 800148e:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = 36;   // |ADDR|  : Device Address byte.
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	2224      	movs	r2, #36	; 0x24
 8001496:	701a      	strb	r2, [r3, #0]
	tx_buff[2] = 36;   // |CMD|   : Command byte.
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3302      	adds	r3, #2
 800149c:	2224      	movs	r2, #36	; 0x24
 800149e:	701a      	strb	r2, [r3, #0]
	tx_buff[3] = 36;   // |DATA1| : Data byte 1.
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3303      	adds	r3, #3
 80014a4:	2224      	movs	r2, #36	; 0x24
 80014a6:	701a      	strb	r2, [r3, #0]
	tx_buff[4] = 36;   // |DATA2| : Data byte 2.
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3304      	adds	r3, #4
 80014ac:	2224      	movs	r2, #36	; 0x24
 80014ae:	701a      	strb	r2, [r3, #0]
	tx_buff[5] = 36;   // |DATA3| : Data byte 3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3305      	adds	r3, #5
 80014b4:	2224      	movs	r2, #36	; 0x24
 80014b6:	701a      	strb	r2, [r3, #0]
	tx_buff[6] = 36;   // |DATA4| : Data byte 4.
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3306      	adds	r3, #6
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	701a      	strb	r2, [r3, #0]
	tx_buff[7] = 36;   // |DATA5| : Data byte 5.
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3307      	adds	r3, #7
 80014c4:	2224      	movs	r2, #36	; 0x24
 80014c6:	701a      	strb	r2, [r3, #0]
	tx_buff[8] = 36;   // |DATA6| : Data byte 6.
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3308      	adds	r3, #8
 80014cc:	2224      	movs	r2, #36	; 0x24
 80014ce:	701a      	strb	r2, [r3, #0]
	tx_buff[9] = '>';  // |>|     : End of message byte.
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3309      	adds	r3, #9
 80014d4:	223e      	movs	r2, #62	; 0x3e
 80014d6:	701a      	strb	r2, [r3, #0]


	/* Send start up message */
	HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, 1); // Set MAX485 to transmitting
 80014d8:	2201      	movs	r2, #1
 80014da:	2110      	movs	r1, #16
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <Startup+0xec>)
 80014de:	f002 fabb 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, tx_buff, strlen((char*) tx_buff), HAL_MAX_DELAY); // Send message in RS485
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7fe fe84 	bl	80001f0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4808      	ldr	r0, [pc, #32]	; (8001514 <Startup+0xf4>)
 80014f4:	f003 fbd9 	bl	8004caa <HAL_UART_Transmit>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000644 	.word	0x20000644
 8001504:	20000604 	.word	0x20000604
 8001508:	200002d0 	.word	0x200002d0
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40020800 	.word	0x40020800
 8001514:	20000784 	.word	0x20000784

08001518 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

	//Message_handler(rx_buff);

}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	// Clear rx buffer

}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <Message_handler>:

void Message_handler(uint8_t rx_buff[]){
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

	// If statements to validate message integrity
	if((rx_buff[0] == '<') && (rx_buff[9] == '>')){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b3c      	cmp	r3, #60	; 0x3c
 800154e:	f040 8233 	bne.w	80019b8 <Message_handler+0x478>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3309      	adds	r3, #9
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b3e      	cmp	r3, #62	; 0x3e
 800155a:	f040 822d 	bne.w	80019b8 <Message_handler+0x478>

		// Toggling transmission light
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1); // Receive
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	4895      	ldr	r0, [pc, #596]	; (80017bc <Message_handler+0x27c>)
 8001566:	f002 fa77 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0); // Busy
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001570:	4892      	ldr	r0, [pc, #584]	; (80017bc <Message_handler+0x27c>)
 8001572:	f002 fa71 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0); // Transmit
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157c:	488f      	ldr	r0, [pc, #572]	; (80017bc <Message_handler+0x27c>)
 800157e:	f002 fa6b 	bl	8003a58 <HAL_GPIO_WritePin>
		e.g.
		e.g.
		 */

		// Switch statements to respond accordingly
		switch(rx_buff[2]){
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3302      	adds	r3, #2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3b31      	subs	r3, #49	; 0x31
 800158a:	2b03      	cmp	r3, #3
 800158c:	f200 8214 	bhi.w	80019b8 <Message_handler+0x478>
 8001590:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <Message_handler+0x58>)
 8001592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	080015a9 	.word	0x080015a9
 800159c:	080016b3 	.word	0x080016b3
 80015a0:	080017dd 	.word	0x080017dd
 80015a4:	080018cb 	.word	0x080018cb

			/* Change the frequency of DAC channel 1. */
			case '1':
				// Toggling transmission light
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1); // Busy
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ae:	4883      	ldr	r0, [pc, #524]	; (80017bc <Message_handler+0x27c>)
 80015b0:	f002 fa52 	bl	8003a58 <HAL_GPIO_WritePin>

				// Building 4 bytes int a 6 digit value
				frquency_value[0] = rx_buff[3];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3303      	adds	r3, #3
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <Message_handler+0x280>)
 80015bc:	701a      	strb	r2, [r3, #0]
				frquency_value[1] = rx_buff[4];
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <Message_handler+0x280>)
 80015c6:	705a      	strb	r2, [r3, #1]
				frquency_value[2] = rx_buff[5];
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3305      	adds	r3, #5
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <Message_handler+0x280>)
 80015d0:	709a      	strb	r2, [r3, #2]
				frquency_value[3] = rx_buff[6];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3306      	adds	r3, #6
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	4b79      	ldr	r3, [pc, #484]	; (80017c0 <Message_handler+0x280>)
 80015da:	70da      	strb	r2, [r3, #3]
				frquency_value[4] = rx_buff[7];
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3307      	adds	r3, #7
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <Message_handler+0x280>)
 80015e4:	711a      	strb	r2, [r3, #4]
				frquency_value[5] = rx_buff[8];
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3308      	adds	r3, #8
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <Message_handler+0x280>)
 80015ee:	715a      	strb	r2, [r3, #5]
				value_int = atoi(frquency_value);
 80015f0:	4873      	ldr	r0, [pc, #460]	; (80017c0 <Message_handler+0x280>)
 80015f2:	f004 fa8b 	bl	8005b0c <atoi>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b72      	ldr	r3, [pc, #456]	; (80017c4 <Message_handler+0x284>)
 80015fa:	601a      	str	r2, [r3, #0]

				// Boundary checks
				if(value_int < 500){
 80015fc:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <Message_handler+0x284>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001604:	da03      	bge.n	800160e <Message_handler+0xce>
					value_int = 500;
 8001606:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <Message_handler+0x284>)
 8001608:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800160c:	601a      	str	r2, [r3, #0]
				}
				if(value_int > 20000){
 800160e:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <Message_handler+0x284>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001616:	4293      	cmp	r3, r2
 8001618:	dd03      	ble.n	8001622 <Message_handler+0xe2>
					value_int = 20000;
 800161a:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <Message_handler+0x284>)
 800161c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001620:	601a      	str	r2, [r3, #0]
				}
				// Updating channel 1 output frequency
				Freq_Signal_1 = value_int;
 8001622:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <Message_handler+0x284>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a68      	ldr	r2, [pc, #416]	; (80017c8 <Message_handler+0x288>)
 8001628:	6013      	str	r3, [r2, #0]
				set_clock_TIM2();	// Set the new sine frequency by updating the associate clock frequency
 800162a:	f000 fb1d 	bl	8001c68 <set_clock_TIM2>
				// Calculating frequency from buffer value
				// temp_frequency  = ((Fclock/Ns)/((TIM2 ->PSC) - 1 )*(Period + 1));
				// itoa(temp_frequency, temp_buff,10);

				// Building response
				tx_buff[0] = '<'; 			// |<|     : Start of message byte.
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <Message_handler+0x28c>)
 8001630:	223c      	movs	r2, #60	; 0x3c
 8001632:	701a      	strb	r2, [r3, #0]
				tx_buff[1] = rx_buff[1];	// |ADDR|  : Device Address byte.
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	785a      	ldrb	r2, [r3, #1]
 8001638:	4b64      	ldr	r3, [pc, #400]	; (80017cc <Message_handler+0x28c>)
 800163a:	705a      	strb	r2, [r3, #1]
				tx_buff[2] = rx_buff[2];	// |CMD|() : Command byte.
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	789a      	ldrb	r2, [r3, #2]
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <Message_handler+0x28c>)
 8001642:	709a      	strb	r2, [r3, #2]
				tx_buff[3] = rx_buff[3];	// |DATA1| : Data byte 1.
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	78da      	ldrb	r2, [r3, #3]
 8001648:	4b60      	ldr	r3, [pc, #384]	; (80017cc <Message_handler+0x28c>)
 800164a:	70da      	strb	r2, [r3, #3]
				tx_buff[4] = rx_buff[4];	// |DATA2| : Data byte 2.
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	791a      	ldrb	r2, [r3, #4]
 8001650:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <Message_handler+0x28c>)
 8001652:	711a      	strb	r2, [r3, #4]
				tx_buff[5] = rx_buff[5];	// |DATA3| : Data byte 3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	795a      	ldrb	r2, [r3, #5]
 8001658:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <Message_handler+0x28c>)
 800165a:	715a      	strb	r2, [r3, #5]
				tx_buff[6] = rx_buff[6];	// |DATA4| : Data byte 4.
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	799a      	ldrb	r2, [r3, #6]
 8001660:	4b5a      	ldr	r3, [pc, #360]	; (80017cc <Message_handler+0x28c>)
 8001662:	719a      	strb	r2, [r3, #6]
				tx_buff[7] = rx_buff[7];	// |DATA1| : Data byte 5.
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	79da      	ldrb	r2, [r3, #7]
 8001668:	4b58      	ldr	r3, [pc, #352]	; (80017cc <Message_handler+0x28c>)
 800166a:	71da      	strb	r2, [r3, #7]
				tx_buff[8] = rx_buff[8];	// |DATA2| : Data byte 6.
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7a1a      	ldrb	r2, [r3, #8]
 8001670:	4b56      	ldr	r3, [pc, #344]	; (80017cc <Message_handler+0x28c>)
 8001672:	721a      	strb	r2, [r3, #8]
				tx_buff[9] = '>'; 			// |>|     : End of message byte.
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <Message_handler+0x28c>)
 8001676:	223e      	movs	r2, #62	; 0x3e
 8001678:	725a      	strb	r2, [r3, #9]

				// Toggling transmission light
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1); // Transmit
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001680:	484e      	ldr	r0, [pc, #312]	; (80017bc <Message_handler+0x27c>)
 8001682:	f002 f9e9 	bl	8003a58 <HAL_GPIO_WritePin>

				// Sending response
			    HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, 1); 					// Set MAX485 to transmitting
 8001686:	2201      	movs	r2, #1
 8001688:	2110      	movs	r1, #16
 800168a:	484c      	ldr	r0, [pc, #304]	; (80017bc <Message_handler+0x27c>)
 800168c:	f002 f9e4 	bl	8003a58 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), HAL_MAX_DELAY); // Send message in RS485
 8001690:	484e      	ldr	r0, [pc, #312]	; (80017cc <Message_handler+0x28c>)
 8001692:	f7fe fdad 	bl	80001f0 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	494b      	ldr	r1, [pc, #300]	; (80017cc <Message_handler+0x28c>)
 80016a0:	484b      	ldr	r0, [pc, #300]	; (80017d0 <Message_handler+0x290>)
 80016a2:	f003 fb02 	bl	8004caa <HAL_UART_Transmit>
				counter++;
 80016a6:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <Message_handler+0x294>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a49      	ldr	r2, [pc, #292]	; (80017d4 <Message_handler+0x294>)
 80016ae:	6013      	str	r3, [r2, #0]
				break;
 80016b0:	e182      	b.n	80019b8 <Message_handler+0x478>

			/* Change the frequency of DAC channel 2. */
			case '2':
				// Toggling transmission light
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1); // Busy
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b8:	4840      	ldr	r0, [pc, #256]	; (80017bc <Message_handler+0x27c>)
 80016ba:	f002 f9cd 	bl	8003a58 <HAL_GPIO_WritePin>

				// Building 4 bytes int a 6 digi value
				frquency_value[0] = rx_buff[3];
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3303      	adds	r3, #3
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <Message_handler+0x280>)
 80016c6:	701a      	strb	r2, [r3, #0]
				frquency_value[1] = rx_buff[4];
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3304      	adds	r3, #4
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <Message_handler+0x280>)
 80016d0:	705a      	strb	r2, [r3, #1]
				frquency_value[2] = rx_buff[5];
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3305      	adds	r3, #5
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <Message_handler+0x280>)
 80016da:	709a      	strb	r2, [r3, #2]
				frquency_value[3] = rx_buff[6];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3306      	adds	r3, #6
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <Message_handler+0x280>)
 80016e4:	70da      	strb	r2, [r3, #3]
				frquency_value[4] = rx_buff[7];
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3307      	adds	r3, #7
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <Message_handler+0x280>)
 80016ee:	711a      	strb	r2, [r3, #4]
				frquency_value[5] = rx_buff[8];
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3308      	adds	r3, #8
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <Message_handler+0x280>)
 80016f8:	715a      	strb	r2, [r3, #5]
				value_int = atoi(frquency_value);
 80016fa:	4831      	ldr	r0, [pc, #196]	; (80017c0 <Message_handler+0x280>)
 80016fc:	f004 fa06 	bl	8005b0c <atoi>
 8001700:	4602      	mov	r2, r0
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <Message_handler+0x284>)
 8001704:	601a      	str	r2, [r3, #0]

				// Boundary checks
				if(value_int < 500){
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <Message_handler+0x284>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800170e:	da03      	bge.n	8001718 <Message_handler+0x1d8>
					value_int = 500;
 8001710:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <Message_handler+0x284>)
 8001712:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001716:	601a      	str	r2, [r3, #0]
				}
				if(value_int > 20000){
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <Message_handler+0x284>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001720:	4293      	cmp	r3, r2
 8001722:	dd03      	ble.n	800172c <Message_handler+0x1ec>
					value_int = 20000;
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <Message_handler+0x284>)
 8001726:	f644 6220 	movw	r2, #20000	; 0x4e20
 800172a:	601a      	str	r2, [r3, #0]
				}

				// Updating channel 1 output frequency
				Freq_Signal_2 = value_int;
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <Message_handler+0x284>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <Message_handler+0x298>)
 8001732:	6013      	str	r3, [r2, #0]
				set_clock_TIM4();	// Set the new sine frequency by updating the associate clock frequency
 8001734:	f000 fad8 	bl	8001ce8 <set_clock_TIM4>
				// Calculating frequency from buffer value
				// temp_frequency  = ((Fclock/Ns)/((TIM4 ->PSC) - 1 )*(Period + 1));
				// itoa(temp_frequency, temp_buff,10);

				// Building response
				tx_buff[0] = '<'; 			// |<|     : Start of message byte.
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <Message_handler+0x28c>)
 800173a:	223c      	movs	r2, #60	; 0x3c
 800173c:	701a      	strb	r2, [r3, #0]
				tx_buff[1] = rx_buff[1];	// |ADDR|  : Device Address byte.
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	785a      	ldrb	r2, [r3, #1]
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <Message_handler+0x28c>)
 8001744:	705a      	strb	r2, [r3, #1]
				tx_buff[2] = rx_buff[2];	// |CMD|() : Command byte.
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	789a      	ldrb	r2, [r3, #2]
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <Message_handler+0x28c>)
 800174c:	709a      	strb	r2, [r3, #2]
				tx_buff[3] = rx_buff[3];	// |DATA1| : Data byte 1.
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	78da      	ldrb	r2, [r3, #3]
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <Message_handler+0x28c>)
 8001754:	70da      	strb	r2, [r3, #3]
				tx_buff[4] = rx_buff[4];	// |DATA2| : Data byte 2.
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	791a      	ldrb	r2, [r3, #4]
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <Message_handler+0x28c>)
 800175c:	711a      	strb	r2, [r3, #4]
				tx_buff[5] = rx_buff[5];	// |DATA3| : Data byte 3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	795a      	ldrb	r2, [r3, #5]
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <Message_handler+0x28c>)
 8001764:	715a      	strb	r2, [r3, #5]
				tx_buff[6] = rx_buff[6];	// |DATA4| : Data byte 4.
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	799a      	ldrb	r2, [r3, #6]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <Message_handler+0x28c>)
 800176c:	719a      	strb	r2, [r3, #6]
				tx_buff[7] = rx_buff[7];	// |DATA1| : Data byte 5.
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	79da      	ldrb	r2, [r3, #7]
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <Message_handler+0x28c>)
 8001774:	71da      	strb	r2, [r3, #7]
				tx_buff[8] = rx_buff[8];	// |DATA2| : Data byte 6.
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7a1a      	ldrb	r2, [r3, #8]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <Message_handler+0x28c>)
 800177c:	721a      	strb	r2, [r3, #8]
				tx_buff[9] = '>'; 			// |>|     : End of message byte.
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <Message_handler+0x28c>)
 8001780:	223e      	movs	r2, #62	; 0x3e
 8001782:	725a      	strb	r2, [r3, #9]

				// Toggling transmission light
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1); // Transmit
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <Message_handler+0x27c>)
 800178c:	f002 f964 	bl	8003a58 <HAL_GPIO_WritePin>

				// Sending response
			    HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, 1); 					// Set MAX485 to transmitting
 8001790:	2201      	movs	r2, #1
 8001792:	2110      	movs	r1, #16
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <Message_handler+0x27c>)
 8001796:	f002 f95f 	bl	8003a58 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), HAL_MAX_DELAY); // Send message in RS485
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <Message_handler+0x28c>)
 800179c:	f7fe fd28 	bl	80001f0 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	4908      	ldr	r1, [pc, #32]	; (80017cc <Message_handler+0x28c>)
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <Message_handler+0x290>)
 80017ac:	f003 fa7d 	bl	8004caa <HAL_UART_Transmit>
				counter++;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <Message_handler+0x294>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <Message_handler+0x294>)
 80017b8:	6013      	str	r3, [r2, #0]
				break;
 80017ba:	e0fd      	b.n	80019b8 <Message_handler+0x478>
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	20000360 	.word	0x20000360
 80017c4:	20000600 	.word	0x20000600
 80017c8:	2000001c 	.word	0x2000001c
 80017cc:	20000374 	.word	0x20000374
 80017d0:	20000784 	.word	0x20000784
 80017d4:	20000224 	.word	0x20000224
 80017d8:	20000020 	.word	0x20000020

			/* Change the amplitude of DAC channel 1 */
			case '3':
				// Toggling transmission light
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1); // Busy
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e2:	488a      	ldr	r0, [pc, #552]	; (8001a0c <Message_handler+0x4cc>)
 80017e4:	f002 f938 	bl	8003a58 <HAL_GPIO_WritePin>

				// Building 4 bytes int a 6 digit value
				amplitude_value[0] = rx_buff[7];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3307      	adds	r3, #7
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <Message_handler+0x4d0>)
 80017f0:	701a      	strb	r2, [r3, #0]
				amplitude_value[1] = rx_buff[8];
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3308      	adds	r3, #8
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b85      	ldr	r3, [pc, #532]	; (8001a10 <Message_handler+0x4d0>)
 80017fa:	705a      	strb	r2, [r3, #1]
				value_int = atoi(amplitude_value);
 80017fc:	4884      	ldr	r0, [pc, #528]	; (8001a10 <Message_handler+0x4d0>)
 80017fe:	f004 f985 	bl	8005b0c <atoi>
 8001802:	4602      	mov	r2, r0
 8001804:	4b83      	ldr	r3, [pc, #524]	; (8001a14 <Message_handler+0x4d4>)
 8001806:	601a      	str	r2, [r3, #0]

				//value_int = value_int*1.16; /// This code is specificially for control enclosure 4

				// Boundary checks
				if(value_int < 1){
 8001808:	4b82      	ldr	r3, [pc, #520]	; (8001a14 <Message_handler+0x4d4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	dc02      	bgt.n	8001816 <Message_handler+0x2d6>
					value_int = 1;
 8001810:	4b80      	ldr	r3, [pc, #512]	; (8001a14 <Message_handler+0x4d4>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
				}
				if(value_int > 68){
 8001816:	4b7f      	ldr	r3, [pc, #508]	; (8001a14 <Message_handler+0x4d4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b44      	cmp	r3, #68	; 0x44
 800181c:	dd02      	ble.n	8001824 <Message_handler+0x2e4>
					value_int = 68;
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <Message_handler+0x4d4>)
 8001820:	2244      	movs	r2, #68	; 0x44
 8001822:	601a      	str	r2, [r3, #0]
				}


				// Updating channel 1 amplitude
				Channel_1_sine_scale = (double)value_int/100; // Dividing by 100 to create a fraction
 8001824:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <Message_handler+0x4d4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe3b 	bl	80004a4 <__aeabi_i2d>
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b79      	ldr	r3, [pc, #484]	; (8001a18 <Message_handler+0x4d8>)
 8001834:	f7fe ffca 	bl	80007cc <__aeabi_ddiv>
 8001838:	4603      	mov	r3, r0
 800183a:	460c      	mov	r4, r1
 800183c:	4a77      	ldr	r2, [pc, #476]	; (8001a1c <Message_handler+0x4dc>)
 800183e:	e9c2 3400 	strd	r3, r4, [r2]
				Get_channel_1_sine(); // Generate new table of sine values
 8001842:	f000 f8f9 	bl	8001a38 <Get_channel_1_sine>

				// Building response
				tx_buff[0] = '<'; 			// |<|     : Start of message byte.
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <Message_handler+0x4e0>)
 8001848:	223c      	movs	r2, #60	; 0x3c
 800184a:	701a      	strb	r2, [r3, #0]
				tx_buff[1] = rx_buff[1];	// |ADDR|  : Device Address byte.
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	785a      	ldrb	r2, [r3, #1]
 8001850:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <Message_handler+0x4e0>)
 8001852:	705a      	strb	r2, [r3, #1]
				tx_buff[2] = rx_buff[2];	// |CMD|() : Command byte.
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	789a      	ldrb	r2, [r3, #2]
 8001858:	4b71      	ldr	r3, [pc, #452]	; (8001a20 <Message_handler+0x4e0>)
 800185a:	709a      	strb	r2, [r3, #2]
				tx_buff[3] = rx_buff[3];	// |DATA1| : Data byte 1.
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	78da      	ldrb	r2, [r3, #3]
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <Message_handler+0x4e0>)
 8001862:	70da      	strb	r2, [r3, #3]
				tx_buff[4] = rx_buff[4];	// |DATA2| : Data byte 2.
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	791a      	ldrb	r2, [r3, #4]
 8001868:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <Message_handler+0x4e0>)
 800186a:	711a      	strb	r2, [r3, #4]
				tx_buff[5] = rx_buff[5];	// |DATA3| : Data byte 3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	795a      	ldrb	r2, [r3, #5]
 8001870:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <Message_handler+0x4e0>)
 8001872:	715a      	strb	r2, [r3, #5]
				tx_buff[6] = rx_buff[6];	// |DATA4| : Data byte 4.
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	799a      	ldrb	r2, [r3, #6]
 8001878:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <Message_handler+0x4e0>)
 800187a:	719a      	strb	r2, [r3, #6]
				tx_buff[7] = rx_buff[7];	// |DATA1| : Data byte 5.
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	79da      	ldrb	r2, [r3, #7]
 8001880:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <Message_handler+0x4e0>)
 8001882:	71da      	strb	r2, [r3, #7]
				tx_buff[8] = rx_buff[8];	// |DATA2| : Data byte 6.
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7a1a      	ldrb	r2, [r3, #8]
 8001888:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <Message_handler+0x4e0>)
 800188a:	721a      	strb	r2, [r3, #8]
				tx_buff[9] = '>'; 			// |>|     : End of message byte.
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <Message_handler+0x4e0>)
 800188e:	223e      	movs	r2, #62	; 0x3e
 8001890:	725a      	strb	r2, [r3, #9]

				// Toggling transmission light
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1); // Transmit
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001898:	485c      	ldr	r0, [pc, #368]	; (8001a0c <Message_handler+0x4cc>)
 800189a:	f002 f8dd 	bl	8003a58 <HAL_GPIO_WritePin>

				// Sending response
			    HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, 1); 					// Set MAX485 to transmitting
 800189e:	2201      	movs	r2, #1
 80018a0:	2110      	movs	r1, #16
 80018a2:	485a      	ldr	r0, [pc, #360]	; (8001a0c <Message_handler+0x4cc>)
 80018a4:	f002 f8d8 	bl	8003a58 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), HAL_MAX_DELAY); // Send message in RS485
 80018a8:	485d      	ldr	r0, [pc, #372]	; (8001a20 <Message_handler+0x4e0>)
 80018aa:	f7fe fca1 	bl	80001f0 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	495a      	ldr	r1, [pc, #360]	; (8001a20 <Message_handler+0x4e0>)
 80018b8:	485a      	ldr	r0, [pc, #360]	; (8001a24 <Message_handler+0x4e4>)
 80018ba:	f003 f9f6 	bl	8004caa <HAL_UART_Transmit>

				counter++;
 80018be:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <Message_handler+0x4e8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <Message_handler+0x4e8>)
 80018c6:	6013      	str	r3, [r2, #0]
				break;
 80018c8:	e076      	b.n	80019b8 <Message_handler+0x478>


			/* Change the amplitude of DAC channel 2. */
			case '4':
				// Toggling transmission light
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1); // Busy
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d0:	484e      	ldr	r0, [pc, #312]	; (8001a0c <Message_handler+0x4cc>)
 80018d2:	f002 f8c1 	bl	8003a58 <HAL_GPIO_WritePin>

				// Building 4 bytes int a 6 digit value
				amplitude_value[0] = rx_buff[7];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3307      	adds	r3, #7
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <Message_handler+0x4d0>)
 80018de:	701a      	strb	r2, [r3, #0]
				amplitude_value[1] = rx_buff[8];
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3308      	adds	r3, #8
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <Message_handler+0x4d0>)
 80018e8:	705a      	strb	r2, [r3, #1]
				value_int = atoi(amplitude_value);
 80018ea:	4849      	ldr	r0, [pc, #292]	; (8001a10 <Message_handler+0x4d0>)
 80018ec:	f004 f90e 	bl	8005b0c <atoi>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <Message_handler+0x4d4>)
 80018f4:	601a      	str	r2, [r3, #0]

				//value_int = value_int*1.16; /// This code is specificially for control enclosure 4

				// Boundary checks
				if(value_int < 1){
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <Message_handler+0x4d4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	dc02      	bgt.n	8001904 <Message_handler+0x3c4>
					value_int = 1;
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <Message_handler+0x4d4>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]
				}
				if(value_int > 68){
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <Message_handler+0x4d4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b44      	cmp	r3, #68	; 0x44
 800190a:	dd02      	ble.n	8001912 <Message_handler+0x3d2>
					value_int = 68;
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <Message_handler+0x4d4>)
 800190e:	2244      	movs	r2, #68	; 0x44
 8001910:	601a      	str	r2, [r3, #0]
				}

				// Updating channel 2 amplitude
				Channel_2_sine_scale = (double)value_int/100; // Dividing by 100 to create a fraction
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <Message_handler+0x4d4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fdc4 	bl	80004a4 <__aeabi_i2d>
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <Message_handler+0x4d8>)
 8001922:	f7fe ff53 	bl	80007cc <__aeabi_ddiv>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	4a40      	ldr	r2, [pc, #256]	; (8001a2c <Message_handler+0x4ec>)
 800192c:	e9c2 3400 	strd	r3, r4, [r2]
				Get_channel_2_sine();	// Generate new table of sine values
 8001930:	f000 f90e 	bl	8001b50 <Get_channel_2_sine>


				// Building response
				tx_buff[0] = '<'; 			// |<|     : Start of message byte.
 8001934:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <Message_handler+0x4e0>)
 8001936:	223c      	movs	r2, #60	; 0x3c
 8001938:	701a      	strb	r2, [r3, #0]
				tx_buff[1] = rx_buff[1];	// |ADDR|  : Device Address byte.
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	785a      	ldrb	r2, [r3, #1]
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <Message_handler+0x4e0>)
 8001940:	705a      	strb	r2, [r3, #1]
				tx_buff[2] = rx_buff[2];	// |CMD|() : Command byte.
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	789a      	ldrb	r2, [r3, #2]
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <Message_handler+0x4e0>)
 8001948:	709a      	strb	r2, [r3, #2]
				tx_buff[3] = rx_buff[3];	// |DATA1| : Data byte 1.
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	78da      	ldrb	r2, [r3, #3]
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <Message_handler+0x4e0>)
 8001950:	70da      	strb	r2, [r3, #3]
				tx_buff[4] = rx_buff[4];	// |DATA2| : Data byte 2.
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	791a      	ldrb	r2, [r3, #4]
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <Message_handler+0x4e0>)
 8001958:	711a      	strb	r2, [r3, #4]
				tx_buff[5] = rx_buff[5];	// |DATA3| : Data byte 3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	795a      	ldrb	r2, [r3, #5]
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <Message_handler+0x4e0>)
 8001960:	715a      	strb	r2, [r3, #5]
				tx_buff[6] = rx_buff[6];	// |DATA4| : Data byte 4.
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	799a      	ldrb	r2, [r3, #6]
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <Message_handler+0x4e0>)
 8001968:	719a      	strb	r2, [r3, #6]
				tx_buff[7] = rx_buff[7];	// |DATA1| : Data byte 5.
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	79da      	ldrb	r2, [r3, #7]
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <Message_handler+0x4e0>)
 8001970:	71da      	strb	r2, [r3, #7]
				tx_buff[8] = rx_buff[8];	// |DATA2| : Data byte 6.
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7a1a      	ldrb	r2, [r3, #8]
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <Message_handler+0x4e0>)
 8001978:	721a      	strb	r2, [r3, #8]
				tx_buff[9] = '>'; 			// |>|     : End of message byte.
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <Message_handler+0x4e0>)
 800197c:	223e      	movs	r2, #62	; 0x3e
 800197e:	725a      	strb	r2, [r3, #9]

				// Toggling transmission light
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1); // Transmit
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001986:	4821      	ldr	r0, [pc, #132]	; (8001a0c <Message_handler+0x4cc>)
 8001988:	f002 f866 	bl	8003a58 <HAL_GPIO_WritePin>

				// Sending response
			    HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, 1); 					// Set MAX485 to transmitting
 800198c:	2201      	movs	r2, #1
 800198e:	2110      	movs	r1, #16
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <Message_handler+0x4cc>)
 8001992:	f002 f861 	bl	8003a58 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, tx_buff, strlen((char*)tx_buff), HAL_MAX_DELAY); // Send message in RS485
 8001996:	4822      	ldr	r0, [pc, #136]	; (8001a20 <Message_handler+0x4e0>)
 8001998:	f7fe fc2a 	bl	80001f0 <strlen>
 800199c:	4603      	mov	r3, r0
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	491e      	ldr	r1, [pc, #120]	; (8001a20 <Message_handler+0x4e0>)
 80019a6:	481f      	ldr	r0, [pc, #124]	; (8001a24 <Message_handler+0x4e4>)
 80019a8:	f003 f97f 	bl	8004caa <HAL_UART_Transmit>
				counter++;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <Message_handler+0x4e8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <Message_handler+0x4e8>)
 80019b4:	6013      	str	r3, [r2, #0]
				break;
 80019b6:	bf00      	nop


	}

	// Clear rx buffer
	for(int i = 0; i<uartSize_rx; i++){
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e00c      	b.n	80019d8 <Message_handler+0x498>
		rx_buff[i] = 0;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
		temp_buff[i] = 0;
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <Message_handler+0x4f0>)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4413      	add	r3, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<uartSize_rx; i++){
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3301      	adds	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b09      	cmp	r3, #9
 80019dc:	ddef      	ble.n	80019be <Message_handler+0x47e>
	}

	// Toggling transmission light
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0); // Receive
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <Message_handler+0x4cc>)
 80019e6:	f002 f837 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0); // Busy
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <Message_handler+0x4cc>)
 80019f2:	f002 f831 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0); // Transmit
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <Message_handler+0x4cc>)
 80019fe:	f002 f82b 	bl	8003a58 <HAL_GPIO_WritePin>
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	20000344 	.word	0x20000344
 8001a14:	20000600 	.word	0x20000600
 8001a18:	40590000 	.word	0x40590000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000374 	.word	0x20000374
 8001a24:	20000784 	.word	0x20000784
 8001a28:	20000224 	.word	0x20000224
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	20000354 	.word	0x20000354
 8001a34:	00000000 	.word	0x00000000

08001a38 <Get_channel_1_sine>:
/*
* Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
* Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.
*/

void Get_channel_1_sine(void){
 8001a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
	// This function generates the look up table for the sinewave signal to be generated


	for(int i=0;i<Ns;i++){
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	e06b      	b.n	8001b1c <Get_channel_1_sine+0xe4>
		Channel_1_sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd2b 	bl	80004a4 <__aeabi_i2d>
 8001a4e:	a33e      	add	r3, pc, #248	; (adr r3, 8001b48 <Get_channel_1_sine+0x110>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fd90 	bl	8000578 <__aeabi_dmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4621      	mov	r1, r4
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <Get_channel_1_sine+0xf8>)
 8001a66:	f7fe feb1 	bl	80007cc <__aeabi_ddiv>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	ec44 3b17 	vmov	d7, r3, r4
 8001a72:	eeb0 0a47 	vmov.f32	s0, s14
 8001a76:	eef0 0a67 	vmov.f32	s1, s15
 8001a7a:	f004 f92d 	bl	8005cd8 <sin>
 8001a7e:	ec51 0b10 	vmov	r0, r1, d0
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <Get_channel_1_sine+0xfc>)
 8001a88:	f7fe fbc0 	bl	800020c <__adddf3>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	4625      	mov	r5, r4
 8001a92:	461c      	mov	r4, r3
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <Get_channel_1_sine+0x100>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0fda      	lsrs	r2, r3, #31
 8001a9a:	4413      	add	r3, r2
 8001a9c:	105b      	asrs	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd00 	bl	80004a4 <__aeabi_i2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fd64 	bl	8000578 <__aeabi_dmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	f7ff f820 	bl	8000afc <__aeabi_d2uiz>
 8001abc:	4601      	mov	r1, r0
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <Get_channel_1_sine+0x104>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Channel_1_sine_val[i] = sine_dc_offset + Channel_1_sine_scale*Channel_1_sine_val[i];
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <Get_channel_1_sine+0x108>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fcea 	bl	80004a4 <__aeabi_i2d>
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	460e      	mov	r6, r1
 8001ad4:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <Get_channel_1_sine+0x104>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fcd1 	bl	8000484 <__aeabi_ui2d>
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <Get_channel_1_sine+0x10c>)
 8001ae4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4623      	mov	r3, r4
 8001aec:	f7fe fd44 	bl	8000578 <__aeabi_dmul>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	4628      	mov	r0, r5
 8001afa:	4631      	mov	r1, r6
 8001afc:	f7fe fb86 	bl	800020c <__adddf3>
 8001b00:	4603      	mov	r3, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	4618      	mov	r0, r3
 8001b06:	4621      	mov	r1, r4
 8001b08:	f7fe fff8 	bl	8000afc <__aeabi_d2uiz>
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <Get_channel_1_sine+0x104>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b4f      	cmp	r3, #79	; 0x4f
 8001b20:	dd90      	ble.n	8001a44 <Get_channel_1_sine+0xc>
	}
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	f3af 8000 	nop.w
 8001b30:	40540000 	.word	0x40540000
 8001b34:	3ff00000 	.word	0x3ff00000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	200004c0 	.word	0x200004c0
 8001b40:	20000018 	.word	0x20000018
 8001b44:	20000008 	.word	0x20000008
 8001b48:	4d12d84a 	.word	0x4d12d84a
 8001b4c:	400921fb 	.word	0x400921fb

08001b50 <Get_channel_2_sine>:

void Get_channel_2_sine(void){
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
	// This function generates the look up table for the sinewave signal to be generated

	for(int i=0;i<Ns;i++){
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	e06b      	b.n	8001c34 <Get_channel_2_sine+0xe4>
		Channel_2_sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fc9f 	bl	80004a4 <__aeabi_i2d>
 8001b66:	a33e      	add	r3, pc, #248	; (adr r3, 8001c60 <Get_channel_2_sine+0x110>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd04 	bl	8000578 <__aeabi_dmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	4618      	mov	r0, r3
 8001b76:	4621      	mov	r1, r4
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <Get_channel_2_sine+0xf8>)
 8001b7e:	f7fe fe25 	bl	80007cc <__aeabi_ddiv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	ec44 3b17 	vmov	d7, r3, r4
 8001b8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b8e:	eef0 0a67 	vmov.f32	s1, s15
 8001b92:	f004 f8a1 	bl	8005cd8 <sin>
 8001b96:	ec51 0b10 	vmov	r0, r1, d0
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <Get_channel_2_sine+0xfc>)
 8001ba0:	f7fe fb34 	bl	800020c <__adddf3>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	4625      	mov	r5, r4
 8001baa:	461c      	mov	r4, r3
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <Get_channel_2_sine+0x100>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0fda      	lsrs	r2, r3, #31
 8001bb2:	4413      	add	r3, r2
 8001bb4:	105b      	asrs	r3, r3, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc74 	bl	80004a4 <__aeabi_i2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fcd8 	bl	8000578 <__aeabi_dmul>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	460c      	mov	r4, r1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	4621      	mov	r1, r4
 8001bd0:	f7fe ff94 	bl	8000afc <__aeabi_d2uiz>
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <Get_channel_2_sine+0x104>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Channel_2_sine_val[i] = sine_dc_offset + Channel_2_sine_scale*Channel_2_sine_val[i];
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <Get_channel_2_sine+0x108>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fc5e 	bl	80004a4 <__aeabi_i2d>
 8001be8:	4605      	mov	r5, r0
 8001bea:	460e      	mov	r6, r1
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <Get_channel_2_sine+0x104>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc45 	bl	8000484 <__aeabi_ui2d>
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <Get_channel_2_sine+0x10c>)
 8001bfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	f7fe fcb8 	bl	8000578 <__aeabi_dmul>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4623      	mov	r3, r4
 8001c10:	4628      	mov	r0, r5
 8001c12:	4631      	mov	r1, r6
 8001c14:	f7fe fafa 	bl	800020c <__adddf3>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4621      	mov	r1, r4
 8001c20:	f7fe ff6c 	bl	8000afc <__aeabi_d2uiz>
 8001c24:	4601      	mov	r1, r0
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <Get_channel_2_sine+0x104>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3301      	adds	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b4f      	cmp	r3, #79	; 0x4f
 8001c38:	dd90      	ble.n	8001b5c <Get_channel_2_sine+0xc>
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	f3af 8000 	nop.w
 8001c48:	40540000 	.word	0x40540000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000380 	.word	0x20000380
 8001c58:	20000018 	.word	0x20000018
 8001c5c:	20000010 	.word	0x20000010
 8001c60:	4d12d84a 	.word	0x4d12d84a
 8001c64:	400921fb 	.word	0x400921fb

08001c68 <set_clock_TIM2>:

void set_clock_TIM2(void){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	  // This function sets up the clock to be used for the signal generation

	  HAL_TIM_Base_Stop(&htim2);
 8001c6c:	4818      	ldr	r0, [pc, #96]	; (8001cd0 <set_clock_TIM2+0x68>)
 8001c6e:	f002 fbe8 	bl	8004442 <HAL_TIM_Base_Stop>

	  PSC= (Fclock/Ns)/(Freq_Signal_1*(Period + 1) ) - 1;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <set_clock_TIM2+0x6c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <set_clock_TIM2+0x70>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <set_clock_TIM2+0x74>)
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	3201      	adds	r2, #1
 8001c84:	4916      	ldr	r1, [pc, #88]	; (8001ce0 <set_clock_TIM2+0x78>)
 8001c86:	6809      	ldr	r1, [r1, #0]
 8001c88:	fb01 f202 	mul.w	r2, r1, r2
 8001c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c90:	3b01      	subs	r3, #1
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <set_clock_TIM2+0x7c>)
 8001c96:	601a      	str	r2, [r3, #0]
	  htim2.Instance = TIM2;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <set_clock_TIM2+0x68>)
 8001c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9e:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <set_clock_TIM2+0x74>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <set_clock_TIM2+0x68>)
 8001ca8:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 50 things start to behave funny.
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <set_clock_TIM2+0x7c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <set_clock_TIM2+0x68>)
 8001cb2:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb4:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <set_clock_TIM2+0x68>)
 8001cb6:	f002 fb75 	bl	80043a4 <HAL_TIM_Base_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <set_clock_TIM2+0x5c>
	  {
	    Error_Handler();
 8001cc0:	f000 f852 	bl	8001d68 <Error_Handler>
	  }
	  HAL_TIM_Base_Start(&htim2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <set_clock_TIM2+0x68>)
 8001cc6:	f002 fb98 	bl	80043fa <HAL_TIM_Base_Start>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000644 	.word	0x20000644
 8001cd4:	20000028 	.word	0x20000028
 8001cd8:	cccccccd 	.word	0xcccccccd
 8001cdc:	20000024 	.word	0x20000024
 8001ce0:	2000001c 	.word	0x2000001c
 8001ce4:	20000368 	.word	0x20000368

08001ce8 <set_clock_TIM4>:

void set_clock_TIM4(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
      // This function sets up the clock to be used for the signal generation

	  HAL_TIM_Base_Stop(&htim4);
 8001cec:	4817      	ldr	r0, [pc, #92]	; (8001d4c <set_clock_TIM4+0x64>)
 8001cee:	f002 fba8 	bl	8004442 <HAL_TIM_Base_Stop>

	  PSC= (Fclock/Ns)/(Freq_Signal_2*(Period + 1) ) - 1;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <set_clock_TIM4+0x68>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <set_clock_TIM4+0x6c>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <set_clock_TIM4+0x70>)
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	3201      	adds	r2, #1
 8001d04:	4915      	ldr	r1, [pc, #84]	; (8001d5c <set_clock_TIM4+0x74>)
 8001d06:	6809      	ldr	r1, [r1, #0]
 8001d08:	fb01 f202 	mul.w	r2, r1, r2
 8001d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d10:	3b01      	subs	r3, #1
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <set_clock_TIM4+0x78>)
 8001d16:	601a      	str	r2, [r3, #0]
	  htim4.Instance = TIM4;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <set_clock_TIM4+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <set_clock_TIM4+0x7c>)
 8001d1c:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <set_clock_TIM4+0x70>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <set_clock_TIM4+0x64>)
 8001d26:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 50 things start to behave funny.
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <set_clock_TIM4+0x78>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <set_clock_TIM4+0x64>)
 8001d30:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d32:	4806      	ldr	r0, [pc, #24]	; (8001d4c <set_clock_TIM4+0x64>)
 8001d34:	f002 fb36 	bl	80043a4 <HAL_TIM_Base_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <set_clock_TIM4+0x5a>
	  {
	    Error_Handler();
 8001d3e:	f000 f813 	bl	8001d68 <Error_Handler>
	  }

	  HAL_TIM_Base_Start(&htim4);
 8001d42:	4802      	ldr	r0, [pc, #8]	; (8001d4c <set_clock_TIM4+0x64>)
 8001d44:	f002 fb59 	bl	80043fa <HAL_TIM_Base_Start>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000604 	.word	0x20000604
 8001d50:	20000028 	.word	0x20000028
 8001d54:	cccccccd 	.word	0xcccccccd
 8001d58:	20000024 	.word	0x20000024
 8001d5c:	20000020 	.word	0x20000020
 8001d60:	20000368 	.word	0x20000368
 8001d64:	40000800 	.word	0x40000800

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 fb1e 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <DMA1_Stream5_IRQHandler+0x10>)
 8001e22:	f001 fa07 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000270 	.word	0x20000270

08001e30 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Stream6_IRQHandler+0x10>)
 8001e36:	f001 f9fd 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200002e4 	.word	0x200002e4

08001e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <TIM2_IRQHandler+0x10>)
 8001e4a:	f002 fb25 	bl	8004498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000644 	.word	0x20000644

08001e58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <TIM4_IRQHandler+0x10>)
 8001e5e:	f002 fb1b 	bl	8004498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000604 	.word	0x20000604

08001e6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <USART2_IRQHandler+0x10>)
 8001e72:	f003 f859 	bl	8004f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000784 	.word	0x20000784

08001e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <TIM6_DAC_IRQHandler+0x10>)
 8001e86:	f000 ff59 	bl	8002d3c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200002d0 	.word	0x200002d0

08001e94 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA2_Stream2_IRQHandler+0x10>)
 8001e9a:	f001 f9cb 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200006e4 	.word	0x200006e4

08001ea8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA2_Stream7_IRQHandler+0x10>)
 8001eae:	f001 f9c1 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000684 	.word	0x20000684

08001ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <SystemInit+0x28>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <SystemInit+0x28>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SystemInit+0x28>)
 8001ed2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ed6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	463b      	mov	r3, r7
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f0e:	220a      	movs	r2, #10
 8001f10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f1a:	220a      	movs	r2, #10
 8001f1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f2a:	4814      	ldr	r0, [pc, #80]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f2c:	f002 fa3a 	bl	80043a4 <HAL_TIM_Base_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001f36:	f7ff ff17 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f48:	f002 fbae 	bl	80046a8 <HAL_TIM_ConfigClockSource>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001f52:	f7ff ff09 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f56:	2320      	movs	r3, #32
 8001f58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f64:	f002 fdc4 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001f6e:	f7ff fefb 	bl	8001d68 <Error_Handler>
  }

}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000644 	.word	0x20000644

08001f80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	463b      	mov	r3, r7
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_TIM4_Init+0x90>)
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <MX_TIM4_Init+0x94>)
 8001fa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <MX_TIM4_Init+0x90>)
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <MX_TIM4_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_TIM4_Init+0x90>)
 8001fb0:	220a      	movs	r2, #10
 8001fb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_TIM4_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <MX_TIM4_Init+0x90>)
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fc0:	4813      	ldr	r0, [pc, #76]	; (8002010 <MX_TIM4_Init+0x90>)
 8001fc2:	f002 f9ef 	bl	80043a4 <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001fcc:	f7ff fecc 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <MX_TIM4_Init+0x90>)
 8001fde:	f002 fb63 	bl	80046a8 <HAL_TIM_ConfigClockSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001fe8:	f7ff febe 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fec:	2320      	movs	r3, #32
 8001fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_TIM4_Init+0x90>)
 8001ffa:	f002 fd79 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002004:	f7ff feb0 	bl	8001d68 <Error_Handler>
  }

}
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000604 	.word	0x20000604
 8002014:	40000800 	.word	0x40000800

08002018 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d116      	bne.n	8002058 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_TIM_Base_MspInit+0x80>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a19      	ldr	r2, [pc, #100]	; (8002098 <HAL_TIM_Base_MspInit+0x80>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_TIM_Base_MspInit+0x80>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201c      	movs	r0, #28
 800204c:	f000 fd6f 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002050:	201c      	movs	r0, #28
 8002052:	f000 fd88 	bl	8002b66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002056:	e01a      	b.n	800208e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_TIM_Base_MspInit+0x84>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d115      	bne.n	800208e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_TIM_Base_MspInit+0x80>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_TIM_Base_MspInit+0x80>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_TIM_Base_MspInit+0x80>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201e      	movs	r0, #30
 8002084:	f000 fd53 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002088:	201e      	movs	r0, #30
 800208a:	f000 fd6c 	bl	8002b66 <HAL_NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	40000800 	.word	0x40000800

080020a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_USART1_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020be:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020c8:	220c      	movs	r2, #12
 80020ca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <MX_USART1_UART_Init+0x4c>)
 80020da:	f002 fd99 	bl	8004c10 <HAL_UART_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80020e4:	f7ff fe40 	bl	8001d68 <Error_Handler>
  }

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000744 	.word	0x20000744
 80020f0:	40011000 	.word	0x40011000

080020f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART2_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800210e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002112:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800211c:	220c      	movs	r2, #12
 800211e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800212e:	f002 fd6f 	bl	8004c10 <HAL_UART_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002138:	f7ff fe16 	bl	8001d68 <Error_Handler>
  }

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000784 	.word	0x20000784
 8002144:	40004400 	.word	0x40004400

08002148 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a74      	ldr	r2, [pc, #464]	; (8002338 <HAL_UART_MspInit+0x1f0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	f040 80a9 	bne.w	80022be <HAL_UART_MspInit+0x176>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	4b72      	ldr	r3, [pc, #456]	; (800233c <HAL_UART_MspInit+0x1f4>)
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	4a71      	ldr	r2, [pc, #452]	; (800233c <HAL_UART_MspInit+0x1f4>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6453      	str	r3, [r2, #68]	; 0x44
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_UART_MspInit+0x1f4>)
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	4b6b      	ldr	r3, [pc, #428]	; (800233c <HAL_UART_MspInit+0x1f4>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a6a      	ldr	r2, [pc, #424]	; (800233c <HAL_UART_MspInit+0x1f4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b68      	ldr	r3, [pc, #416]	; (800233c <HAL_UART_MspInit+0x1f4>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4a63      	ldr	r2, [pc, #396]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021d2:	2307      	movs	r3, #7
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	4858      	ldr	r0, [pc, #352]	; (8002340 <HAL_UART_MspInit+0x1f8>)
 80021de:	f001 fa91 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f2:	2307      	movs	r3, #7
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	4851      	ldr	r0, [pc, #324]	; (8002344 <HAL_UART_MspInit+0x1fc>)
 80021fe:	f001 fa81 	bl	8003704 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002204:	4a51      	ldr	r2, [pc, #324]	; (800234c <HAL_UART_MspInit+0x204>)
 8002206:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002208:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <HAL_UART_MspInit+0x200>)
 800220a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800220e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002210:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800221c:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_UART_MspInit+0x200>)
 800221e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002222:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_UART_MspInit+0x200>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002230:	4b45      	ldr	r3, [pc, #276]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_UART_MspInit+0x200>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002242:	4841      	ldr	r0, [pc, #260]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002244:	f000 fece 	bl	8002fe4 <HAL_DMA_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800224e:	f7ff fd8b 	bl	8001d68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <HAL_UART_MspInit+0x200>)
 8002256:	635a      	str	r2, [r3, #52]	; 0x34
 8002258:	4a3b      	ldr	r2, [pc, #236]	; (8002348 <HAL_UART_MspInit+0x200>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800225e:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_UART_MspInit+0x208>)
 8002260:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <HAL_UART_MspInit+0x20c>)
 8002262:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_UART_MspInit+0x208>)
 8002266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800226a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_UART_MspInit+0x208>)
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_UART_MspInit+0x208>)
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_UART_MspInit+0x208>)
 800227a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_UART_MspInit+0x208>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_UART_MspInit+0x208>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_UART_MspInit+0x208>)
 800228e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002292:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_UART_MspInit+0x208>)
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_UART_MspInit+0x208>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022a0:	482b      	ldr	r0, [pc, #172]	; (8002350 <HAL_UART_MspInit+0x208>)
 80022a2:	f000 fe9f 	bl	8002fe4 <HAL_DMA_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80022ac:	f7ff fd5c 	bl	8001d68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a27      	ldr	r2, [pc, #156]	; (8002350 <HAL_UART_MspInit+0x208>)
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
 80022b6:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_UART_MspInit+0x208>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022bc:	e038      	b.n	8002330 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a25      	ldr	r2, [pc, #148]	; (8002358 <HAL_UART_MspInit+0x210>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d133      	bne.n	8002330 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80022d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_UART_MspInit+0x1f4>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002300:	230c      	movs	r3, #12
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002310:	2307      	movs	r3, #7
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4809      	ldr	r0, [pc, #36]	; (8002340 <HAL_UART_MspInit+0x1f8>)
 800231c:	f001 f9f2 	bl	8003704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2026      	movs	r0, #38	; 0x26
 8002326:	f000 fc02 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800232a:	2026      	movs	r0, #38	; 0x26
 800232c:	f000 fc1b 	bl	8002b66 <HAL_NVIC_EnableIRQ>
}
 8002330:	bf00      	nop
 8002332:	3730      	adds	r7, #48	; 0x30
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40011000 	.word	0x40011000
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	200006e4 	.word	0x200006e4
 800234c:	40026440 	.word	0x40026440
 8002350:	20000684 	.word	0x20000684
 8002354:	400264b8 	.word	0x400264b8
 8002358:	40004400 	.word	0x40004400

0800235c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800235c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002394 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002360:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002362:	e003      	b.n	800236c <LoopCopyDataInit>

08002364 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002366:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002368:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800236a:	3104      	adds	r1, #4

0800236c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800236c:	480b      	ldr	r0, [pc, #44]	; (800239c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002370:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002372:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002374:	d3f6      	bcc.n	8002364 <CopyDataInit>
  ldr  r2, =_sbss
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002378:	e002      	b.n	8002380 <LoopFillZerobss>

0800237a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800237a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800237c:	f842 3b04 	str.w	r3, [r2], #4

08002380 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002382:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002384:	d3f9      	bcc.n	800237a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002386:	f7ff fd99 	bl	8001ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238a:	f003 fbc3 	bl	8005b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238e:	f7fe ffa1 	bl	80012d4 <main>
  bx  lr    
 8002392:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002394:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002398:	08007030 	.word	0x08007030
  ldr  r0, =_sdata
 800239c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023a0:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 80023a4:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 80023a8:	200007c8 	.word	0x200007c8

080023ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ac:	e7fe      	b.n	80023ac <ADC_IRQHandler>
	...

080023b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_Init+0x40>)
 80023ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_Init+0x40>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_Init+0x40>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f000 fb9d 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023de:	2000      	movs	r0, #0
 80023e0:	f000 f808 	bl	80023f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e4:	f7ff fcc8 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00

080023f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_InitTick+0x54>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x58>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240a:	fbb3 f3f1 	udiv	r3, r3, r1
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fbb5 	bl	8002b82 <HAL_SYSTICK_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00e      	b.n	8002440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d80a      	bhi.n	800243e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002428:	2200      	movs	r2, #0
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f000 fb7d 	bl	8002b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <HAL_InitTick+0x5c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000002c 	.word	0x2000002c
 800244c:	20000034 	.word	0x20000034
 8002450:	20000030 	.word	0x20000030

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000034 	.word	0x20000034
 8002478:	200007c4 	.word	0x200007c4

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	200007c4 	.word	0x200007c4

08002494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e033      	b.n	8002512 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fd14 	bl	8000ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024da:	f023 0302 	bic.w	r3, r3, #2
 80024de:	f043 0202 	orr.w	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f94a 	bl	8002780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
 8002502:	e001      	b.n	8002508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e113      	b.n	8002760 <HAL_ADC_ConfigChannel+0x244>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b09      	cmp	r3, #9
 8002546:	d925      	bls.n	8002594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	3b1e      	subs	r3, #30
 800255e:	2207      	movs	r2, #7
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	4603      	mov	r3, r0
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4403      	add	r3, r0
 8002586:	3b1e      	subs	r3, #30
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e022      	b.n	80025da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	2207      	movs	r2, #7
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4403      	add	r3, r0
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d824      	bhi.n	800262c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b05      	subs	r3, #5
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	e04c      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d824      	bhi.n	800267e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b23      	subs	r3, #35	; 0x23
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	; 0x23
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	e023      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b41      	subs	r3, #65	; 0x41
 8002690:	221f      	movs	r2, #31
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b41      	subs	r3, #65	; 0x41
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_ADC_ConfigChannel+0x250>)
 80026c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a28      	ldr	r2, [pc, #160]	; (8002770 <HAL_ADC_ConfigChannel+0x254>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10f      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d8>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d10b      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_ADC_ConfigChannel+0x254>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12b      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x23a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_ADC_ConfigChannel+0x258>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x1f4>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b11      	cmp	r3, #17
 800270e:	d122      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_ADC_ConfigChannel+0x258>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d111      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_ADC_ConfigChannel+0x25c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_ADC_ConfigChannel+0x260>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9a      	lsrs	r2, r3, #18
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40012300 	.word	0x40012300
 8002770:	40012000 	.word	0x40012000
 8002774:	10000012 	.word	0x10000012
 8002778:	2000002c 	.word	0x2000002c
 800277c:	431bde83 	.word	0x431bde83

08002780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002788:	4b79      	ldr	r3, [pc, #484]	; (8002970 <ADC_Init+0x1f0>)
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <ADC_Init+0x1f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6899      	ldr	r1, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	e00f      	b.n	800287e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800286c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800287c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0202 	bic.w	r2, r2, #2
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7e1b      	ldrb	r3, [r3, #24]
 8002898:	005a      	lsls	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	3b01      	subs	r3, #1
 80028d8:	035a      	lsls	r2, r3, #13
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	e007      	b.n	80028f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	3b01      	subs	r3, #1
 8002910:	051a      	lsls	r2, r3, #20
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002936:	025a      	lsls	r2, r3, #9
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	029a      	lsls	r2, r3, #10
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40012300 	.word	0x40012300
 8002974:	0f000001 	.word	0x0f000001

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f7ff ff8e 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff29 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff3e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff8e 	bl	8002a6c <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff31 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e014      	b.n	8002bd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	791b      	ldrb	r3, [r3, #4]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fe fa09 	bl	8000fd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	795b      	ldrb	r3, [r3, #5]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_DAC_Start_DMA+0x1e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e08e      	b.n	8002d1c <HAL_DAC_Start_DMA+0x13c>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12a      	bne.n	8002c66 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a43      	ldr	r2, [pc, #268]	; (8002d24 <HAL_DAC_Start_DMA+0x144>)
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a42      	ldr	r2, [pc, #264]	; (8002d28 <HAL_DAC_Start_DMA+0x148>)
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a41      	ldr	r2, [pc, #260]	; (8002d2c <HAL_DAC_Start_DMA+0x14c>)
 8002c26:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c36:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d009      	beq.n	8002c52 <HAL_DAC_Start_DMA+0x72>
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d00c      	beq.n	8002c5c <HAL_DAC_Start_DMA+0x7c>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d000      	beq.n	8002c48 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002c46:	e039      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	617b      	str	r3, [r7, #20]
        break;
 8002c50:	e034      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	617b      	str	r3, [r7, #20]
        break;
 8002c5a:	e02f      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3310      	adds	r3, #16
 8002c62:	617b      	str	r3, [r7, #20]
        break;
 8002c64:	e02a      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4a31      	ldr	r2, [pc, #196]	; (8002d30 <HAL_DAC_Start_DMA+0x150>)
 8002c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_DAC_Start_DMA+0x154>)
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <HAL_DAC_Start_DMA+0x158>)
 8002c7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d009      	beq.n	8002ca8 <HAL_DAC_Start_DMA+0xc8>
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d00c      	beq.n	8002cb2 <HAL_DAC_Start_DMA+0xd2>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d000      	beq.n	8002c9e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002c9c:	e00e      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	617b      	str	r3, [r7, #20]
        break;
 8002ca6:	e009      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3318      	adds	r3, #24
 8002cae:	617b      	str	r3, [r7, #20]
        break;
 8002cb0:	e004      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	331c      	adds	r3, #28
 8002cb8:	617b      	str	r3, [r7, #20]
        break;
 8002cba:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6898      	ldr	r0, [r3, #8]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	f000 fa30 	bl	8003140 <HAL_DMA_Start_IT>
 8002ce0:	e00e      	b.n	8002d00 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cf0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	68d8      	ldr	r0, [r3, #12]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	f000 fa20 	bl	8003140 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	08002ebb 	.word	0x08002ebb
 8002d28:	08002edd 	.word	0x08002edd
 8002d2c:	08002ef9 	.word	0x08002ef9
 8002d30:	08002f77 	.word	0x08002f77
 8002d34:	08002f99 	.word	0x08002f99
 8002d38:	08002fb5 	.word	0x08002fb5

08002d3c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	d118      	bne.n	8002d86 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2204      	movs	r2, #4
 8002d58:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d7e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f843 	bl	8002e0c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d94:	d118      	bne.n	8002dc8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f043 0202 	orr.w	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002dc0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8cd 	bl	8002f62 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	795b      	ldrb	r3, [r3, #5]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_DAC_ConfigChannel+0x20>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e036      	b.n	8002eae <HAL_DAC_ConfigChannel+0x8e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002e54:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	22c0      	movs	r2, #192	; 0xc0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff ff81 	bl	8002dd0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	711a      	strb	r2, [r3, #4]
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff ff7a 	bl	8002de4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f043 0204 	orr.w	r2, r3, #4
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff70 	bl	8002df8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	711a      	strb	r2, [r3, #4]
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff ffce 	bl	8002f26 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	711a      	strb	r2, [r3, #4]
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff ffc7 	bl	8002f3a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff ffbd 	bl	8002f4e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	711a      	strb	r2, [r3, #4]
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff fa44 	bl	800247c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e099      	b.n	8003134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	e00f      	b.n	8003042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003022:	f7ff fa2b 	bl	800247c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b05      	cmp	r3, #5
 800302e:	d908      	bls.n	8003042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e078      	b.n	8003134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e8      	bne.n	8003022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_DMA_Init+0x158>)
 800305c:	4013      	ands	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d117      	bne.n	8003106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa91 	bl	8003610 <DMA_CheckFifoParam>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2240      	movs	r2, #64	; 0x40
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003102:	2301      	movs	r3, #1
 8003104:	e016      	b.n	8003134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa48 	bl	80035a4 <DMA_CalcBaseAndBitshift>
 8003114:	4603      	mov	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	223f      	movs	r2, #63	; 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f010803f 	.word	0xf010803f

08003140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_DMA_Start_IT+0x26>
 8003162:	2302      	movs	r3, #2
 8003164:	e040      	b.n	80031e8 <HAL_DMA_Start_IT+0xa8>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d12f      	bne.n	80031da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f9da 	bl	8003548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	223f      	movs	r2, #63	; 0x3f
 800319a:	409a      	lsls	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0216 	orr.w	r2, r2, #22
 80031ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e005      	b.n	80031e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d004      	beq.n	800320e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e00c      	b.n	8003228 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2205      	movs	r2, #5
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003240:	4b92      	ldr	r3, [pc, #584]	; (800348c <HAL_DMA_IRQHandler+0x258>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a92      	ldr	r2, [pc, #584]	; (8003490 <HAL_DMA_IRQHandler+0x25c>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	2208      	movs	r2, #8
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	2208      	movs	r2, #8
 800328e:	409a      	lsls	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	2201      	movs	r2, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2204      	movs	r2, #4
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	2204      	movs	r2, #4
 80032fa:	409a      	lsls	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	2210      	movs	r2, #16
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d043      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03c      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2210      	movs	r2, #16
 8003330:	409a      	lsls	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d018      	beq.n	8003376 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d024      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e01f      	b.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e016      	b.n	80033a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0208 	bic.w	r2, r2, #8
 8003392:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2220      	movs	r2, #32
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 808e 	beq.w	80034d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8086 	beq.w	80034d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	2220      	movs	r2, #32
 80033cc:	409a      	lsls	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d136      	bne.n	800344c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0216 	bic.w	r2, r2, #22
 80033ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_DMA_IRQHandler+0x1da>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0208 	bic.w	r2, r2, #8
 800341c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	223f      	movs	r2, #63	; 0x3f
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	2b00      	cmp	r3, #0
 8003440:	d07d      	beq.n	800353e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
        }
        return;
 800344a:	e078      	b.n	800353e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01c      	beq.n	8003494 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	2b00      	cmp	r3, #0
 800346e:	d030      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e02b      	b.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d027      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
 800348a:	e022      	b.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
 800348c:	2000002c 	.word	0x2000002c
 8003490:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0210 	bic.w	r2, r2, #16
 80034b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d032      	beq.n	8003540 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d022      	beq.n	800352c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2205      	movs	r2, #5
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3301      	adds	r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	429a      	cmp	r2, r3
 8003508:	d307      	bcc.n	800351a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f2      	bne.n	80034fe <HAL_DMA_IRQHandler+0x2ca>
 8003518:	e000      	b.n	800351c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800351a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e000      	b.n	8003540 <HAL_DMA_IRQHandler+0x30c>
        return;
 800353e:	bf00      	nop
    }
  }
}
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop

08003548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d108      	bne.n	8003588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003586:	e007      	b.n	8003598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3b10      	subs	r3, #16
 80035b4:	4a14      	ldr	r2, [pc, #80]	; (8003608 <DMA_CalcBaseAndBitshift+0x64>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <DMA_CalcBaseAndBitshift+0x68>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d909      	bls.n	80035e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	659a      	str	r2, [r3, #88]	; 0x58
 80035e4:	e007      	b.n	80035f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	aaaaaaab 	.word	0xaaaaaaab
 800360c:	08006d30 	.word	0x08006d30

08003610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11f      	bne.n	800366a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d855      	bhi.n	80036dc <DMA_CheckFifoParam+0xcc>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <DMA_CheckFifoParam+0x28>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	0800365b 	.word	0x0800365b
 8003640:	08003649 	.word	0x08003649
 8003644:	080036dd 	.word	0x080036dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d045      	beq.n	80036e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e042      	b.n	80036e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003662:	d13f      	bne.n	80036e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003668:	e03c      	b.n	80036e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003672:	d121      	bne.n	80036b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d836      	bhi.n	80036e8 <DMA_CheckFifoParam+0xd8>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <DMA_CheckFifoParam+0x70>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	08003691 	.word	0x08003691
 8003684:	08003697 	.word	0x08003697
 8003688:	08003691 	.word	0x08003691
 800368c:	080036a9 	.word	0x080036a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	e02f      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d024      	beq.n	80036ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a6:	e021      	b.n	80036ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b0:	d11e      	bne.n	80036f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036b6:	e01b      	b.n	80036f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <DMA_CheckFifoParam+0xb4>
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d003      	beq.n	80036ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c2:	e018      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      break;
 80036c8:	e015      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00e      	beq.n	80036f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      break;
 80036da:	e00b      	b.n	80036f4 <DMA_CheckFifoParam+0xe4>
      break;
 80036dc:	bf00      	nop
 80036de:	e00a      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036e0:	bf00      	nop
 80036e2:	e008      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036e4:	bf00      	nop
 80036e6:	e006      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036e8:	bf00      	nop
 80036ea:	e004      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036ec:	bf00      	nop
 80036ee:	e002      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036f4:	bf00      	nop
    }
  } 
  
  return status; 
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e177      	b.n	8003a10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003720:	2201      	movs	r2, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	f040 8166 	bne.w	8003a0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d00b      	beq.n	800375e <HAL_GPIO_Init+0x5a>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003752:	2b11      	cmp	r3, #17
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b12      	cmp	r3, #18
 800375c:	d130      	bne.n	80037c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0xfc>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b12      	cmp	r3, #18
 80037fe:	d123      	bne.n	8003848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80c0 	beq.w	8003a0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_GPIO_Init+0x320>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a64      	ldr	r2, [pc, #400]	; (8003a24 <HAL_GPIO_Init+0x320>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <HAL_GPIO_Init+0x320>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a6:	4a60      	ldr	r2, [pc, #384]	; (8003a28 <HAL_GPIO_Init+0x324>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a57      	ldr	r2, [pc, #348]	; (8003a2c <HAL_GPIO_Init+0x328>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d037      	beq.n	8003942 <HAL_GPIO_Init+0x23e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <HAL_GPIO_Init+0x32c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d031      	beq.n	800393e <HAL_GPIO_Init+0x23a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a55      	ldr	r2, [pc, #340]	; (8003a34 <HAL_GPIO_Init+0x330>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <HAL_GPIO_Init+0x236>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a54      	ldr	r2, [pc, #336]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d025      	beq.n	8003936 <HAL_GPIO_Init+0x232>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a53      	ldr	r2, [pc, #332]	; (8003a3c <HAL_GPIO_Init+0x338>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <HAL_GPIO_Init+0x22e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x33c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x22a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a51      	ldr	r2, [pc, #324]	; (8003a44 <HAL_GPIO_Init+0x340>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x226>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_GPIO_Init+0x344>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x222>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4f      	ldr	r2, [pc, #316]	; (8003a4c <HAL_GPIO_Init+0x348>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x21e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4e      	ldr	r2, [pc, #312]	; (8003a50 <HAL_GPIO_Init+0x34c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x21a>
 800391a:	2309      	movs	r3, #9
 800391c:	e012      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800391e:	230a      	movs	r3, #10
 8003920:	e010      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003922:	2308      	movs	r3, #8
 8003924:	e00e      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003926:	2307      	movs	r3, #7
 8003928:	e00c      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392a:	2306      	movs	r3, #6
 800392c:	e00a      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392e:	2305      	movs	r3, #5
 8003930:	e008      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003932:	2304      	movs	r3, #4
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003936:	2303      	movs	r3, #3
 8003938:	e004      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393a:	2302      	movs	r3, #2
 800393c:	e002      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003942:	2300      	movs	r3, #0
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f002 0203 	and.w	r2, r2, #3
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4093      	lsls	r3, r2
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003954:	4934      	ldr	r1, [pc, #208]	; (8003a28 <HAL_GPIO_Init+0x324>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003986:	4a33      	ldr	r2, [pc, #204]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800398c:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_GPIO_Init+0x350>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e0:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a04:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	f67f ae84 	bls.w	8003720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3724      	adds	r7, #36	; 0x24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40020400 	.word	0x40020400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40021800 	.word	0x40021800
 8003a48:	40021c00 	.word	0x40021c00
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40022400 	.word	0x40022400
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab8:	f7fe fce0 	bl	800247c <HAL_GetTick>
 8003abc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003abe:	e009      	b.n	8003ad4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ac0:	f7fe fcdc 	bl	800247c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ace:	d901      	bls.n	8003ad4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e01f      	b.n	8003b14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ad4:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d1ee      	bne.n	8003ac0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae8:	f7fe fcc8 	bl	800247c <HAL_GetTick>
 8003aec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aee:	e009      	b.n	8003b04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003af0:	f7fe fcc4 	bl	800247c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003afe:	d901      	bls.n	8003b04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e007      	b.n	8003b14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b04:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b10:	d1ee      	bne.n	8003af0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	420e0040 	.word	0x420e0040
 8003b24:	40007000 	.word	0x40007000
 8003b28:	420e0044 	.word	0x420e0044

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e25b      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d075      	beq.n	8003c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4a:	4ba3      	ldr	r3, [pc, #652]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d00c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4ba0      	ldr	r3, [pc, #640]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d112      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b9d      	ldr	r3, [pc, #628]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	4b99      	ldr	r3, [pc, #612]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05b      	beq.n	8003c34 <HAL_RCC_OscConfig+0x108>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d157      	bne.n	8003c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e236      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x74>
 8003b92:	4b91      	ldr	r3, [pc, #580]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a90      	ldr	r2, [pc, #576]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e01d      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x98>
 8003baa:	4b8b      	ldr	r3, [pc, #556]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a8a      	ldr	r2, [pc, #552]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a87      	ldr	r2, [pc, #540]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003bc4:	4b84      	ldr	r3, [pc, #528]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a83      	ldr	r2, [pc, #524]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b81      	ldr	r3, [pc, #516]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a80      	ldr	r2, [pc, #512]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fc4a 	bl	800247c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe fc46 	bl	800247c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1fb      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b76      	ldr	r3, [pc, #472]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0xc0>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fc36 	bl	800247c <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe fc32 	bl	800247c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1e7      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	4b6c      	ldr	r3, [pc, #432]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0xe8>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d063      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c42:	4b65      	ldr	r3, [pc, #404]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b62      	ldr	r3, [pc, #392]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d11c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b5f      	ldr	r3, [pc, #380]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d116      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c66:	4b5c      	ldr	r3, [pc, #368]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e1bb      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4952      	ldr	r1, [pc, #328]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c92:	e03a      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c9c:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <HAL_RCC_OscConfig+0x2b0>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fbeb 	bl	800247c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fe fbe7 	bl	800247c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e19c      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4940      	ldr	r1, [pc, #256]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <HAL_RCC_OscConfig+0x2b0>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fbca 	bl	800247c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cec:	f7fe fbc6 	bl	800247c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e17b      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d030      	beq.n	8003d78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_RCC_OscConfig+0x2b4>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fe fbaa 	bl	800247c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fe fba6 	bl	800247c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e15b      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x200>
 8003d4a:	e015      	b.n	8003d78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4c:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <HAL_RCC_OscConfig+0x2b4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fb93 	bl	800247c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fb8f 	bl	800247c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e144      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a0 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_OscConfig+0x2b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d121      	bne.n	8003e06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <HAL_RCC_OscConfig+0x2b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <HAL_RCC_OscConfig+0x2b8>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fb55 	bl	800247c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e011      	b.n	8003dfa <HAL_RCC_OscConfig+0x2ce>
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470000 	.word	0x42470000
 8003de0:	42470e80 	.word	0x42470e80
 8003de4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de8:	f7fe fb48 	bl	800247c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0fd      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x4d4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d106      	bne.n	8003e1c <HAL_RCC_OscConfig+0x2f0>
 8003e0e:	4b7d      	ldr	r3, [pc, #500]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1a:	e01c      	b.n	8003e56 <HAL_RCC_OscConfig+0x32a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d10c      	bne.n	8003e3e <HAL_RCC_OscConfig+0x312>
 8003e24:	4b77      	ldr	r3, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a76      	ldr	r2, [pc, #472]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	4b74      	ldr	r3, [pc, #464]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	e00b      	b.n	8003e56 <HAL_RCC_OscConfig+0x32a>
 8003e3e:	4b71      	ldr	r3, [pc, #452]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a70      	ldr	r2, [pc, #448]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	4b6e      	ldr	r3, [pc, #440]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a6d      	ldr	r2, [pc, #436]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e50:	f023 0304 	bic.w	r3, r3, #4
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d015      	beq.n	8003e8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fb0d 	bl	800247c <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe fb09 	bl	800247c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0bc      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	4b61      	ldr	r3, [pc, #388]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ee      	beq.n	8003e66 <HAL_RCC_OscConfig+0x33a>
 8003e88:	e014      	b.n	8003eb4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8a:	f7fe faf7 	bl	800247c <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fe faf3 	bl	800247c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e0a6      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea8:	4b56      	ldr	r3, [pc, #344]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ee      	bne.n	8003e92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eba:	4b52      	ldr	r3, [pc, #328]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a51      	ldr	r2, [pc, #324]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8092 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed0:	4b4c      	ldr	r3, [pc, #304]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d05c      	beq.n	8003f96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d141      	bne.n	8003f68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	4b48      	ldr	r3, [pc, #288]	; (8004008 <HAL_RCC_OscConfig+0x4dc>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe fac7 	bl	800247c <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7fe fac3 	bl	800247c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e078      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f04:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f0      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	019b      	lsls	r3, r3, #6
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	061b      	lsls	r3, r3, #24
 8003f34:	4933      	ldr	r1, [pc, #204]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3a:	4b33      	ldr	r3, [pc, #204]	; (8004008 <HAL_RCC_OscConfig+0x4dc>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fa9c 	bl	800247c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe fa98 	bl	800247c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e04d      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x41c>
 8003f66:	e045      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_RCC_OscConfig+0x4dc>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe fa85 	bl	800247c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fe fa81 	bl	800247c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e036      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x44a>
 8003f94:	e02e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e029      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa2:	4b18      	ldr	r3, [pc, #96]	; (8004004 <HAL_RCC_OscConfig+0x4d8>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d115      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40007000 	.word	0x40007000
 8004004:	40023800 	.word	0x40023800
 8004008:	42470060 	.word	0x42470060

0800400c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0cc      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d90c      	bls.n	8004048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b65      	ldr	r3, [pc, #404]	; (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b8      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a58      	ldr	r2, [pc, #352]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004078:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a52      	ldr	r2, [pc, #328]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	494d      	ldr	r1, [pc, #308]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d044      	beq.n	800412c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d119      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040da:	4b3b      	ldr	r3, [pc, #236]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e067      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ea:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f023 0203 	bic.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4934      	ldr	r1, [pc, #208]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040fc:	f7fe f9be 	bl	800247c <HAL_GetTick>
 8004100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	e00a      	b.n	800411a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004104:	f7fe f9ba 	bl	800247c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e04f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411a:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 020c 	and.w	r2, r3, #12
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	429a      	cmp	r2, r3
 800412a:	d1eb      	bne.n	8004104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d20c      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4916      	ldr	r1, [pc, #88]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490e      	ldr	r1, [pc, #56]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f821 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004196:	4601      	mov	r1, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	fa21 f303 	lsr.w	r3, r1, r3
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe f91e 	bl	80023f4 <HAL_InitTick>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40023c00 	.word	0x40023c00
 80041c8:	40023800 	.word	0x40023800
 80041cc:	08006d18 	.word	0x08006d18
 80041d0:	2000002c 	.word	0x2000002c
 80041d4:	20000030 	.word	0x20000030

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	2300      	movs	r3, #0
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ee:	4b50      	ldr	r3, [pc, #320]	; (8004330 <HAL_RCC_GetSysClockFreq+0x158>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d007      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x32>
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d008      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x38>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 808d 	bne.w	800431e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004206:	60bb      	str	r3, [r7, #8]
       break;
 8004208:	e08c      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800420a:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <HAL_RCC_GetSysClockFreq+0x160>)
 800420c:	60bb      	str	r3, [r7, #8]
      break;
 800420e:	e089      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004210:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_GetSysClockFreq+0x158>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004218:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800421a:	4b45      	ldr	r3, [pc, #276]	; (8004330 <HAL_RCC_GetSysClockFreq+0x158>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d023      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004226:	4b42      	ldr	r3, [pc, #264]	; (8004330 <HAL_RCC_GetSysClockFreq+0x158>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	f04f 0400 	mov.w	r4, #0
 8004230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	ea03 0501 	and.w	r5, r3, r1
 800423c:	ea04 0602 	and.w	r6, r4, r2
 8004240:	4a3d      	ldr	r2, [pc, #244]	; (8004338 <HAL_RCC_GetSysClockFreq+0x160>)
 8004242:	fb02 f106 	mul.w	r1, r2, r6
 8004246:	2200      	movs	r2, #0
 8004248:	fb02 f205 	mul.w	r2, r2, r5
 800424c:	440a      	add	r2, r1
 800424e:	493a      	ldr	r1, [pc, #232]	; (8004338 <HAL_RCC_GetSysClockFreq+0x160>)
 8004250:	fba5 0101 	umull	r0, r1, r5, r1
 8004254:	1853      	adds	r3, r2, r1
 8004256:	4619      	mov	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f04f 0400 	mov.w	r4, #0
 800425e:	461a      	mov	r2, r3
 8004260:	4623      	mov	r3, r4
 8004262:	f7fc fc6b 	bl	8000b3c <__aeabi_uldivmod>
 8004266:	4603      	mov	r3, r0
 8004268:	460c      	mov	r4, r1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e049      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCC_GetSysClockFreq+0x158>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	f04f 0400 	mov.w	r4, #0
 8004278:	f240 11ff 	movw	r1, #511	; 0x1ff
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	ea03 0501 	and.w	r5, r3, r1
 8004284:	ea04 0602 	and.w	r6, r4, r2
 8004288:	4629      	mov	r1, r5
 800428a:	4632      	mov	r2, r6
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	f04f 0400 	mov.w	r4, #0
 8004294:	0154      	lsls	r4, r2, #5
 8004296:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800429a:	014b      	lsls	r3, r1, #5
 800429c:	4619      	mov	r1, r3
 800429e:	4622      	mov	r2, r4
 80042a0:	1b49      	subs	r1, r1, r5
 80042a2:	eb62 0206 	sbc.w	r2, r2, r6
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	f04f 0400 	mov.w	r4, #0
 80042ae:	0194      	lsls	r4, r2, #6
 80042b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042b4:	018b      	lsls	r3, r1, #6
 80042b6:	1a5b      	subs	r3, r3, r1
 80042b8:	eb64 0402 	sbc.w	r4, r4, r2
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	00e2      	lsls	r2, r4, #3
 80042c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ca:	00d9      	lsls	r1, r3, #3
 80042cc:	460b      	mov	r3, r1
 80042ce:	4614      	mov	r4, r2
 80042d0:	195b      	adds	r3, r3, r5
 80042d2:	eb44 0406 	adc.w	r4, r4, r6
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	02a2      	lsls	r2, r4, #10
 80042e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042e4:	0299      	lsls	r1, r3, #10
 80042e6:	460b      	mov	r3, r1
 80042e8:	4614      	mov	r4, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	4621      	mov	r1, r4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	461a      	mov	r2, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	f7fc fc20 	bl	8000b3c <__aeabi_uldivmod>
 80042fc:	4603      	mov	r3, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_GetSysClockFreq+0x158>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	3301      	adds	r3, #1
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	60bb      	str	r3, [r7, #8]
      break;
 800431c:	e002      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004320:	60bb      	str	r3, [r7, #8]
      break;
 8004322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004324:	68bb      	ldr	r3, [r7, #8]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800
 8004334:	00f42400 	.word	0x00f42400
 8004338:	017d7840 	.word	0x017d7840

0800433c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <HAL_RCC_GetHCLKFreq+0x14>)
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	2000002c 	.word	0x2000002c

08004354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004358:	f7ff fff0 	bl	800433c <HAL_RCC_GetHCLKFreq>
 800435c:	4601      	mov	r1, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0a9b      	lsrs	r3, r3, #10
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4a03      	ldr	r2, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800436a:	5cd3      	ldrb	r3, [r2, r3]
 800436c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	08006d28 	.word	0x08006d28

0800437c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004380:	f7ff ffdc 	bl	800433c <HAL_RCC_GetHCLKFreq>
 8004384:	4601      	mov	r1, r0
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	0b5b      	lsrs	r3, r3, #13
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	4a03      	ldr	r2, [pc, #12]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004392:	5cd3      	ldrb	r3, [r2, r3]
 8004394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40023800 	.word	0x40023800
 80043a0:	08006d28 	.word	0x08006d28

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e01d      	b.n	80043f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd fe24 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 fa4a 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b06      	cmp	r3, #6
 800441a:	d007      	beq.n	800442c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a1a      	ldr	r2, [r3, #32]
 8004458:	f241 1311 	movw	r3, #4369	; 0x1111
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <HAL_TIM_Base_Stop+0x40>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	f240 4344 	movw	r3, #1092	; 0x444
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <HAL_TIM_Base_Stop+0x40>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0202 	mvn.w	r2, #2
 80044c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9af 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9a1 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9b2 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d122      	bne.n	8004548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0204 	mvn.w	r2, #4
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f985 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f977 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f988 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b08      	cmp	r3, #8
 8004554:	d122      	bne.n	800459c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d11b      	bne.n	800459c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0208 	mvn.w	r2, #8
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2204      	movs	r2, #4
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f95b 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f94d 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f95e 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	d122      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d11b      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0210 	mvn.w	r2, #16
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2208      	movs	r2, #8
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f931 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f923 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f934 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0201 	mvn.w	r2, #1
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8fd 	bl	8004816 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fada 	bl	8004bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8f9 	bl	8004866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b20      	cmp	r3, #32
 8004680:	d10e      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0220 	mvn.w	r2, #32
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 faa4 	bl	8004be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_ConfigClockSource+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0a6      	b.n	800480e <HAL_TIM_ConfigClockSource+0x166>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d067      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0x120>
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d80b      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x6c>
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d073      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0x140>
 8004700:	2b10      	cmp	r3, #16
 8004702:	d802      	bhi.n	800470a <HAL_TIM_ConfigClockSource+0x62>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d06f      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004708:	e078      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800470a:	2b20      	cmp	r3, #32
 800470c:	d06c      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0x140>
 800470e:	2b30      	cmp	r3, #48	; 0x30
 8004710:	d06a      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004712:	e073      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004714:	2b70      	cmp	r3, #112	; 0x70
 8004716:	d00d      	beq.n	8004734 <HAL_TIM_ConfigClockSource+0x8c>
 8004718:	2b70      	cmp	r3, #112	; 0x70
 800471a:	d804      	bhi.n	8004726 <HAL_TIM_ConfigClockSource+0x7e>
 800471c:	2b50      	cmp	r3, #80	; 0x50
 800471e:	d033      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0xe0>
 8004720:	2b60      	cmp	r3, #96	; 0x60
 8004722:	d041      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004724:	e06a      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472a:	d066      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x152>
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004730:	d017      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004732:	e063      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6899      	ldr	r1, [r3, #8]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f000 f9b4 	bl	8004ab0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004756:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	609a      	str	r2, [r3, #8]
      break;
 8004760:	e04c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f000 f99d 	bl	8004ab0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004784:	609a      	str	r2, [r3, #8]
      break;
 8004786:	e039      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	461a      	mov	r2, r3
 8004796:	f000 f911 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2150      	movs	r1, #80	; 0x50
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f96a 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80047a6:	e029      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	461a      	mov	r2, r3
 80047b6:	f000 f930 	bl	8004a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2160      	movs	r1, #96	; 0x60
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f95a 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80047c6:	e019      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f000 f8f1 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2140      	movs	r1, #64	; 0x40
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f94a 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80047e6:	e009      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 f941 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80047f8:	e000      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a40      	ldr	r2, [pc, #256]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d00f      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a3d      	ldr	r2, [pc, #244]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00b      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3b      	ldr	r2, [pc, #236]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d108      	bne.n	80048ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <TIM_Base_SetConfig+0x114>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d027      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d023      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01f      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d017      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <TIM_Base_SetConfig+0x128>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0x12c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00f      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a26      	ldr	r2, [pc, #152]	; (80049ac <TIM_Base_SetConfig+0x130>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_Base_SetConfig+0x134>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <TIM_Base_SetConfig+0x138>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <TIM_Base_SetConfig+0x13c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0xf8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d103      	bne.n	800497c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	615a      	str	r2, [r3, #20]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800
 80049b0:	40001800 	.word	0x40001800
 80049b4:	40001c00 	.word	0x40001c00
 80049b8:	40002000 	.word	0x40002000

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 030a 	bic.w	r3, r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	031b      	lsls	r3, r3, #12
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f043 0307 	orr.w	r3, r3, #7
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	021a      	lsls	r2, r3, #8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	609a      	str	r2, [r3, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e05a      	b.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d022      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d01d      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d018      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10c      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40010400 	.word	0x40010400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40001800 	.word	0x40001800

08004be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e03f      	b.n	8004ca2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fd fa86 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fbdd 	bl	8005414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b088      	sub	sp, #32
 8004cae:	af02      	add	r7, sp, #8
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	f040 8083 	bne.w	8004dd2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Transmit+0x2e>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e07b      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Transmit+0x40>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e074      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2221      	movs	r2, #33	; 0x21
 8004cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d00:	f7fd fbbc 	bl	800247c <HAL_GetTick>
 8004d04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d1a:	e042      	b.n	8004da2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d122      	bne.n	8004d7a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f9fc 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e042      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	e017      	b.n	8004da2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	3301      	adds	r3, #1
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	e013      	b.n	8004da2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	2180      	movs	r1, #128	; 0x80
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f9d9 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e01f      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	60ba      	str	r2, [r7, #8]
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b7      	bne.n	8004d1c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	2140      	movs	r1, #64	; 0x40
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f9c0 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e006      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	f040 8090 	bne.w	8004f1e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_UART_Receive+0x2e>
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e088      	b.n	8004f20 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_UART_Receive+0x40>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e081      	b.n	8004f20 <HAL_UART_Receive+0x144>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2222      	movs	r2, #34	; 0x22
 8004e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e32:	f7fd fb23 	bl	800247c <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	88fa      	ldrh	r2, [r7, #6]
 8004e42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e4c:	e05c      	b.n	8004f08 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e64:	d12b      	bne.n	8004ebe <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2120      	movs	r1, #32
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f963 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e04f      	b.n	8004f20 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10c      	bne.n	8004ea6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	e030      	b.n	8004f08 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	e024      	b.n	8004f08 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2120      	movs	r1, #32
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f937 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e023      	b.n	8004f20 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	60ba      	str	r2, [r7, #8]
 8004eec:	b2ca      	uxtb	r2, r1
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e00a      	b.n	8004f08 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d19d      	bne.n	8004e4e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_UART_IRQHandler+0x52>
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f9cc 	bl	8005310 <UART_Receive_IT>
      return;
 8004f78:	e0d1      	b.n	800511e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b0 	beq.w	80050e2 <HAL_UART_IRQHandler+0x1ba>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_UART_IRQHandler+0x70>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80a5 	beq.w	80050e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x90>
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xb0>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	f043 0202 	orr.w	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xd0>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	f043 0204 	orr.w	r2, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00f      	beq.n	8005022 <HAL_UART_IRQHandler+0xfa>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_UART_IRQHandler+0xee>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	f043 0208 	orr.w	r2, r3, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d078      	beq.n	800511c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_UART_IRQHandler+0x11c>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f966 	bl	8005310 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <HAL_UART_IRQHandler+0x144>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d031      	beq.n	80050d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8af 	bl	80051d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d123      	bne.n	80050c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	2b00      	cmp	r3, #0
 8005096:	d013      	beq.n	80050c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	4a21      	ldr	r2, [pc, #132]	; (8005124 <HAL_UART_IRQHandler+0x1fc>)
 800509e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe f8a3 	bl	80031f0 <HAL_DMA_Abort_IT>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d016      	beq.n	80050de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050ba:	4610      	mov	r0, r2
 80050bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050be:	e00e      	b.n	80050de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f831 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c6:	e00a      	b.n	80050de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f82d 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ce:	e006      	b.n	80050de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f829 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80050dc:	e01e      	b.n	800511c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050de:	bf00      	nop
    return;
 80050e0:	e01c      	b.n	800511c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_UART_IRQHandler+0x1d6>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f89c 	bl	8005234 <UART_Transmit_IT>
    return;
 80050fc:	e00f      	b.n	800511e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_UART_IRQHandler+0x1f6>
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8e4 	bl	80052e0 <UART_EndTransmit_IT>
    return;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_UART_IRQHandler+0x1f6>
    return;
 800511c:	bf00      	nop
  }
}
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	0800520d 	.word	0x0800520d

08005128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514c:	e02c      	b.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d028      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <UART_WaitOnFlagUntilTimeout+0x30>
 800515c:	f7fd f98e 	bl	800247c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	429a      	cmp	r2, r3
 800516a:	d21d      	bcs.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800517a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e00f      	b.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d0c3      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff ff7e 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b21      	cmp	r3, #33	; 0x21
 8005246:	d144      	bne.n	80052d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005250:	d11a      	bne.n	8005288 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005266:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]
 800527a:	e00e      	b.n	800529a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]
 8005286:	e008      	b.n	800529a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	1c59      	adds	r1, r3, #1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6211      	str	r1, [r2, #32]
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4619      	mov	r1, r3
 80052a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fc f913 	bl	800152c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b22      	cmp	r3, #34	; 0x22
 8005322:	d171      	bne.n	8005408 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d123      	bne.n	8005376 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10e      	bne.n	800535a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	1c9a      	adds	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28
 8005358:	e029      	b.n	80053ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	b29b      	uxth	r3, r3
 8005362:	b2db      	uxtb	r3, r3
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
 8005374:	e01b      	b.n	80053ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6858      	ldr	r0, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6291      	str	r1, [r2, #40]	; 0x28
 800538e:	b2c2      	uxtb	r2, r0
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e00c      	b.n	80053ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	1c58      	adds	r0, r3, #1
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	6288      	str	r0, [r1, #40]	; 0x28
 80053a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	4619      	mov	r1, r3
 80053bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d120      	bne.n	8005404 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0220 	bic.w	r2, r2, #32
 80053d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc f88c 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	e002      	b.n	800540a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	e000      	b.n	800540a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005456:	f023 030c 	bic.w	r3, r3, #12
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	430b      	orrs	r3, r1
 8005462:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005482:	f040 818b 	bne.w	800579c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4ac1      	ldr	r2, [pc, #772]	; (8005790 <UART_SetConfig+0x37c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d005      	beq.n	800549c <UART_SetConfig+0x88>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4abf      	ldr	r2, [pc, #764]	; (8005794 <UART_SetConfig+0x380>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f040 80bd 	bne.w	8005616 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800549c:	f7fe ff6e 	bl	800437c <HAL_RCC_GetPCLK2Freq>
 80054a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	461d      	mov	r5, r3
 80054a6:	f04f 0600 	mov.w	r6, #0
 80054aa:	46a8      	mov	r8, r5
 80054ac:	46b1      	mov	r9, r6
 80054ae:	eb18 0308 	adds.w	r3, r8, r8
 80054b2:	eb49 0409 	adc.w	r4, r9, r9
 80054b6:	4698      	mov	r8, r3
 80054b8:	46a1      	mov	r9, r4
 80054ba:	eb18 0805 	adds.w	r8, r8, r5
 80054be:	eb49 0906 	adc.w	r9, r9, r6
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054d6:	4688      	mov	r8, r1
 80054d8:	4691      	mov	r9, r2
 80054da:	eb18 0005 	adds.w	r0, r8, r5
 80054de:	eb49 0106 	adc.w	r1, r9, r6
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	461d      	mov	r5, r3
 80054e8:	f04f 0600 	mov.w	r6, #0
 80054ec:	196b      	adds	r3, r5, r5
 80054ee:	eb46 0406 	adc.w	r4, r6, r6
 80054f2:	461a      	mov	r2, r3
 80054f4:	4623      	mov	r3, r4
 80054f6:	f7fb fb21 	bl	8000b3c <__aeabi_uldivmod>
 80054fa:	4603      	mov	r3, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	461a      	mov	r2, r3
 8005500:	4ba5      	ldr	r3, [pc, #660]	; (8005798 <UART_SetConfig+0x384>)
 8005502:	fba3 2302 	umull	r2, r3, r3, r2
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	461d      	mov	r5, r3
 8005510:	f04f 0600 	mov.w	r6, #0
 8005514:	46a9      	mov	r9, r5
 8005516:	46b2      	mov	sl, r6
 8005518:	eb19 0309 	adds.w	r3, r9, r9
 800551c:	eb4a 040a 	adc.w	r4, sl, sl
 8005520:	4699      	mov	r9, r3
 8005522:	46a2      	mov	sl, r4
 8005524:	eb19 0905 	adds.w	r9, r9, r5
 8005528:	eb4a 0a06 	adc.w	sl, sl, r6
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800553c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005540:	4689      	mov	r9, r1
 8005542:	4692      	mov	sl, r2
 8005544:	eb19 0005 	adds.w	r0, r9, r5
 8005548:	eb4a 0106 	adc.w	r1, sl, r6
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	461d      	mov	r5, r3
 8005552:	f04f 0600 	mov.w	r6, #0
 8005556:	196b      	adds	r3, r5, r5
 8005558:	eb46 0406 	adc.w	r4, r6, r6
 800555c:	461a      	mov	r2, r3
 800555e:	4623      	mov	r3, r4
 8005560:	f7fb faec 	bl	8000b3c <__aeabi_uldivmod>
 8005564:	4603      	mov	r3, r0
 8005566:	460c      	mov	r4, r1
 8005568:	461a      	mov	r2, r3
 800556a:	4b8b      	ldr	r3, [pc, #556]	; (8005798 <UART_SetConfig+0x384>)
 800556c:	fba3 1302 	umull	r1, r3, r3, r2
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	2164      	movs	r1, #100	; 0x64
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	3332      	adds	r3, #50	; 0x32
 800557e:	4a86      	ldr	r2, [pc, #536]	; (8005798 <UART_SetConfig+0x384>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800558c:	4498      	add	r8, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	461d      	mov	r5, r3
 8005592:	f04f 0600 	mov.w	r6, #0
 8005596:	46a9      	mov	r9, r5
 8005598:	46b2      	mov	sl, r6
 800559a:	eb19 0309 	adds.w	r3, r9, r9
 800559e:	eb4a 040a 	adc.w	r4, sl, sl
 80055a2:	4699      	mov	r9, r3
 80055a4:	46a2      	mov	sl, r4
 80055a6:	eb19 0905 	adds.w	r9, r9, r5
 80055aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80055ae:	f04f 0100 	mov.w	r1, #0
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055c2:	4689      	mov	r9, r1
 80055c4:	4692      	mov	sl, r2
 80055c6:	eb19 0005 	adds.w	r0, r9, r5
 80055ca:	eb4a 0106 	adc.w	r1, sl, r6
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	461d      	mov	r5, r3
 80055d4:	f04f 0600 	mov.w	r6, #0
 80055d8:	196b      	adds	r3, r5, r5
 80055da:	eb46 0406 	adc.w	r4, r6, r6
 80055de:	461a      	mov	r2, r3
 80055e0:	4623      	mov	r3, r4
 80055e2:	f7fb faab 	bl	8000b3c <__aeabi_uldivmod>
 80055e6:	4603      	mov	r3, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b6a      	ldr	r3, [pc, #424]	; (8005798 <UART_SetConfig+0x384>)
 80055ee:	fba3 1302 	umull	r1, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2164      	movs	r1, #100	; 0x64
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	3332      	adds	r3, #50	; 0x32
 8005600:	4a65      	ldr	r2, [pc, #404]	; (8005798 <UART_SetConfig+0x384>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	f003 0207 	and.w	r2, r3, #7
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4442      	add	r2, r8
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	e26f      	b.n	8005af6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005616:	f7fe fe9d 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 800561a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	461d      	mov	r5, r3
 8005620:	f04f 0600 	mov.w	r6, #0
 8005624:	46a8      	mov	r8, r5
 8005626:	46b1      	mov	r9, r6
 8005628:	eb18 0308 	adds.w	r3, r8, r8
 800562c:	eb49 0409 	adc.w	r4, r9, r9
 8005630:	4698      	mov	r8, r3
 8005632:	46a1      	mov	r9, r4
 8005634:	eb18 0805 	adds.w	r8, r8, r5
 8005638:	eb49 0906 	adc.w	r9, r9, r6
 800563c:	f04f 0100 	mov.w	r1, #0
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005648:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800564c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005650:	4688      	mov	r8, r1
 8005652:	4691      	mov	r9, r2
 8005654:	eb18 0005 	adds.w	r0, r8, r5
 8005658:	eb49 0106 	adc.w	r1, r9, r6
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	461d      	mov	r5, r3
 8005662:	f04f 0600 	mov.w	r6, #0
 8005666:	196b      	adds	r3, r5, r5
 8005668:	eb46 0406 	adc.w	r4, r6, r6
 800566c:	461a      	mov	r2, r3
 800566e:	4623      	mov	r3, r4
 8005670:	f7fb fa64 	bl	8000b3c <__aeabi_uldivmod>
 8005674:	4603      	mov	r3, r0
 8005676:	460c      	mov	r4, r1
 8005678:	461a      	mov	r2, r3
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <UART_SetConfig+0x384>)
 800567c:	fba3 2302 	umull	r2, r3, r3, r2
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	461d      	mov	r5, r3
 800568a:	f04f 0600 	mov.w	r6, #0
 800568e:	46a9      	mov	r9, r5
 8005690:	46b2      	mov	sl, r6
 8005692:	eb19 0309 	adds.w	r3, r9, r9
 8005696:	eb4a 040a 	adc.w	r4, sl, sl
 800569a:	4699      	mov	r9, r3
 800569c:	46a2      	mov	sl, r4
 800569e:	eb19 0905 	adds.w	r9, r9, r5
 80056a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ba:	4689      	mov	r9, r1
 80056bc:	4692      	mov	sl, r2
 80056be:	eb19 0005 	adds.w	r0, r9, r5
 80056c2:	eb4a 0106 	adc.w	r1, sl, r6
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	461d      	mov	r5, r3
 80056cc:	f04f 0600 	mov.w	r6, #0
 80056d0:	196b      	adds	r3, r5, r5
 80056d2:	eb46 0406 	adc.w	r4, r6, r6
 80056d6:	461a      	mov	r2, r3
 80056d8:	4623      	mov	r3, r4
 80056da:	f7fb fa2f 	bl	8000b3c <__aeabi_uldivmod>
 80056de:	4603      	mov	r3, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <UART_SetConfig+0x384>)
 80056e6:	fba3 1302 	umull	r1, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	2164      	movs	r1, #100	; 0x64
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	3332      	adds	r3, #50	; 0x32
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <UART_SetConfig+0x384>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005706:	4498      	add	r8, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	461d      	mov	r5, r3
 800570c:	f04f 0600 	mov.w	r6, #0
 8005710:	46a9      	mov	r9, r5
 8005712:	46b2      	mov	sl, r6
 8005714:	eb19 0309 	adds.w	r3, r9, r9
 8005718:	eb4a 040a 	adc.w	r4, sl, sl
 800571c:	4699      	mov	r9, r3
 800571e:	46a2      	mov	sl, r4
 8005720:	eb19 0905 	adds.w	r9, r9, r5
 8005724:	eb4a 0a06 	adc.w	sl, sl, r6
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800573c:	4689      	mov	r9, r1
 800573e:	4692      	mov	sl, r2
 8005740:	eb19 0005 	adds.w	r0, r9, r5
 8005744:	eb4a 0106 	adc.w	r1, sl, r6
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	461d      	mov	r5, r3
 800574e:	f04f 0600 	mov.w	r6, #0
 8005752:	196b      	adds	r3, r5, r5
 8005754:	eb46 0406 	adc.w	r4, r6, r6
 8005758:	461a      	mov	r2, r3
 800575a:	4623      	mov	r3, r4
 800575c:	f7fb f9ee 	bl	8000b3c <__aeabi_uldivmod>
 8005760:	4603      	mov	r3, r0
 8005762:	460c      	mov	r4, r1
 8005764:	461a      	mov	r2, r3
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <UART_SetConfig+0x384>)
 8005768:	fba3 1302 	umull	r1, r3, r3, r2
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	2164      	movs	r1, #100	; 0x64
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	3332      	adds	r3, #50	; 0x32
 800577a:	4a07      	ldr	r2, [pc, #28]	; (8005798 <UART_SetConfig+0x384>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	f003 0207 	and.w	r2, r3, #7
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4442      	add	r2, r8
 800578c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800578e:	e1b2      	b.n	8005af6 <UART_SetConfig+0x6e2>
 8005790:	40011000 	.word	0x40011000
 8005794:	40011400 	.word	0x40011400
 8005798:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4ad7      	ldr	r2, [pc, #860]	; (8005b00 <UART_SetConfig+0x6ec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d005      	beq.n	80057b2 <UART_SetConfig+0x39e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4ad6      	ldr	r2, [pc, #856]	; (8005b04 <UART_SetConfig+0x6f0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	f040 80d1 	bne.w	8005954 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b2:	f7fe fde3 	bl	800437c <HAL_RCC_GetPCLK2Freq>
 80057b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	469a      	mov	sl, r3
 80057bc:	f04f 0b00 	mov.w	fp, #0
 80057c0:	46d0      	mov	r8, sl
 80057c2:	46d9      	mov	r9, fp
 80057c4:	eb18 0308 	adds.w	r3, r8, r8
 80057c8:	eb49 0409 	adc.w	r4, r9, r9
 80057cc:	4698      	mov	r8, r3
 80057ce:	46a1      	mov	r9, r4
 80057d0:	eb18 080a 	adds.w	r8, r8, sl
 80057d4:	eb49 090b 	adc.w	r9, r9, fp
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057ec:	4688      	mov	r8, r1
 80057ee:	4691      	mov	r9, r2
 80057f0:	eb1a 0508 	adds.w	r5, sl, r8
 80057f4:	eb4b 0609 	adc.w	r6, fp, r9
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4619      	mov	r1, r3
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	f04f 0400 	mov.w	r4, #0
 800580a:	0094      	lsls	r4, r2, #2
 800580c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005810:	008b      	lsls	r3, r1, #2
 8005812:	461a      	mov	r2, r3
 8005814:	4623      	mov	r3, r4
 8005816:	4628      	mov	r0, r5
 8005818:	4631      	mov	r1, r6
 800581a:	f7fb f98f 	bl	8000b3c <__aeabi_uldivmod>
 800581e:	4603      	mov	r3, r0
 8005820:	460c      	mov	r4, r1
 8005822:	461a      	mov	r2, r3
 8005824:	4bb8      	ldr	r3, [pc, #736]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005826:	fba3 2302 	umull	r2, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	469b      	mov	fp, r3
 8005834:	f04f 0c00 	mov.w	ip, #0
 8005838:	46d9      	mov	r9, fp
 800583a:	46e2      	mov	sl, ip
 800583c:	eb19 0309 	adds.w	r3, r9, r9
 8005840:	eb4a 040a 	adc.w	r4, sl, sl
 8005844:	4699      	mov	r9, r3
 8005846:	46a2      	mov	sl, r4
 8005848:	eb19 090b 	adds.w	r9, r9, fp
 800584c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800585c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005860:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005864:	4689      	mov	r9, r1
 8005866:	4692      	mov	sl, r2
 8005868:	eb1b 0509 	adds.w	r5, fp, r9
 800586c:	eb4c 060a 	adc.w	r6, ip, sl
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4619      	mov	r1, r3
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	f04f 0400 	mov.w	r4, #0
 8005882:	0094      	lsls	r4, r2, #2
 8005884:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005888:	008b      	lsls	r3, r1, #2
 800588a:	461a      	mov	r2, r3
 800588c:	4623      	mov	r3, r4
 800588e:	4628      	mov	r0, r5
 8005890:	4631      	mov	r1, r6
 8005892:	f7fb f953 	bl	8000b3c <__aeabi_uldivmod>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	461a      	mov	r2, r3
 800589c:	4b9a      	ldr	r3, [pc, #616]	; (8005b08 <UART_SetConfig+0x6f4>)
 800589e:	fba3 1302 	umull	r1, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2164      	movs	r1, #100	; 0x64
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	3332      	adds	r3, #50	; 0x32
 80058b0:	4a95      	ldr	r2, [pc, #596]	; (8005b08 <UART_SetConfig+0x6f4>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058bc:	4498      	add	r8, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	469b      	mov	fp, r3
 80058c2:	f04f 0c00 	mov.w	ip, #0
 80058c6:	46d9      	mov	r9, fp
 80058c8:	46e2      	mov	sl, ip
 80058ca:	eb19 0309 	adds.w	r3, r9, r9
 80058ce:	eb4a 040a 	adc.w	r4, sl, sl
 80058d2:	4699      	mov	r9, r3
 80058d4:	46a2      	mov	sl, r4
 80058d6:	eb19 090b 	adds.w	r9, r9, fp
 80058da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058de:	f04f 0100 	mov.w	r1, #0
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f2:	4689      	mov	r9, r1
 80058f4:	4692      	mov	sl, r2
 80058f6:	eb1b 0509 	adds.w	r5, fp, r9
 80058fa:	eb4c 060a 	adc.w	r6, ip, sl
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4619      	mov	r1, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f04f 0400 	mov.w	r4, #0
 8005910:	0094      	lsls	r4, r2, #2
 8005912:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005916:	008b      	lsls	r3, r1, #2
 8005918:	461a      	mov	r2, r3
 800591a:	4623      	mov	r3, r4
 800591c:	4628      	mov	r0, r5
 800591e:	4631      	mov	r1, r6
 8005920:	f7fb f90c 	bl	8000b3c <__aeabi_uldivmod>
 8005924:	4603      	mov	r3, r0
 8005926:	460c      	mov	r4, r1
 8005928:	461a      	mov	r2, r3
 800592a:	4b77      	ldr	r3, [pc, #476]	; (8005b08 <UART_SetConfig+0x6f4>)
 800592c:	fba3 1302 	umull	r1, r3, r3, r2
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	2164      	movs	r1, #100	; 0x64
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	3332      	adds	r3, #50	; 0x32
 800593e:	4a72      	ldr	r2, [pc, #456]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f003 020f 	and.w	r2, r3, #15
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4442      	add	r2, r8
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	e0d0      	b.n	8005af6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005954:	f7fe fcfe 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8005958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	469a      	mov	sl, r3
 800595e:	f04f 0b00 	mov.w	fp, #0
 8005962:	46d0      	mov	r8, sl
 8005964:	46d9      	mov	r9, fp
 8005966:	eb18 0308 	adds.w	r3, r8, r8
 800596a:	eb49 0409 	adc.w	r4, r9, r9
 800596e:	4698      	mov	r8, r3
 8005970:	46a1      	mov	r9, r4
 8005972:	eb18 080a 	adds.w	r8, r8, sl
 8005976:	eb49 090b 	adc.w	r9, r9, fp
 800597a:	f04f 0100 	mov.w	r1, #0
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800598a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800598e:	4688      	mov	r8, r1
 8005990:	4691      	mov	r9, r2
 8005992:	eb1a 0508 	adds.w	r5, sl, r8
 8005996:	eb4b 0609 	adc.w	r6, fp, r9
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4619      	mov	r1, r3
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	0094      	lsls	r4, r2, #2
 80059ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059b2:	008b      	lsls	r3, r1, #2
 80059b4:	461a      	mov	r2, r3
 80059b6:	4623      	mov	r3, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	4631      	mov	r1, r6
 80059bc:	f7fb f8be 	bl	8000b3c <__aeabi_uldivmod>
 80059c0:	4603      	mov	r3, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	461a      	mov	r2, r3
 80059c6:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <UART_SetConfig+0x6f4>)
 80059c8:	fba3 2302 	umull	r2, r3, r3, r2
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	469b      	mov	fp, r3
 80059d6:	f04f 0c00 	mov.w	ip, #0
 80059da:	46d9      	mov	r9, fp
 80059dc:	46e2      	mov	sl, ip
 80059de:	eb19 0309 	adds.w	r3, r9, r9
 80059e2:	eb4a 040a 	adc.w	r4, sl, sl
 80059e6:	4699      	mov	r9, r3
 80059e8:	46a2      	mov	sl, r4
 80059ea:	eb19 090b 	adds.w	r9, r9, fp
 80059ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a06:	4689      	mov	r9, r1
 8005a08:	4692      	mov	sl, r2
 8005a0a:	eb1b 0509 	adds.w	r5, fp, r9
 8005a0e:	eb4c 060a 	adc.w	r6, ip, sl
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4619      	mov	r1, r3
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	f04f 0400 	mov.w	r4, #0
 8005a24:	0094      	lsls	r4, r2, #2
 8005a26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a2a:	008b      	lsls	r3, r1, #2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4623      	mov	r3, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	4631      	mov	r1, r6
 8005a34:	f7fb f882 	bl	8000b3c <__aeabi_uldivmod>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4b32      	ldr	r3, [pc, #200]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005a40:	fba3 1302 	umull	r1, r3, r3, r2
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2164      	movs	r1, #100	; 0x64
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	3332      	adds	r3, #50	; 0x32
 8005a52:	4a2d      	ldr	r2, [pc, #180]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5e:	4498      	add	r8, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	469b      	mov	fp, r3
 8005a64:	f04f 0c00 	mov.w	ip, #0
 8005a68:	46d9      	mov	r9, fp
 8005a6a:	46e2      	mov	sl, ip
 8005a6c:	eb19 0309 	adds.w	r3, r9, r9
 8005a70:	eb4a 040a 	adc.w	r4, sl, sl
 8005a74:	4699      	mov	r9, r3
 8005a76:	46a2      	mov	sl, r4
 8005a78:	eb19 090b 	adds.w	r9, r9, fp
 8005a7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a94:	4689      	mov	r9, r1
 8005a96:	4692      	mov	sl, r2
 8005a98:	eb1b 0509 	adds.w	r5, fp, r9
 8005a9c:	eb4c 060a 	adc.w	r6, ip, sl
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	f04f 0400 	mov.w	r4, #0
 8005ab2:	0094      	lsls	r4, r2, #2
 8005ab4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ab8:	008b      	lsls	r3, r1, #2
 8005aba:	461a      	mov	r2, r3
 8005abc:	4623      	mov	r3, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	f7fb f83b 	bl	8000b3c <__aeabi_uldivmod>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	461a      	mov	r2, r3
 8005acc:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005ace:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	2164      	movs	r1, #100	; 0x64
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	3332      	adds	r3, #50	; 0x32
 8005ae0:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4442      	add	r2, r8
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	e7ff      	b.n	8005af6 <UART_SetConfig+0x6e2>
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b00:	40011000 	.word	0x40011000
 8005b04:	40011400 	.word	0x40011400
 8005b08:	51eb851f 	.word	0x51eb851f

08005b0c <atoi>:
 8005b0c:	220a      	movs	r2, #10
 8005b0e:	2100      	movs	r1, #0
 8005b10:	f000 b8a8 	b.w	8005c64 <strtol>

08005b14 <__libc_init_array>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	4e0d      	ldr	r6, [pc, #52]	; (8005b4c <__libc_init_array+0x38>)
 8005b18:	4c0d      	ldr	r4, [pc, #52]	; (8005b50 <__libc_init_array+0x3c>)
 8005b1a:	1ba4      	subs	r4, r4, r6
 8005b1c:	10a4      	asrs	r4, r4, #2
 8005b1e:	2500      	movs	r5, #0
 8005b20:	42a5      	cmp	r5, r4
 8005b22:	d109      	bne.n	8005b38 <__libc_init_array+0x24>
 8005b24:	4e0b      	ldr	r6, [pc, #44]	; (8005b54 <__libc_init_array+0x40>)
 8005b26:	4c0c      	ldr	r4, [pc, #48]	; (8005b58 <__libc_init_array+0x44>)
 8005b28:	f001 f8e8 	bl	8006cfc <_init>
 8005b2c:	1ba4      	subs	r4, r4, r6
 8005b2e:	10a4      	asrs	r4, r4, #2
 8005b30:	2500      	movs	r5, #0
 8005b32:	42a5      	cmp	r5, r4
 8005b34:	d105      	bne.n	8005b42 <__libc_init_array+0x2e>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b3c:	4798      	blx	r3
 8005b3e:	3501      	adds	r5, #1
 8005b40:	e7ee      	b.n	8005b20 <__libc_init_array+0xc>
 8005b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b46:	4798      	blx	r3
 8005b48:	3501      	adds	r5, #1
 8005b4a:	e7f2      	b.n	8005b32 <__libc_init_array+0x1e>
 8005b4c:	08007028 	.word	0x08007028
 8005b50:	08007028 	.word	0x08007028
 8005b54:	08007028 	.word	0x08007028
 8005b58:	0800702c 	.word	0x0800702c

08005b5c <memset>:
 8005b5c:	4402      	add	r2, r0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memset+0xa>
 8005b64:	4770      	bx	lr
 8005b66:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6a:	e7f9      	b.n	8005b60 <memset+0x4>

08005b6c <_strtol_l.isra.0>:
 8005b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	4680      	mov	r8, r0
 8005b72:	4689      	mov	r9, r1
 8005b74:	4692      	mov	sl, r2
 8005b76:	461e      	mov	r6, r3
 8005b78:	460f      	mov	r7, r1
 8005b7a:	463d      	mov	r5, r7
 8005b7c:	9808      	ldr	r0, [sp, #32]
 8005b7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b82:	f000 f885 	bl	8005c90 <__locale_ctype_ptr_l>
 8005b86:	4420      	add	r0, r4
 8005b88:	7843      	ldrb	r3, [r0, #1]
 8005b8a:	f013 0308 	ands.w	r3, r3, #8
 8005b8e:	d132      	bne.n	8005bf6 <_strtol_l.isra.0+0x8a>
 8005b90:	2c2d      	cmp	r4, #45	; 0x2d
 8005b92:	d132      	bne.n	8005bfa <_strtol_l.isra.0+0x8e>
 8005b94:	787c      	ldrb	r4, [r7, #1]
 8005b96:	1cbd      	adds	r5, r7, #2
 8005b98:	2201      	movs	r2, #1
 8005b9a:	2e00      	cmp	r6, #0
 8005b9c:	d05d      	beq.n	8005c5a <_strtol_l.isra.0+0xee>
 8005b9e:	2e10      	cmp	r6, #16
 8005ba0:	d109      	bne.n	8005bb6 <_strtol_l.isra.0+0x4a>
 8005ba2:	2c30      	cmp	r4, #48	; 0x30
 8005ba4:	d107      	bne.n	8005bb6 <_strtol_l.isra.0+0x4a>
 8005ba6:	782b      	ldrb	r3, [r5, #0]
 8005ba8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005bac:	2b58      	cmp	r3, #88	; 0x58
 8005bae:	d14f      	bne.n	8005c50 <_strtol_l.isra.0+0xe4>
 8005bb0:	786c      	ldrb	r4, [r5, #1]
 8005bb2:	2610      	movs	r6, #16
 8005bb4:	3502      	adds	r5, #2
 8005bb6:	2a00      	cmp	r2, #0
 8005bb8:	bf14      	ite	ne
 8005bba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005bbe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005bc2:	2700      	movs	r7, #0
 8005bc4:	fbb1 fcf6 	udiv	ip, r1, r6
 8005bc8:	4638      	mov	r0, r7
 8005bca:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005bce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d817      	bhi.n	8005c06 <_strtol_l.isra.0+0x9a>
 8005bd6:	461c      	mov	r4, r3
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	dd23      	ble.n	8005c24 <_strtol_l.isra.0+0xb8>
 8005bdc:	1c7b      	adds	r3, r7, #1
 8005bde:	d007      	beq.n	8005bf0 <_strtol_l.isra.0+0x84>
 8005be0:	4584      	cmp	ip, r0
 8005be2:	d31c      	bcc.n	8005c1e <_strtol_l.isra.0+0xb2>
 8005be4:	d101      	bne.n	8005bea <_strtol_l.isra.0+0x7e>
 8005be6:	45a6      	cmp	lr, r4
 8005be8:	db19      	blt.n	8005c1e <_strtol_l.isra.0+0xb2>
 8005bea:	fb00 4006 	mla	r0, r0, r6, r4
 8005bee:	2701      	movs	r7, #1
 8005bf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bf4:	e7eb      	b.n	8005bce <_strtol_l.isra.0+0x62>
 8005bf6:	462f      	mov	r7, r5
 8005bf8:	e7bf      	b.n	8005b7a <_strtol_l.isra.0+0xe>
 8005bfa:	2c2b      	cmp	r4, #43	; 0x2b
 8005bfc:	bf04      	itt	eq
 8005bfe:	1cbd      	addeq	r5, r7, #2
 8005c00:	787c      	ldrbeq	r4, [r7, #1]
 8005c02:	461a      	mov	r2, r3
 8005c04:	e7c9      	b.n	8005b9a <_strtol_l.isra.0+0x2e>
 8005c06:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005c0a:	2b19      	cmp	r3, #25
 8005c0c:	d801      	bhi.n	8005c12 <_strtol_l.isra.0+0xa6>
 8005c0e:	3c37      	subs	r4, #55	; 0x37
 8005c10:	e7e2      	b.n	8005bd8 <_strtol_l.isra.0+0x6c>
 8005c12:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005c16:	2b19      	cmp	r3, #25
 8005c18:	d804      	bhi.n	8005c24 <_strtol_l.isra.0+0xb8>
 8005c1a:	3c57      	subs	r4, #87	; 0x57
 8005c1c:	e7dc      	b.n	8005bd8 <_strtol_l.isra.0+0x6c>
 8005c1e:	f04f 37ff 	mov.w	r7, #4294967295
 8005c22:	e7e5      	b.n	8005bf0 <_strtol_l.isra.0+0x84>
 8005c24:	1c7b      	adds	r3, r7, #1
 8005c26:	d108      	bne.n	8005c3a <_strtol_l.isra.0+0xce>
 8005c28:	2322      	movs	r3, #34	; 0x22
 8005c2a:	f8c8 3000 	str.w	r3, [r8]
 8005c2e:	4608      	mov	r0, r1
 8005c30:	f1ba 0f00 	cmp.w	sl, #0
 8005c34:	d107      	bne.n	8005c46 <_strtol_l.isra.0+0xda>
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	b102      	cbz	r2, 8005c3e <_strtol_l.isra.0+0xd2>
 8005c3c:	4240      	negs	r0, r0
 8005c3e:	f1ba 0f00 	cmp.w	sl, #0
 8005c42:	d0f8      	beq.n	8005c36 <_strtol_l.isra.0+0xca>
 8005c44:	b10f      	cbz	r7, 8005c4a <_strtol_l.isra.0+0xde>
 8005c46:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c4a:	f8ca 9000 	str.w	r9, [sl]
 8005c4e:	e7f2      	b.n	8005c36 <_strtol_l.isra.0+0xca>
 8005c50:	2430      	movs	r4, #48	; 0x30
 8005c52:	2e00      	cmp	r6, #0
 8005c54:	d1af      	bne.n	8005bb6 <_strtol_l.isra.0+0x4a>
 8005c56:	2608      	movs	r6, #8
 8005c58:	e7ad      	b.n	8005bb6 <_strtol_l.isra.0+0x4a>
 8005c5a:	2c30      	cmp	r4, #48	; 0x30
 8005c5c:	d0a3      	beq.n	8005ba6 <_strtol_l.isra.0+0x3a>
 8005c5e:	260a      	movs	r6, #10
 8005c60:	e7a9      	b.n	8005bb6 <_strtol_l.isra.0+0x4a>
	...

08005c64 <strtol>:
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <strtol+0x24>)
 8005c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c68:	681c      	ldr	r4, [r3, #0]
 8005c6a:	4d08      	ldr	r5, [pc, #32]	; (8005c8c <strtol+0x28>)
 8005c6c:	6a23      	ldr	r3, [r4, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bf08      	it	eq
 8005c72:	462b      	moveq	r3, r5
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	460a      	mov	r2, r1
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f7ff ff75 	bl	8005b6c <_strtol_l.isra.0>
 8005c82:	b003      	add	sp, #12
 8005c84:	bd30      	pop	{r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	20000038 	.word	0x20000038
 8005c8c:	2000009c 	.word	0x2000009c

08005c90 <__locale_ctype_ptr_l>:
 8005c90:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005c94:	4770      	bx	lr

08005c96 <__ascii_mbtowc>:
 8005c96:	b082      	sub	sp, #8
 8005c98:	b901      	cbnz	r1, 8005c9c <__ascii_mbtowc+0x6>
 8005c9a:	a901      	add	r1, sp, #4
 8005c9c:	b142      	cbz	r2, 8005cb0 <__ascii_mbtowc+0x1a>
 8005c9e:	b14b      	cbz	r3, 8005cb4 <__ascii_mbtowc+0x1e>
 8005ca0:	7813      	ldrb	r3, [r2, #0]
 8005ca2:	600b      	str	r3, [r1, #0]
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	1c10      	adds	r0, r2, #0
 8005ca8:	bf18      	it	ne
 8005caa:	2001      	movne	r0, #1
 8005cac:	b002      	add	sp, #8
 8005cae:	4770      	bx	lr
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	e7fb      	b.n	8005cac <__ascii_mbtowc+0x16>
 8005cb4:	f06f 0001 	mvn.w	r0, #1
 8005cb8:	e7f8      	b.n	8005cac <__ascii_mbtowc+0x16>

08005cba <__ascii_wctomb>:
 8005cba:	b149      	cbz	r1, 8005cd0 <__ascii_wctomb+0x16>
 8005cbc:	2aff      	cmp	r2, #255	; 0xff
 8005cbe:	bf85      	ittet	hi
 8005cc0:	238a      	movhi	r3, #138	; 0x8a
 8005cc2:	6003      	strhi	r3, [r0, #0]
 8005cc4:	700a      	strbls	r2, [r1, #0]
 8005cc6:	f04f 30ff 	movhi.w	r0, #4294967295
 8005cca:	bf98      	it	ls
 8005ccc:	2001      	movls	r0, #1
 8005cce:	4770      	bx	lr
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	4770      	bx	lr
 8005cd4:	0000      	movs	r0, r0
	...

08005cd8 <sin>:
 8005cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cda:	ec51 0b10 	vmov	r0, r1, d0
 8005cde:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <sin+0x88>)
 8005ce0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	dc07      	bgt.n	8005cf8 <sin+0x20>
 8005ce8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005d58 <sin+0x80>
 8005cec:	2000      	movs	r0, #0
 8005cee:	f000 fe37 	bl	8006960 <__kernel_sin>
 8005cf2:	ec51 0b10 	vmov	r0, r1, d0
 8005cf6:	e007      	b.n	8005d08 <sin+0x30>
 8005cf8:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <sin+0x8c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	dd09      	ble.n	8005d12 <sin+0x3a>
 8005cfe:	ee10 2a10 	vmov	r2, s0
 8005d02:	460b      	mov	r3, r1
 8005d04:	f7fa fa80 	bl	8000208 <__aeabi_dsub>
 8005d08:	ec41 0b10 	vmov	d0, r0, r1
 8005d0c:	b005      	add	sp, #20
 8005d0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d12:	4668      	mov	r0, sp
 8005d14:	f000 f828 	bl	8005d68 <__ieee754_rem_pio2>
 8005d18:	f000 0003 	and.w	r0, r0, #3
 8005d1c:	2801      	cmp	r0, #1
 8005d1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d22:	ed9d 0b00 	vldr	d0, [sp]
 8005d26:	d004      	beq.n	8005d32 <sin+0x5a>
 8005d28:	2802      	cmp	r0, #2
 8005d2a:	d005      	beq.n	8005d38 <sin+0x60>
 8005d2c:	b970      	cbnz	r0, 8005d4c <sin+0x74>
 8005d2e:	2001      	movs	r0, #1
 8005d30:	e7dd      	b.n	8005cee <sin+0x16>
 8005d32:	f000 fa0d 	bl	8006150 <__kernel_cos>
 8005d36:	e7dc      	b.n	8005cf2 <sin+0x1a>
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f000 fe11 	bl	8006960 <__kernel_sin>
 8005d3e:	ec53 2b10 	vmov	r2, r3, d0
 8005d42:	ee10 0a10 	vmov	r0, s0
 8005d46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005d4a:	e7dd      	b.n	8005d08 <sin+0x30>
 8005d4c:	f000 fa00 	bl	8006150 <__kernel_cos>
 8005d50:	e7f5      	b.n	8005d3e <sin+0x66>
 8005d52:	bf00      	nop
 8005d54:	f3af 8000 	nop.w
	...
 8005d60:	3fe921fb 	.word	0x3fe921fb
 8005d64:	7fefffff 	.word	0x7fefffff

08005d68 <__ieee754_rem_pio2>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	ec57 6b10 	vmov	r6, r7, d0
 8005d70:	4bc3      	ldr	r3, [pc, #780]	; (8006080 <__ieee754_rem_pio2+0x318>)
 8005d72:	b08d      	sub	sp, #52	; 0x34
 8005d74:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005d78:	4598      	cmp	r8, r3
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	9704      	str	r7, [sp, #16]
 8005d7e:	dc07      	bgt.n	8005d90 <__ieee754_rem_pio2+0x28>
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	ed84 0b00 	vstr	d0, [r4]
 8005d88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005d8c:	2500      	movs	r5, #0
 8005d8e:	e027      	b.n	8005de0 <__ieee754_rem_pio2+0x78>
 8005d90:	4bbc      	ldr	r3, [pc, #752]	; (8006084 <__ieee754_rem_pio2+0x31c>)
 8005d92:	4598      	cmp	r8, r3
 8005d94:	dc75      	bgt.n	8005e82 <__ieee754_rem_pio2+0x11a>
 8005d96:	9b04      	ldr	r3, [sp, #16]
 8005d98:	4dbb      	ldr	r5, [pc, #748]	; (8006088 <__ieee754_rem_pio2+0x320>)
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	ee10 0a10 	vmov	r0, s0
 8005da0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006048 <__ieee754_rem_pio2+0x2e0>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	4639      	mov	r1, r7
 8005da8:	dd36      	ble.n	8005e18 <__ieee754_rem_pio2+0xb0>
 8005daa:	f7fa fa2d 	bl	8000208 <__aeabi_dsub>
 8005dae:	45a8      	cmp	r8, r5
 8005db0:	4606      	mov	r6, r0
 8005db2:	460f      	mov	r7, r1
 8005db4:	d018      	beq.n	8005de8 <__ieee754_rem_pio2+0x80>
 8005db6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2e8>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fa24 	bl	8000208 <__aeabi_dsub>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	e9c4 2300 	strd	r2, r3, [r4]
 8005dc8:	4630      	mov	r0, r6
 8005dca:	4639      	mov	r1, r7
 8005dcc:	f7fa fa1c 	bl	8000208 <__aeabi_dsub>
 8005dd0:	a39f      	add	r3, pc, #636	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2e8>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fa17 	bl	8000208 <__aeabi_dsub>
 8005dda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005dde:	2501      	movs	r5, #1
 8005de0:	4628      	mov	r0, r5
 8005de2:	b00d      	add	sp, #52	; 0x34
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de8:	a39b      	add	r3, pc, #620	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f0>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa fa0b 	bl	8000208 <__aeabi_dsub>
 8005df2:	a39b      	add	r3, pc, #620	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2f8>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	f7fa fa04 	bl	8000208 <__aeabi_dsub>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	e9c4 2300 	strd	r2, r3, [r4]
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa f9fc 	bl	8000208 <__aeabi_dsub>
 8005e10:	a393      	add	r3, pc, #588	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2f8>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	e7de      	b.n	8005dd6 <__ieee754_rem_pio2+0x6e>
 8005e18:	f7fa f9f8 	bl	800020c <__adddf3>
 8005e1c:	45a8      	cmp	r8, r5
 8005e1e:	4606      	mov	r6, r0
 8005e20:	460f      	mov	r7, r1
 8005e22:	d016      	beq.n	8005e52 <__ieee754_rem_pio2+0xea>
 8005e24:	a38a      	add	r3, pc, #552	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2e8>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa f9ef 	bl	800020c <__adddf3>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	e9c4 2300 	strd	r2, r3, [r4]
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa f9e5 	bl	8000208 <__aeabi_dsub>
 8005e3e:	a384      	add	r3, pc, #528	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2e8>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f7fa f9e2 	bl	800020c <__adddf3>
 8005e48:	f04f 35ff 	mov.w	r5, #4294967295
 8005e4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e50:	e7c6      	b.n	8005de0 <__ieee754_rem_pio2+0x78>
 8005e52:	a381      	add	r3, pc, #516	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f0>)
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa f9d8 	bl	800020c <__adddf3>
 8005e5c:	a380      	add	r3, pc, #512	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2f8>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	4606      	mov	r6, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	f7fa f9d1 	bl	800020c <__adddf3>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	e9c4 2300 	strd	r2, r3, [r4]
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	f7fa f9c7 	bl	8000208 <__aeabi_dsub>
 8005e7a:	a379      	add	r3, pc, #484	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2f8>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	e7e0      	b.n	8005e44 <__ieee754_rem_pio2+0xdc>
 8005e82:	4b82      	ldr	r3, [pc, #520]	; (800608c <__ieee754_rem_pio2+0x324>)
 8005e84:	4598      	cmp	r8, r3
 8005e86:	f300 80d0 	bgt.w	800602a <__ieee754_rem_pio2+0x2c2>
 8005e8a:	f000 fe23 	bl	8006ad4 <fabs>
 8005e8e:	ec57 6b10 	vmov	r6, r7, d0
 8005e92:	ee10 0a10 	vmov	r0, s0
 8005e96:	a374      	add	r3, pc, #464	; (adr r3, 8006068 <__ieee754_rem_pio2+0x300>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	f7fa fb6b 	bl	8000578 <__aeabi_dmul>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4b7a      	ldr	r3, [pc, #488]	; (8006090 <__ieee754_rem_pio2+0x328>)
 8005ea6:	f7fa f9b1 	bl	800020c <__adddf3>
 8005eaa:	f7fa fdff 	bl	8000aac <__aeabi_d2iz>
 8005eae:	4605      	mov	r5, r0
 8005eb0:	f7fa faf8 	bl	80004a4 <__aeabi_i2d>
 8005eb4:	a364      	add	r3, pc, #400	; (adr r3, 8006048 <__ieee754_rem_pio2+0x2e0>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ebe:	f7fa fb5b 	bl	8000578 <__aeabi_dmul>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	4639      	mov	r1, r7
 8005eca:	f7fa f99d 	bl	8000208 <__aeabi_dsub>
 8005ece:	a360      	add	r3, pc, #384	; (adr r3, 8006050 <__ieee754_rem_pio2+0x2e8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	4682      	mov	sl, r0
 8005ed6:	468b      	mov	fp, r1
 8005ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005edc:	f7fa fb4c 	bl	8000578 <__aeabi_dmul>
 8005ee0:	2d1f      	cmp	r5, #31
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460f      	mov	r7, r1
 8005ee6:	dc0c      	bgt.n	8005f02 <__ieee754_rem_pio2+0x19a>
 8005ee8:	1e6a      	subs	r2, r5, #1
 8005eea:	4b6a      	ldr	r3, [pc, #424]	; (8006094 <__ieee754_rem_pio2+0x32c>)
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	4543      	cmp	r3, r8
 8005ef2:	d006      	beq.n	8005f02 <__ieee754_rem_pio2+0x19a>
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	4650      	mov	r0, sl
 8005efa:	4659      	mov	r1, fp
 8005efc:	f7fa f984 	bl	8000208 <__aeabi_dsub>
 8005f00:	e00e      	b.n	8005f20 <__ieee754_rem_pio2+0x1b8>
 8005f02:	4632      	mov	r2, r6
 8005f04:	463b      	mov	r3, r7
 8005f06:	4650      	mov	r0, sl
 8005f08:	4659      	mov	r1, fp
 8005f0a:	f7fa f97d 	bl	8000208 <__aeabi_dsub>
 8005f0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005f12:	9305      	str	r3, [sp, #20]
 8005f14:	9a05      	ldr	r2, [sp, #20]
 8005f16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	dc02      	bgt.n	8005f26 <__ieee754_rem_pio2+0x1be>
 8005f20:	e9c4 0100 	strd	r0, r1, [r4]
 8005f24:	e039      	b.n	8005f9a <__ieee754_rem_pio2+0x232>
 8005f26:	a34c      	add	r3, pc, #304	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2f0>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f30:	f7fa fb22 	bl	8000578 <__aeabi_dmul>
 8005f34:	4606      	mov	r6, r0
 8005f36:	460f      	mov	r7, r1
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4650      	mov	r0, sl
 8005f3e:	4659      	mov	r1, fp
 8005f40:	f7fa f962 	bl	8000208 <__aeabi_dsub>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4680      	mov	r8, r0
 8005f4a:	4689      	mov	r9, r1
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f7fa f95a 	bl	8000208 <__aeabi_dsub>
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	f7fa f956 	bl	8000208 <__aeabi_dsub>
 8005f5c:	a340      	add	r3, pc, #256	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2f8>)
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	4606      	mov	r6, r0
 8005f64:	460f      	mov	r7, r1
 8005f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f6a:	f7fa fb05 	bl	8000578 <__aeabi_dmul>
 8005f6e:	4632      	mov	r2, r6
 8005f70:	463b      	mov	r3, r7
 8005f72:	f7fa f949 	bl	8000208 <__aeabi_dsub>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460f      	mov	r7, r1
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4649      	mov	r1, r9
 8005f82:	f7fa f941 	bl	8000208 <__aeabi_dsub>
 8005f86:	9a05      	ldr	r2, [sp, #20]
 8005f88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b31      	cmp	r3, #49	; 0x31
 8005f90:	dc20      	bgt.n	8005fd4 <__ieee754_rem_pio2+0x26c>
 8005f92:	e9c4 0100 	strd	r0, r1, [r4]
 8005f96:	46c2      	mov	sl, r8
 8005f98:	46cb      	mov	fp, r9
 8005f9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	4659      	mov	r1, fp
 8005fa6:	f7fa f92f 	bl	8000208 <__aeabi_dsub>
 8005faa:	463b      	mov	r3, r7
 8005fac:	4632      	mov	r2, r6
 8005fae:	f7fa f92b 	bl	8000208 <__aeabi_dsub>
 8005fb2:	9b04      	ldr	r3, [sp, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fba:	f6bf af11 	bge.w	8005de0 <__ieee754_rem_pio2+0x78>
 8005fbe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fc2:	6063      	str	r3, [r4, #4]
 8005fc4:	f8c4 8000 	str.w	r8, [r4]
 8005fc8:	60a0      	str	r0, [r4, #8]
 8005fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fce:	60e3      	str	r3, [r4, #12]
 8005fd0:	426d      	negs	r5, r5
 8005fd2:	e705      	b.n	8005de0 <__ieee754_rem_pio2+0x78>
 8005fd4:	a326      	add	r3, pc, #152	; (adr r3, 8006070 <__ieee754_rem_pio2+0x308>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fde:	f7fa facb 	bl	8000578 <__aeabi_dmul>
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4640      	mov	r0, r8
 8005fec:	4649      	mov	r1, r9
 8005fee:	f7fa f90b 	bl	8000208 <__aeabi_dsub>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	468b      	mov	fp, r1
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	f7fa f903 	bl	8000208 <__aeabi_dsub>
 8006002:	4632      	mov	r2, r6
 8006004:	463b      	mov	r3, r7
 8006006:	f7fa f8ff 	bl	8000208 <__aeabi_dsub>
 800600a:	a31b      	add	r3, pc, #108	; (adr r3, 8006078 <__ieee754_rem_pio2+0x310>)
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	4606      	mov	r6, r0
 8006012:	460f      	mov	r7, r1
 8006014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006018:	f7fa faae 	bl	8000578 <__aeabi_dmul>
 800601c:	4632      	mov	r2, r6
 800601e:	463b      	mov	r3, r7
 8006020:	f7fa f8f2 	bl	8000208 <__aeabi_dsub>
 8006024:	4606      	mov	r6, r0
 8006026:	460f      	mov	r7, r1
 8006028:	e764      	b.n	8005ef4 <__ieee754_rem_pio2+0x18c>
 800602a:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <__ieee754_rem_pio2+0x330>)
 800602c:	4598      	cmp	r8, r3
 800602e:	dd35      	ble.n	800609c <__ieee754_rem_pio2+0x334>
 8006030:	ee10 2a10 	vmov	r2, s0
 8006034:	463b      	mov	r3, r7
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7fa f8e5 	bl	8000208 <__aeabi_dsub>
 800603e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006042:	e9c4 0100 	strd	r0, r1, [r4]
 8006046:	e6a1      	b.n	8005d8c <__ieee754_rem_pio2+0x24>
 8006048:	54400000 	.word	0x54400000
 800604c:	3ff921fb 	.word	0x3ff921fb
 8006050:	1a626331 	.word	0x1a626331
 8006054:	3dd0b461 	.word	0x3dd0b461
 8006058:	1a600000 	.word	0x1a600000
 800605c:	3dd0b461 	.word	0x3dd0b461
 8006060:	2e037073 	.word	0x2e037073
 8006064:	3ba3198a 	.word	0x3ba3198a
 8006068:	6dc9c883 	.word	0x6dc9c883
 800606c:	3fe45f30 	.word	0x3fe45f30
 8006070:	2e000000 	.word	0x2e000000
 8006074:	3ba3198a 	.word	0x3ba3198a
 8006078:	252049c1 	.word	0x252049c1
 800607c:	397b839a 	.word	0x397b839a
 8006080:	3fe921fb 	.word	0x3fe921fb
 8006084:	4002d97b 	.word	0x4002d97b
 8006088:	3ff921fb 	.word	0x3ff921fb
 800608c:	413921fb 	.word	0x413921fb
 8006090:	3fe00000 	.word	0x3fe00000
 8006094:	08006e44 	.word	0x08006e44
 8006098:	7fefffff 	.word	0x7fefffff
 800609c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80060a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80060a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80060a8:	4630      	mov	r0, r6
 80060aa:	460f      	mov	r7, r1
 80060ac:	f7fa fcfe 	bl	8000aac <__aeabi_d2iz>
 80060b0:	f7fa f9f8 	bl	80004a4 <__aeabi_i2d>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80060c0:	f7fa f8a2 	bl	8000208 <__aeabi_dsub>
 80060c4:	2200      	movs	r2, #0
 80060c6:	4b1f      	ldr	r3, [pc, #124]	; (8006144 <__ieee754_rem_pio2+0x3dc>)
 80060c8:	f7fa fa56 	bl	8000578 <__aeabi_dmul>
 80060cc:	460f      	mov	r7, r1
 80060ce:	4606      	mov	r6, r0
 80060d0:	f7fa fcec 	bl	8000aac <__aeabi_d2iz>
 80060d4:	f7fa f9e6 	bl	80004a4 <__aeabi_i2d>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060e4:	f7fa f890 	bl	8000208 <__aeabi_dsub>
 80060e8:	2200      	movs	r2, #0
 80060ea:	4b16      	ldr	r3, [pc, #88]	; (8006144 <__ieee754_rem_pio2+0x3dc>)
 80060ec:	f7fa fa44 	bl	8000578 <__aeabi_dmul>
 80060f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80060f8:	f04f 0803 	mov.w	r8, #3
 80060fc:	2600      	movs	r6, #0
 80060fe:	2700      	movs	r7, #0
 8006100:	4632      	mov	r2, r6
 8006102:	463b      	mov	r3, r7
 8006104:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006108:	f108 3aff 	add.w	sl, r8, #4294967295
 800610c:	f7fa fc9c 	bl	8000a48 <__aeabi_dcmpeq>
 8006110:	b9b0      	cbnz	r0, 8006140 <__ieee754_rem_pio2+0x3d8>
 8006112:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <__ieee754_rem_pio2+0x3e0>)
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	2302      	movs	r3, #2
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4643      	mov	r3, r8
 800611e:	4621      	mov	r1, r4
 8006120:	a806      	add	r0, sp, #24
 8006122:	f000 f8dd 	bl	80062e0 <__kernel_rem_pio2>
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	4605      	mov	r5, r0
 800612c:	f6bf ae58 	bge.w	8005de0 <__ieee754_rem_pio2+0x78>
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	68e3      	ldr	r3, [r4, #12]
 800613a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800613e:	e746      	b.n	8005fce <__ieee754_rem_pio2+0x266>
 8006140:	46d0      	mov	r8, sl
 8006142:	e7dd      	b.n	8006100 <__ieee754_rem_pio2+0x398>
 8006144:	41700000 	.word	0x41700000
 8006148:	08006ec4 	.word	0x08006ec4
 800614c:	00000000 	.word	0x00000000

08006150 <__kernel_cos>:
 8006150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	ec59 8b10 	vmov	r8, r9, d0
 8006158:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800615c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006160:	ed2d 8b02 	vpush	{d8}
 8006164:	eeb0 8a41 	vmov.f32	s16, s2
 8006168:	eef0 8a61 	vmov.f32	s17, s3
 800616c:	da07      	bge.n	800617e <__kernel_cos+0x2e>
 800616e:	ee10 0a10 	vmov	r0, s0
 8006172:	4649      	mov	r1, r9
 8006174:	f7fa fc9a 	bl	8000aac <__aeabi_d2iz>
 8006178:	2800      	cmp	r0, #0
 800617a:	f000 8089 	beq.w	8006290 <__kernel_cos+0x140>
 800617e:	4642      	mov	r2, r8
 8006180:	464b      	mov	r3, r9
 8006182:	4640      	mov	r0, r8
 8006184:	4649      	mov	r1, r9
 8006186:	f7fa f9f7 	bl	8000578 <__aeabi_dmul>
 800618a:	2200      	movs	r2, #0
 800618c:	4b4e      	ldr	r3, [pc, #312]	; (80062c8 <__kernel_cos+0x178>)
 800618e:	4604      	mov	r4, r0
 8006190:	460d      	mov	r5, r1
 8006192:	f7fa f9f1 	bl	8000578 <__aeabi_dmul>
 8006196:	a340      	add	r3, pc, #256	; (adr r3, 8006298 <__kernel_cos+0x148>)
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	4682      	mov	sl, r0
 800619e:	468b      	mov	fp, r1
 80061a0:	4620      	mov	r0, r4
 80061a2:	4629      	mov	r1, r5
 80061a4:	f7fa f9e8 	bl	8000578 <__aeabi_dmul>
 80061a8:	a33d      	add	r3, pc, #244	; (adr r3, 80062a0 <__kernel_cos+0x150>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa f82d 	bl	800020c <__adddf3>
 80061b2:	4622      	mov	r2, r4
 80061b4:	462b      	mov	r3, r5
 80061b6:	f7fa f9df 	bl	8000578 <__aeabi_dmul>
 80061ba:	a33b      	add	r3, pc, #236	; (adr r3, 80062a8 <__kernel_cos+0x158>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa f822 	bl	8000208 <__aeabi_dsub>
 80061c4:	4622      	mov	r2, r4
 80061c6:	462b      	mov	r3, r5
 80061c8:	f7fa f9d6 	bl	8000578 <__aeabi_dmul>
 80061cc:	a338      	add	r3, pc, #224	; (adr r3, 80062b0 <__kernel_cos+0x160>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f7fa f81b 	bl	800020c <__adddf3>
 80061d6:	4622      	mov	r2, r4
 80061d8:	462b      	mov	r3, r5
 80061da:	f7fa f9cd 	bl	8000578 <__aeabi_dmul>
 80061de:	a336      	add	r3, pc, #216	; (adr r3, 80062b8 <__kernel_cos+0x168>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa f810 	bl	8000208 <__aeabi_dsub>
 80061e8:	4622      	mov	r2, r4
 80061ea:	462b      	mov	r3, r5
 80061ec:	f7fa f9c4 	bl	8000578 <__aeabi_dmul>
 80061f0:	a333      	add	r3, pc, #204	; (adr r3, 80062c0 <__kernel_cos+0x170>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7fa f809 	bl	800020c <__adddf3>
 80061fa:	4622      	mov	r2, r4
 80061fc:	462b      	mov	r3, r5
 80061fe:	f7fa f9bb 	bl	8000578 <__aeabi_dmul>
 8006202:	4622      	mov	r2, r4
 8006204:	462b      	mov	r3, r5
 8006206:	f7fa f9b7 	bl	8000578 <__aeabi_dmul>
 800620a:	ec53 2b18 	vmov	r2, r3, d8
 800620e:	4604      	mov	r4, r0
 8006210:	460d      	mov	r5, r1
 8006212:	4640      	mov	r0, r8
 8006214:	4649      	mov	r1, r9
 8006216:	f7fa f9af 	bl	8000578 <__aeabi_dmul>
 800621a:	460b      	mov	r3, r1
 800621c:	4602      	mov	r2, r0
 800621e:	4629      	mov	r1, r5
 8006220:	4620      	mov	r0, r4
 8006222:	f7f9 fff1 	bl	8000208 <__aeabi_dsub>
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <__kernel_cos+0x17c>)
 8006228:	429e      	cmp	r6, r3
 800622a:	4680      	mov	r8, r0
 800622c:	4689      	mov	r9, r1
 800622e:	dc11      	bgt.n	8006254 <__kernel_cos+0x104>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4650      	mov	r0, sl
 8006236:	4659      	mov	r1, fp
 8006238:	f7f9 ffe6 	bl	8000208 <__aeabi_dsub>
 800623c:	460b      	mov	r3, r1
 800623e:	4924      	ldr	r1, [pc, #144]	; (80062d0 <__kernel_cos+0x180>)
 8006240:	4602      	mov	r2, r0
 8006242:	2000      	movs	r0, #0
 8006244:	f7f9 ffe0 	bl	8000208 <__aeabi_dsub>
 8006248:	ecbd 8b02 	vpop	{d8}
 800624c:	ec41 0b10 	vmov	d0, r0, r1
 8006250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006254:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <__kernel_cos+0x184>)
 8006256:	491e      	ldr	r1, [pc, #120]	; (80062d0 <__kernel_cos+0x180>)
 8006258:	429e      	cmp	r6, r3
 800625a:	bfcc      	ite	gt
 800625c:	4d1e      	ldrgt	r5, [pc, #120]	; (80062d8 <__kernel_cos+0x188>)
 800625e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006262:	2400      	movs	r4, #0
 8006264:	4622      	mov	r2, r4
 8006266:	462b      	mov	r3, r5
 8006268:	2000      	movs	r0, #0
 800626a:	f7f9 ffcd 	bl	8000208 <__aeabi_dsub>
 800626e:	4622      	mov	r2, r4
 8006270:	4606      	mov	r6, r0
 8006272:	460f      	mov	r7, r1
 8006274:	462b      	mov	r3, r5
 8006276:	4650      	mov	r0, sl
 8006278:	4659      	mov	r1, fp
 800627a:	f7f9 ffc5 	bl	8000208 <__aeabi_dsub>
 800627e:	4642      	mov	r2, r8
 8006280:	464b      	mov	r3, r9
 8006282:	f7f9 ffc1 	bl	8000208 <__aeabi_dsub>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4630      	mov	r0, r6
 800628c:	4639      	mov	r1, r7
 800628e:	e7d9      	b.n	8006244 <__kernel_cos+0xf4>
 8006290:	2000      	movs	r0, #0
 8006292:	490f      	ldr	r1, [pc, #60]	; (80062d0 <__kernel_cos+0x180>)
 8006294:	e7d8      	b.n	8006248 <__kernel_cos+0xf8>
 8006296:	bf00      	nop
 8006298:	be8838d4 	.word	0xbe8838d4
 800629c:	bda8fae9 	.word	0xbda8fae9
 80062a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80062a4:	3e21ee9e 	.word	0x3e21ee9e
 80062a8:	809c52ad 	.word	0x809c52ad
 80062ac:	3e927e4f 	.word	0x3e927e4f
 80062b0:	19cb1590 	.word	0x19cb1590
 80062b4:	3efa01a0 	.word	0x3efa01a0
 80062b8:	16c15177 	.word	0x16c15177
 80062bc:	3f56c16c 	.word	0x3f56c16c
 80062c0:	5555554c 	.word	0x5555554c
 80062c4:	3fa55555 	.word	0x3fa55555
 80062c8:	3fe00000 	.word	0x3fe00000
 80062cc:	3fd33332 	.word	0x3fd33332
 80062d0:	3ff00000 	.word	0x3ff00000
 80062d4:	3fe90000 	.word	0x3fe90000
 80062d8:	3fd20000 	.word	0x3fd20000
 80062dc:	00000000 	.word	0x00000000

080062e0 <__kernel_rem_pio2>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	ed2d 8b02 	vpush	{d8}
 80062e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80062ec:	1ed4      	subs	r4, r2, #3
 80062ee:	9308      	str	r3, [sp, #32]
 80062f0:	9101      	str	r1, [sp, #4]
 80062f2:	4bc5      	ldr	r3, [pc, #788]	; (8006608 <__kernel_rem_pio2+0x328>)
 80062f4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80062f6:	9009      	str	r0, [sp, #36]	; 0x24
 80062f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	9b08      	ldr	r3, [sp, #32]
 8006300:	3b01      	subs	r3, #1
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	2318      	movs	r3, #24
 8006306:	fb94 f4f3 	sdiv	r4, r4, r3
 800630a:	f06f 0317 	mvn.w	r3, #23
 800630e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006312:	fb04 3303 	mla	r3, r4, r3, r3
 8006316:	eb03 0a02 	add.w	sl, r3, r2
 800631a:	9b04      	ldr	r3, [sp, #16]
 800631c:	9a07      	ldr	r2, [sp, #28]
 800631e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80065f8 <__kernel_rem_pio2+0x318>
 8006322:	eb03 0802 	add.w	r8, r3, r2
 8006326:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006328:	1aa7      	subs	r7, r4, r2
 800632a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800632e:	ae22      	add	r6, sp, #136	; 0x88
 8006330:	2500      	movs	r5, #0
 8006332:	4545      	cmp	r5, r8
 8006334:	dd13      	ble.n	800635e <__kernel_rem_pio2+0x7e>
 8006336:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80065f8 <__kernel_rem_pio2+0x318>
 800633a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800633e:	2600      	movs	r6, #0
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	429e      	cmp	r6, r3
 8006344:	dc32      	bgt.n	80063ac <__kernel_rem_pio2+0xcc>
 8006346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006348:	9302      	str	r3, [sp, #8]
 800634a:	9b08      	ldr	r3, [sp, #32]
 800634c:	199d      	adds	r5, r3, r6
 800634e:	ab22      	add	r3, sp, #136	; 0x88
 8006350:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	ec59 8b18 	vmov	r8, r9, d8
 800635a:	2700      	movs	r7, #0
 800635c:	e01f      	b.n	800639e <__kernel_rem_pio2+0xbe>
 800635e:	42ef      	cmn	r7, r5
 8006360:	d407      	bmi.n	8006372 <__kernel_rem_pio2+0x92>
 8006362:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006366:	f7fa f89d 	bl	80004a4 <__aeabi_i2d>
 800636a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800636e:	3501      	adds	r5, #1
 8006370:	e7df      	b.n	8006332 <__kernel_rem_pio2+0x52>
 8006372:	ec51 0b18 	vmov	r0, r1, d8
 8006376:	e7f8      	b.n	800636a <__kernel_rem_pio2+0x8a>
 8006378:	9906      	ldr	r1, [sp, #24]
 800637a:	9d02      	ldr	r5, [sp, #8]
 800637c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006380:	9106      	str	r1, [sp, #24]
 8006382:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006386:	9502      	str	r5, [sp, #8]
 8006388:	f7fa f8f6 	bl	8000578 <__aeabi_dmul>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7f9 ff3a 	bl	800020c <__adddf3>
 8006398:	3701      	adds	r7, #1
 800639a:	4680      	mov	r8, r0
 800639c:	4689      	mov	r9, r1
 800639e:	9b07      	ldr	r3, [sp, #28]
 80063a0:	429f      	cmp	r7, r3
 80063a2:	dde9      	ble.n	8006378 <__kernel_rem_pio2+0x98>
 80063a4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80063a8:	3601      	adds	r6, #1
 80063aa:	e7c9      	b.n	8006340 <__kernel_rem_pio2+0x60>
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	aa0e      	add	r2, sp, #56	; 0x38
 80063b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063b4:	930c      	str	r3, [sp, #48]	; 0x30
 80063b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80063b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80063bc:	9c04      	ldr	r4, [sp, #16]
 80063be:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c0:	ab9a      	add	r3, sp, #616	; 0x268
 80063c2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80063c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063ce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80063d2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80063d6:	ab9a      	add	r3, sp, #616	; 0x268
 80063d8:	445b      	add	r3, fp
 80063da:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80063de:	2500      	movs	r5, #0
 80063e0:	1b63      	subs	r3, r4, r5
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	dc78      	bgt.n	80064d8 <__kernel_rem_pio2+0x1f8>
 80063e6:	4650      	mov	r0, sl
 80063e8:	ec49 8b10 	vmov	d0, r8, r9
 80063ec:	f000 fc00 	bl	8006bf0 <scalbn>
 80063f0:	ec57 6b10 	vmov	r6, r7, d0
 80063f4:	2200      	movs	r2, #0
 80063f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80063fa:	ee10 0a10 	vmov	r0, s0
 80063fe:	4639      	mov	r1, r7
 8006400:	f7fa f8ba 	bl	8000578 <__aeabi_dmul>
 8006404:	ec41 0b10 	vmov	d0, r0, r1
 8006408:	f000 fb6e 	bl	8006ae8 <floor>
 800640c:	2200      	movs	r2, #0
 800640e:	ec51 0b10 	vmov	r0, r1, d0
 8006412:	4b7e      	ldr	r3, [pc, #504]	; (800660c <__kernel_rem_pio2+0x32c>)
 8006414:	f7fa f8b0 	bl	8000578 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7f9 fef2 	bl	8000208 <__aeabi_dsub>
 8006424:	460f      	mov	r7, r1
 8006426:	4606      	mov	r6, r0
 8006428:	f7fa fb40 	bl	8000aac <__aeabi_d2iz>
 800642c:	9006      	str	r0, [sp, #24]
 800642e:	f7fa f839 	bl	80004a4 <__aeabi_i2d>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4630      	mov	r0, r6
 8006438:	4639      	mov	r1, r7
 800643a:	f7f9 fee5 	bl	8000208 <__aeabi_dsub>
 800643e:	f1ba 0f00 	cmp.w	sl, #0
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	dd6c      	ble.n	8006522 <__kernel_rem_pio2+0x242>
 8006448:	1e62      	subs	r2, r4, #1
 800644a:	ab0e      	add	r3, sp, #56	; 0x38
 800644c:	f1ca 0118 	rsb	r1, sl, #24
 8006450:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006454:	9d06      	ldr	r5, [sp, #24]
 8006456:	fa40 f301 	asr.w	r3, r0, r1
 800645a:	441d      	add	r5, r3
 800645c:	408b      	lsls	r3, r1
 800645e:	1ac0      	subs	r0, r0, r3
 8006460:	ab0e      	add	r3, sp, #56	; 0x38
 8006462:	9506      	str	r5, [sp, #24]
 8006464:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006468:	f1ca 0317 	rsb	r3, sl, #23
 800646c:	fa40 f303 	asr.w	r3, r0, r3
 8006470:	9302      	str	r3, [sp, #8]
 8006472:	9b02      	ldr	r3, [sp, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd62      	ble.n	800653e <__kernel_rem_pio2+0x25e>
 8006478:	9b06      	ldr	r3, [sp, #24]
 800647a:	2200      	movs	r2, #0
 800647c:	3301      	adds	r3, #1
 800647e:	9306      	str	r3, [sp, #24]
 8006480:	4615      	mov	r5, r2
 8006482:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006486:	4294      	cmp	r4, r2
 8006488:	f300 8095 	bgt.w	80065b6 <__kernel_rem_pio2+0x2d6>
 800648c:	f1ba 0f00 	cmp.w	sl, #0
 8006490:	dd07      	ble.n	80064a2 <__kernel_rem_pio2+0x1c2>
 8006492:	f1ba 0f01 	cmp.w	sl, #1
 8006496:	f000 80a2 	beq.w	80065de <__kernel_rem_pio2+0x2fe>
 800649a:	f1ba 0f02 	cmp.w	sl, #2
 800649e:	f000 80c1 	beq.w	8006624 <__kernel_rem_pio2+0x344>
 80064a2:	9b02      	ldr	r3, [sp, #8]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d14a      	bne.n	800653e <__kernel_rem_pio2+0x25e>
 80064a8:	4632      	mov	r2, r6
 80064aa:	463b      	mov	r3, r7
 80064ac:	2000      	movs	r0, #0
 80064ae:	4958      	ldr	r1, [pc, #352]	; (8006610 <__kernel_rem_pio2+0x330>)
 80064b0:	f7f9 feaa 	bl	8000208 <__aeabi_dsub>
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	d040      	beq.n	800653e <__kernel_rem_pio2+0x25e>
 80064bc:	4650      	mov	r0, sl
 80064be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006600 <__kernel_rem_pio2+0x320>
 80064c2:	f000 fb95 	bl	8006bf0 <scalbn>
 80064c6:	4630      	mov	r0, r6
 80064c8:	4639      	mov	r1, r7
 80064ca:	ec53 2b10 	vmov	r2, r3, d0
 80064ce:	f7f9 fe9b 	bl	8000208 <__aeabi_dsub>
 80064d2:	4606      	mov	r6, r0
 80064d4:	460f      	mov	r7, r1
 80064d6:	e032      	b.n	800653e <__kernel_rem_pio2+0x25e>
 80064d8:	2200      	movs	r2, #0
 80064da:	4b4e      	ldr	r3, [pc, #312]	; (8006614 <__kernel_rem_pio2+0x334>)
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	f7fa f84a 	bl	8000578 <__aeabi_dmul>
 80064e4:	f7fa fae2 	bl	8000aac <__aeabi_d2iz>
 80064e8:	f7f9 ffdc 	bl	80004a4 <__aeabi_i2d>
 80064ec:	2200      	movs	r2, #0
 80064ee:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <__kernel_rem_pio2+0x338>)
 80064f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f4:	f7fa f840 	bl	8000578 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7f9 fe82 	bl	8000208 <__aeabi_dsub>
 8006504:	f7fa fad2 	bl	8000aac <__aeabi_d2iz>
 8006508:	ab0e      	add	r3, sp, #56	; 0x38
 800650a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800650e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006516:	f7f9 fe79 	bl	800020c <__adddf3>
 800651a:	3501      	adds	r5, #1
 800651c:	4680      	mov	r8, r0
 800651e:	4689      	mov	r9, r1
 8006520:	e75e      	b.n	80063e0 <__kernel_rem_pio2+0x100>
 8006522:	d105      	bne.n	8006530 <__kernel_rem_pio2+0x250>
 8006524:	1e63      	subs	r3, r4, #1
 8006526:	aa0e      	add	r2, sp, #56	; 0x38
 8006528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800652c:	15c3      	asrs	r3, r0, #23
 800652e:	e79f      	b.n	8006470 <__kernel_rem_pio2+0x190>
 8006530:	2200      	movs	r2, #0
 8006532:	4b3a      	ldr	r3, [pc, #232]	; (800661c <__kernel_rem_pio2+0x33c>)
 8006534:	f7fa faa6 	bl	8000a84 <__aeabi_dcmpge>
 8006538:	2800      	cmp	r0, #0
 800653a:	d139      	bne.n	80065b0 <__kernel_rem_pio2+0x2d0>
 800653c:	9002      	str	r0, [sp, #8]
 800653e:	2200      	movs	r2, #0
 8006540:	2300      	movs	r3, #0
 8006542:	4630      	mov	r0, r6
 8006544:	4639      	mov	r1, r7
 8006546:	f7fa fa7f 	bl	8000a48 <__aeabi_dcmpeq>
 800654a:	2800      	cmp	r0, #0
 800654c:	f000 80c7 	beq.w	80066de <__kernel_rem_pio2+0x3fe>
 8006550:	1e65      	subs	r5, r4, #1
 8006552:	462b      	mov	r3, r5
 8006554:	2200      	movs	r2, #0
 8006556:	9904      	ldr	r1, [sp, #16]
 8006558:	428b      	cmp	r3, r1
 800655a:	da6a      	bge.n	8006632 <__kernel_rem_pio2+0x352>
 800655c:	2a00      	cmp	r2, #0
 800655e:	f000 8088 	beq.w	8006672 <__kernel_rem_pio2+0x392>
 8006562:	ab0e      	add	r3, sp, #56	; 0x38
 8006564:	f1aa 0a18 	sub.w	sl, sl, #24
 8006568:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80b4 	beq.w	80066da <__kernel_rem_pio2+0x3fa>
 8006572:	4650      	mov	r0, sl
 8006574:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006600 <__kernel_rem_pio2+0x320>
 8006578:	f000 fb3a 	bl	8006bf0 <scalbn>
 800657c:	00ec      	lsls	r4, r5, #3
 800657e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006580:	191e      	adds	r6, r3, r4
 8006582:	ec59 8b10 	vmov	r8, r9, d0
 8006586:	f106 0a08 	add.w	sl, r6, #8
 800658a:	462f      	mov	r7, r5
 800658c:	2f00      	cmp	r7, #0
 800658e:	f280 80df 	bge.w	8006750 <__kernel_rem_pio2+0x470>
 8006592:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80065f8 <__kernel_rem_pio2+0x318>
 8006596:	f04f 0a00 	mov.w	sl, #0
 800659a:	eba5 030a 	sub.w	r3, r5, sl
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f2c0 810a 	blt.w	80067b8 <__kernel_rem_pio2+0x4d8>
 80065a4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006620 <__kernel_rem_pio2+0x340>
 80065a8:	ec59 8b18 	vmov	r8, r9, d8
 80065ac:	2700      	movs	r7, #0
 80065ae:	e0f5      	b.n	800679c <__kernel_rem_pio2+0x4bc>
 80065b0:	2302      	movs	r3, #2
 80065b2:	9302      	str	r3, [sp, #8]
 80065b4:	e760      	b.n	8006478 <__kernel_rem_pio2+0x198>
 80065b6:	ab0e      	add	r3, sp, #56	; 0x38
 80065b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065bc:	b94d      	cbnz	r5, 80065d2 <__kernel_rem_pio2+0x2f2>
 80065be:	b12b      	cbz	r3, 80065cc <__kernel_rem_pio2+0x2ec>
 80065c0:	a80e      	add	r0, sp, #56	; 0x38
 80065c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80065c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80065ca:	2301      	movs	r3, #1
 80065cc:	3201      	adds	r2, #1
 80065ce:	461d      	mov	r5, r3
 80065d0:	e759      	b.n	8006486 <__kernel_rem_pio2+0x1a6>
 80065d2:	a80e      	add	r0, sp, #56	; 0x38
 80065d4:	1acb      	subs	r3, r1, r3
 80065d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80065da:	462b      	mov	r3, r5
 80065dc:	e7f6      	b.n	80065cc <__kernel_rem_pio2+0x2ec>
 80065de:	1e62      	subs	r2, r4, #1
 80065e0:	ab0e      	add	r3, sp, #56	; 0x38
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80065ea:	a90e      	add	r1, sp, #56	; 0x38
 80065ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80065f0:	e757      	b.n	80064a2 <__kernel_rem_pio2+0x1c2>
 80065f2:	bf00      	nop
 80065f4:	f3af 8000 	nop.w
	...
 8006604:	3ff00000 	.word	0x3ff00000
 8006608:	08007010 	.word	0x08007010
 800660c:	40200000 	.word	0x40200000
 8006610:	3ff00000 	.word	0x3ff00000
 8006614:	3e700000 	.word	0x3e700000
 8006618:	41700000 	.word	0x41700000
 800661c:	3fe00000 	.word	0x3fe00000
 8006620:	08006fd0 	.word	0x08006fd0
 8006624:	1e62      	subs	r2, r4, #1
 8006626:	ab0e      	add	r3, sp, #56	; 0x38
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006630:	e7db      	b.n	80065ea <__kernel_rem_pio2+0x30a>
 8006632:	a90e      	add	r1, sp, #56	; 0x38
 8006634:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006638:	3b01      	subs	r3, #1
 800663a:	430a      	orrs	r2, r1
 800663c:	e78b      	b.n	8006556 <__kernel_rem_pio2+0x276>
 800663e:	3301      	adds	r3, #1
 8006640:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006644:	2900      	cmp	r1, #0
 8006646:	d0fa      	beq.n	800663e <__kernel_rem_pio2+0x35e>
 8006648:	9a08      	ldr	r2, [sp, #32]
 800664a:	4422      	add	r2, r4
 800664c:	00d2      	lsls	r2, r2, #3
 800664e:	a922      	add	r1, sp, #136	; 0x88
 8006650:	18e3      	adds	r3, r4, r3
 8006652:	9206      	str	r2, [sp, #24]
 8006654:	440a      	add	r2, r1
 8006656:	9302      	str	r3, [sp, #8]
 8006658:	f10b 0108 	add.w	r1, fp, #8
 800665c:	f102 0308 	add.w	r3, r2, #8
 8006660:	1c66      	adds	r6, r4, #1
 8006662:	910a      	str	r1, [sp, #40]	; 0x28
 8006664:	2500      	movs	r5, #0
 8006666:	930d      	str	r3, [sp, #52]	; 0x34
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	42b3      	cmp	r3, r6
 800666c:	da04      	bge.n	8006678 <__kernel_rem_pio2+0x398>
 800666e:	461c      	mov	r4, r3
 8006670:	e6a6      	b.n	80063c0 <__kernel_rem_pio2+0xe0>
 8006672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006674:	2301      	movs	r3, #1
 8006676:	e7e3      	b.n	8006640 <__kernel_rem_pio2+0x360>
 8006678:	9b06      	ldr	r3, [sp, #24]
 800667a:	18ef      	adds	r7, r5, r3
 800667c:	ab22      	add	r3, sp, #136	; 0x88
 800667e:	441f      	add	r7, r3
 8006680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006682:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006686:	f7f9 ff0d 	bl	80004a4 <__aeabi_i2d>
 800668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668c:	461c      	mov	r4, r3
 800668e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006690:	e9c7 0100 	strd	r0, r1, [r7]
 8006694:	eb03 0b05 	add.w	fp, r3, r5
 8006698:	2700      	movs	r7, #0
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	9b07      	ldr	r3, [sp, #28]
 80066a4:	429f      	cmp	r7, r3
 80066a6:	dd08      	ble.n	80066ba <__kernel_rem_pio2+0x3da>
 80066a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066aa:	aa72      	add	r2, sp, #456	; 0x1c8
 80066ac:	18eb      	adds	r3, r5, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80066b4:	3601      	adds	r6, #1
 80066b6:	3508      	adds	r5, #8
 80066b8:	e7d6      	b.n	8006668 <__kernel_rem_pio2+0x388>
 80066ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80066be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80066c2:	f7f9 ff59 	bl	8000578 <__aeabi_dmul>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7f9 fd9d 	bl	800020c <__adddf3>
 80066d2:	3701      	adds	r7, #1
 80066d4:	4680      	mov	r8, r0
 80066d6:	4689      	mov	r9, r1
 80066d8:	e7e3      	b.n	80066a2 <__kernel_rem_pio2+0x3c2>
 80066da:	3d01      	subs	r5, #1
 80066dc:	e741      	b.n	8006562 <__kernel_rem_pio2+0x282>
 80066de:	f1ca 0000 	rsb	r0, sl, #0
 80066e2:	ec47 6b10 	vmov	d0, r6, r7
 80066e6:	f000 fa83 	bl	8006bf0 <scalbn>
 80066ea:	ec57 6b10 	vmov	r6, r7, d0
 80066ee:	2200      	movs	r2, #0
 80066f0:	4b99      	ldr	r3, [pc, #612]	; (8006958 <__kernel_rem_pio2+0x678>)
 80066f2:	ee10 0a10 	vmov	r0, s0
 80066f6:	4639      	mov	r1, r7
 80066f8:	f7fa f9c4 	bl	8000a84 <__aeabi_dcmpge>
 80066fc:	b1f8      	cbz	r0, 800673e <__kernel_rem_pio2+0x45e>
 80066fe:	2200      	movs	r2, #0
 8006700:	4b96      	ldr	r3, [pc, #600]	; (800695c <__kernel_rem_pio2+0x67c>)
 8006702:	4630      	mov	r0, r6
 8006704:	4639      	mov	r1, r7
 8006706:	f7f9 ff37 	bl	8000578 <__aeabi_dmul>
 800670a:	f7fa f9cf 	bl	8000aac <__aeabi_d2iz>
 800670e:	4680      	mov	r8, r0
 8006710:	f7f9 fec8 	bl	80004a4 <__aeabi_i2d>
 8006714:	2200      	movs	r2, #0
 8006716:	4b90      	ldr	r3, [pc, #576]	; (8006958 <__kernel_rem_pio2+0x678>)
 8006718:	f7f9 ff2e 	bl	8000578 <__aeabi_dmul>
 800671c:	460b      	mov	r3, r1
 800671e:	4602      	mov	r2, r0
 8006720:	4639      	mov	r1, r7
 8006722:	4630      	mov	r0, r6
 8006724:	f7f9 fd70 	bl	8000208 <__aeabi_dsub>
 8006728:	f7fa f9c0 	bl	8000aac <__aeabi_d2iz>
 800672c:	1c65      	adds	r5, r4, #1
 800672e:	ab0e      	add	r3, sp, #56	; 0x38
 8006730:	f10a 0a18 	add.w	sl, sl, #24
 8006734:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006738:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800673c:	e719      	b.n	8006572 <__kernel_rem_pio2+0x292>
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	f7fa f9b3 	bl	8000aac <__aeabi_d2iz>
 8006746:	ab0e      	add	r3, sp, #56	; 0x38
 8006748:	4625      	mov	r5, r4
 800674a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800674e:	e710      	b.n	8006572 <__kernel_rem_pio2+0x292>
 8006750:	ab0e      	add	r3, sp, #56	; 0x38
 8006752:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006756:	f7f9 fea5 	bl	80004a4 <__aeabi_i2d>
 800675a:	4642      	mov	r2, r8
 800675c:	464b      	mov	r3, r9
 800675e:	f7f9 ff0b 	bl	8000578 <__aeabi_dmul>
 8006762:	2200      	movs	r2, #0
 8006764:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006768:	4b7c      	ldr	r3, [pc, #496]	; (800695c <__kernel_rem_pio2+0x67c>)
 800676a:	4640      	mov	r0, r8
 800676c:	4649      	mov	r1, r9
 800676e:	f7f9 ff03 	bl	8000578 <__aeabi_dmul>
 8006772:	3f01      	subs	r7, #1
 8006774:	4680      	mov	r8, r0
 8006776:	4689      	mov	r9, r1
 8006778:	e708      	b.n	800658c <__kernel_rem_pio2+0x2ac>
 800677a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006786:	f7f9 fef7 	bl	8000578 <__aeabi_dmul>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4640      	mov	r0, r8
 8006790:	4649      	mov	r1, r9
 8006792:	f7f9 fd3b 	bl	800020c <__adddf3>
 8006796:	3701      	adds	r7, #1
 8006798:	4680      	mov	r8, r0
 800679a:	4689      	mov	r9, r1
 800679c:	9b04      	ldr	r3, [sp, #16]
 800679e:	429f      	cmp	r7, r3
 80067a0:	dc01      	bgt.n	80067a6 <__kernel_rem_pio2+0x4c6>
 80067a2:	45ba      	cmp	sl, r7
 80067a4:	dae9      	bge.n	800677a <__kernel_rem_pio2+0x49a>
 80067a6:	ab4a      	add	r3, sp, #296	; 0x128
 80067a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067ac:	e9c3 8900 	strd	r8, r9, [r3]
 80067b0:	f10a 0a01 	add.w	sl, sl, #1
 80067b4:	3e08      	subs	r6, #8
 80067b6:	e6f0      	b.n	800659a <__kernel_rem_pio2+0x2ba>
 80067b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d85b      	bhi.n	8006876 <__kernel_rem_pio2+0x596>
 80067be:	e8df f003 	tbb	[pc, r3]
 80067c2:	264a      	.short	0x264a
 80067c4:	0226      	.short	0x0226
 80067c6:	ab9a      	add	r3, sp, #616	; 0x268
 80067c8:	441c      	add	r4, r3
 80067ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80067ce:	46a2      	mov	sl, r4
 80067d0:	46ab      	mov	fp, r5
 80067d2:	f1bb 0f00 	cmp.w	fp, #0
 80067d6:	dc6c      	bgt.n	80068b2 <__kernel_rem_pio2+0x5d2>
 80067d8:	46a2      	mov	sl, r4
 80067da:	46ab      	mov	fp, r5
 80067dc:	f1bb 0f01 	cmp.w	fp, #1
 80067e0:	f300 8086 	bgt.w	80068f0 <__kernel_rem_pio2+0x610>
 80067e4:	2000      	movs	r0, #0
 80067e6:	2100      	movs	r1, #0
 80067e8:	2d01      	cmp	r5, #1
 80067ea:	f300 80a0 	bgt.w	800692e <__kernel_rem_pio2+0x64e>
 80067ee:	9b02      	ldr	r3, [sp, #8]
 80067f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80067f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f040 809e 	bne.w	800693a <__kernel_rem_pio2+0x65a>
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	e9c3 7800 	strd	r7, r8, [r3]
 8006804:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006808:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800680c:	e033      	b.n	8006876 <__kernel_rem_pio2+0x596>
 800680e:	3408      	adds	r4, #8
 8006810:	ab4a      	add	r3, sp, #296	; 0x128
 8006812:	441c      	add	r4, r3
 8006814:	462e      	mov	r6, r5
 8006816:	2000      	movs	r0, #0
 8006818:	2100      	movs	r1, #0
 800681a:	2e00      	cmp	r6, #0
 800681c:	da3a      	bge.n	8006894 <__kernel_rem_pio2+0x5b4>
 800681e:	9b02      	ldr	r3, [sp, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d03d      	beq.n	80068a0 <__kernel_rem_pio2+0x5c0>
 8006824:	4602      	mov	r2, r0
 8006826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800682a:	9c01      	ldr	r4, [sp, #4]
 800682c:	e9c4 2300 	strd	r2, r3, [r4]
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006838:	f7f9 fce6 	bl	8000208 <__aeabi_dsub>
 800683c:	ae4c      	add	r6, sp, #304	; 0x130
 800683e:	2401      	movs	r4, #1
 8006840:	42a5      	cmp	r5, r4
 8006842:	da30      	bge.n	80068a6 <__kernel_rem_pio2+0x5c6>
 8006844:	9b02      	ldr	r3, [sp, #8]
 8006846:	b113      	cbz	r3, 800684e <__kernel_rem_pio2+0x56e>
 8006848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800684c:	4619      	mov	r1, r3
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006854:	e00f      	b.n	8006876 <__kernel_rem_pio2+0x596>
 8006856:	ab9a      	add	r3, sp, #616	; 0x268
 8006858:	441c      	add	r4, r3
 800685a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800685e:	2000      	movs	r0, #0
 8006860:	2100      	movs	r1, #0
 8006862:	2d00      	cmp	r5, #0
 8006864:	da10      	bge.n	8006888 <__kernel_rem_pio2+0x5a8>
 8006866:	9b02      	ldr	r3, [sp, #8]
 8006868:	b113      	cbz	r3, 8006870 <__kernel_rem_pio2+0x590>
 800686a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800686e:	4619      	mov	r1, r3
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	e9c3 0100 	strd	r0, r1, [r3]
 8006876:	9b06      	ldr	r3, [sp, #24]
 8006878:	f003 0007 	and.w	r0, r3, #7
 800687c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006880:	ecbd 8b02 	vpop	{d8}
 8006884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006888:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800688c:	f7f9 fcbe 	bl	800020c <__adddf3>
 8006890:	3d01      	subs	r5, #1
 8006892:	e7e6      	b.n	8006862 <__kernel_rem_pio2+0x582>
 8006894:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006898:	f7f9 fcb8 	bl	800020c <__adddf3>
 800689c:	3e01      	subs	r6, #1
 800689e:	e7bc      	b.n	800681a <__kernel_rem_pio2+0x53a>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	e7c1      	b.n	800682a <__kernel_rem_pio2+0x54a>
 80068a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80068aa:	f7f9 fcaf 	bl	800020c <__adddf3>
 80068ae:	3401      	adds	r4, #1
 80068b0:	e7c6      	b.n	8006840 <__kernel_rem_pio2+0x560>
 80068b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80068b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80068ba:	4640      	mov	r0, r8
 80068bc:	ec53 2b17 	vmov	r2, r3, d7
 80068c0:	4649      	mov	r1, r9
 80068c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80068c6:	f7f9 fca1 	bl	800020c <__adddf3>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	f7f9 fc97 	bl	8000208 <__aeabi_dsub>
 80068da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068de:	f7f9 fc95 	bl	800020c <__adddf3>
 80068e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068e6:	e9ca 0100 	strd	r0, r1, [sl]
 80068ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80068ee:	e770      	b.n	80067d2 <__kernel_rem_pio2+0x4f2>
 80068f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80068f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80068f8:	4630      	mov	r0, r6
 80068fa:	ec53 2b17 	vmov	r2, r3, d7
 80068fe:	4639      	mov	r1, r7
 8006900:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006904:	f7f9 fc82 	bl	800020c <__adddf3>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4680      	mov	r8, r0
 800690e:	4689      	mov	r9, r1
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7f9 fc78 	bl	8000208 <__aeabi_dsub>
 8006918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800691c:	f7f9 fc76 	bl	800020c <__adddf3>
 8006920:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006924:	e9ca 0100 	strd	r0, r1, [sl]
 8006928:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800692c:	e756      	b.n	80067dc <__kernel_rem_pio2+0x4fc>
 800692e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006932:	f7f9 fc6b 	bl	800020c <__adddf3>
 8006936:	3d01      	subs	r5, #1
 8006938:	e756      	b.n	80067e8 <__kernel_rem_pio2+0x508>
 800693a:	9b01      	ldr	r3, [sp, #4]
 800693c:	9a01      	ldr	r2, [sp, #4]
 800693e:	601f      	str	r7, [r3, #0]
 8006940:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006944:	605c      	str	r4, [r3, #4]
 8006946:	609d      	str	r5, [r3, #8]
 8006948:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800694c:	60d3      	str	r3, [r2, #12]
 800694e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006952:	6110      	str	r0, [r2, #16]
 8006954:	6153      	str	r3, [r2, #20]
 8006956:	e78e      	b.n	8006876 <__kernel_rem_pio2+0x596>
 8006958:	41700000 	.word	0x41700000
 800695c:	3e700000 	.word	0x3e700000

08006960 <__kernel_sin>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	ec55 4b10 	vmov	r4, r5, d0
 8006968:	b085      	sub	sp, #20
 800696a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800696e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006972:	ed8d 1b00 	vstr	d1, [sp]
 8006976:	9002      	str	r0, [sp, #8]
 8006978:	da06      	bge.n	8006988 <__kernel_sin+0x28>
 800697a:	ee10 0a10 	vmov	r0, s0
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f894 	bl	8000aac <__aeabi_d2iz>
 8006984:	2800      	cmp	r0, #0
 8006986:	d051      	beq.n	8006a2c <__kernel_sin+0xcc>
 8006988:	4622      	mov	r2, r4
 800698a:	462b      	mov	r3, r5
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fdf2 	bl	8000578 <__aeabi_dmul>
 8006994:	4682      	mov	sl, r0
 8006996:	468b      	mov	fp, r1
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fdea 	bl	8000578 <__aeabi_dmul>
 80069a4:	a341      	add	r3, pc, #260	; (adr r3, 8006aac <__kernel_sin+0x14c>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	4680      	mov	r8, r0
 80069ac:	4689      	mov	r9, r1
 80069ae:	4650      	mov	r0, sl
 80069b0:	4659      	mov	r1, fp
 80069b2:	f7f9 fde1 	bl	8000578 <__aeabi_dmul>
 80069b6:	a33f      	add	r3, pc, #252	; (adr r3, 8006ab4 <__kernel_sin+0x154>)
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f7f9 fc24 	bl	8000208 <__aeabi_dsub>
 80069c0:	4652      	mov	r2, sl
 80069c2:	465b      	mov	r3, fp
 80069c4:	f7f9 fdd8 	bl	8000578 <__aeabi_dmul>
 80069c8:	a33c      	add	r3, pc, #240	; (adr r3, 8006abc <__kernel_sin+0x15c>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7f9 fc1d 	bl	800020c <__adddf3>
 80069d2:	4652      	mov	r2, sl
 80069d4:	465b      	mov	r3, fp
 80069d6:	f7f9 fdcf 	bl	8000578 <__aeabi_dmul>
 80069da:	a33a      	add	r3, pc, #232	; (adr r3, 8006ac4 <__kernel_sin+0x164>)
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f7f9 fc12 	bl	8000208 <__aeabi_dsub>
 80069e4:	4652      	mov	r2, sl
 80069e6:	465b      	mov	r3, fp
 80069e8:	f7f9 fdc6 	bl	8000578 <__aeabi_dmul>
 80069ec:	a337      	add	r3, pc, #220	; (adr r3, 8006acc <__kernel_sin+0x16c>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fc0b 	bl	800020c <__adddf3>
 80069f6:	9b02      	ldr	r3, [sp, #8]
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	b9db      	cbnz	r3, 8006a36 <__kernel_sin+0xd6>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4650      	mov	r0, sl
 8006a04:	4659      	mov	r1, fp
 8006a06:	f7f9 fdb7 	bl	8000578 <__aeabi_dmul>
 8006a0a:	a325      	add	r3, pc, #148	; (adr r3, 8006aa0 <__kernel_sin+0x140>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fbfa 	bl	8000208 <__aeabi_dsub>
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	f7f9 fdae 	bl	8000578 <__aeabi_dmul>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4620      	mov	r0, r4
 8006a22:	4629      	mov	r1, r5
 8006a24:	f7f9 fbf2 	bl	800020c <__adddf3>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	460d      	mov	r5, r1
 8006a2c:	ec45 4b10 	vmov	d0, r4, r5
 8006a30:	b005      	add	sp, #20
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a36:	2200      	movs	r2, #0
 8006a38:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <__kernel_sin+0x148>)
 8006a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a3e:	f7f9 fd9b 	bl	8000578 <__aeabi_dmul>
 8006a42:	4632      	mov	r2, r6
 8006a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a48:	463b      	mov	r3, r7
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fd93 	bl	8000578 <__aeabi_dmul>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a5a:	f7f9 fbd5 	bl	8000208 <__aeabi_dsub>
 8006a5e:	4652      	mov	r2, sl
 8006a60:	465b      	mov	r3, fp
 8006a62:	f7f9 fd89 	bl	8000578 <__aeabi_dmul>
 8006a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a6a:	f7f9 fbcd 	bl	8000208 <__aeabi_dsub>
 8006a6e:	a30c      	add	r3, pc, #48	; (adr r3, 8006aa0 <__kernel_sin+0x140>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	4606      	mov	r6, r0
 8006a76:	460f      	mov	r7, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7f9 fd7c 	bl	8000578 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4630      	mov	r0, r6
 8006a86:	4639      	mov	r1, r7
 8006a88:	f7f9 fbc0 	bl	800020c <__adddf3>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4620      	mov	r0, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	f7f9 fbb8 	bl	8000208 <__aeabi_dsub>
 8006a98:	e7c6      	b.n	8006a28 <__kernel_sin+0xc8>
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w
 8006aa0:	55555549 	.word	0x55555549
 8006aa4:	3fc55555 	.word	0x3fc55555
 8006aa8:	3fe00000 	.word	0x3fe00000
 8006aac:	5acfd57c 	.word	0x5acfd57c
 8006ab0:	3de5d93a 	.word	0x3de5d93a
 8006ab4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006ab8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006abc:	57b1fe7d 	.word	0x57b1fe7d
 8006ac0:	3ec71de3 	.word	0x3ec71de3
 8006ac4:	19c161d5 	.word	0x19c161d5
 8006ac8:	3f2a01a0 	.word	0x3f2a01a0
 8006acc:	1110f8a6 	.word	0x1110f8a6
 8006ad0:	3f811111 	.word	0x3f811111

08006ad4 <fabs>:
 8006ad4:	ec51 0b10 	vmov	r0, r1, d0
 8006ad8:	ee10 2a10 	vmov	r2, s0
 8006adc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ae0:	ec43 2b10 	vmov	d0, r2, r3
 8006ae4:	4770      	bx	lr
	...

08006ae8 <floor>:
 8006ae8:	ec51 0b10 	vmov	r0, r1, d0
 8006aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006af4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006af8:	2e13      	cmp	r6, #19
 8006afa:	460c      	mov	r4, r1
 8006afc:	ee10 5a10 	vmov	r5, s0
 8006b00:	4680      	mov	r8, r0
 8006b02:	dc34      	bgt.n	8006b6e <floor+0x86>
 8006b04:	2e00      	cmp	r6, #0
 8006b06:	da16      	bge.n	8006b36 <floor+0x4e>
 8006b08:	a335      	add	r3, pc, #212	; (adr r3, 8006be0 <floor+0xf8>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f7f9 fb7d 	bl	800020c <__adddf3>
 8006b12:	2200      	movs	r2, #0
 8006b14:	2300      	movs	r3, #0
 8006b16:	f7f9 ffbf 	bl	8000a98 <__aeabi_dcmpgt>
 8006b1a:	b148      	cbz	r0, 8006b30 <floor+0x48>
 8006b1c:	2c00      	cmp	r4, #0
 8006b1e:	da59      	bge.n	8006bd4 <floor+0xec>
 8006b20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006b24:	4a30      	ldr	r2, [pc, #192]	; (8006be8 <floor+0x100>)
 8006b26:	432b      	orrs	r3, r5
 8006b28:	2500      	movs	r5, #0
 8006b2a:	42ab      	cmp	r3, r5
 8006b2c:	bf18      	it	ne
 8006b2e:	4614      	movne	r4, r2
 8006b30:	4621      	mov	r1, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	e025      	b.n	8006b82 <floor+0x9a>
 8006b36:	4f2d      	ldr	r7, [pc, #180]	; (8006bec <floor+0x104>)
 8006b38:	4137      	asrs	r7, r6
 8006b3a:	ea01 0307 	and.w	r3, r1, r7
 8006b3e:	4303      	orrs	r3, r0
 8006b40:	d01f      	beq.n	8006b82 <floor+0x9a>
 8006b42:	a327      	add	r3, pc, #156	; (adr r3, 8006be0 <floor+0xf8>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fb60 	bl	800020c <__adddf3>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f7f9 ffa2 	bl	8000a98 <__aeabi_dcmpgt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d0eb      	beq.n	8006b30 <floor+0x48>
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	bfbe      	ittt	lt
 8006b5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006b60:	fa43 f606 	asrlt.w	r6, r3, r6
 8006b64:	19a4      	addlt	r4, r4, r6
 8006b66:	ea24 0407 	bic.w	r4, r4, r7
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	e7e0      	b.n	8006b30 <floor+0x48>
 8006b6e:	2e33      	cmp	r6, #51	; 0x33
 8006b70:	dd0b      	ble.n	8006b8a <floor+0xa2>
 8006b72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006b76:	d104      	bne.n	8006b82 <floor+0x9a>
 8006b78:	ee10 2a10 	vmov	r2, s0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	f7f9 fb45 	bl	800020c <__adddf3>
 8006b82:	ec41 0b10 	vmov	d0, r0, r1
 8006b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	fa23 f707 	lsr.w	r7, r3, r7
 8006b96:	4207      	tst	r7, r0
 8006b98:	d0f3      	beq.n	8006b82 <floor+0x9a>
 8006b9a:	a311      	add	r3, pc, #68	; (adr r3, 8006be0 <floor+0xf8>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 fb34 	bl	800020c <__adddf3>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f7f9 ff76 	bl	8000a98 <__aeabi_dcmpgt>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d0bf      	beq.n	8006b30 <floor+0x48>
 8006bb0:	2c00      	cmp	r4, #0
 8006bb2:	da02      	bge.n	8006bba <floor+0xd2>
 8006bb4:	2e14      	cmp	r6, #20
 8006bb6:	d103      	bne.n	8006bc0 <floor+0xd8>
 8006bb8:	3401      	adds	r4, #1
 8006bba:	ea25 0507 	bic.w	r5, r5, r7
 8006bbe:	e7b7      	b.n	8006b30 <floor+0x48>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006bc6:	fa03 f606 	lsl.w	r6, r3, r6
 8006bca:	4435      	add	r5, r6
 8006bcc:	4545      	cmp	r5, r8
 8006bce:	bf38      	it	cc
 8006bd0:	18e4      	addcc	r4, r4, r3
 8006bd2:	e7f2      	b.n	8006bba <floor+0xd2>
 8006bd4:	2500      	movs	r5, #0
 8006bd6:	462c      	mov	r4, r5
 8006bd8:	e7aa      	b.n	8006b30 <floor+0x48>
 8006bda:	bf00      	nop
 8006bdc:	f3af 8000 	nop.w
 8006be0:	8800759c 	.word	0x8800759c
 8006be4:	7e37e43c 	.word	0x7e37e43c
 8006be8:	bff00000 	.word	0xbff00000
 8006bec:	000fffff 	.word	0x000fffff

08006bf0 <scalbn>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	ec55 4b10 	vmov	r4, r5, d0
 8006bf6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	462b      	mov	r3, r5
 8006bfe:	b9aa      	cbnz	r2, 8006c2c <scalbn+0x3c>
 8006c00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006c04:	4323      	orrs	r3, r4
 8006c06:	d03b      	beq.n	8006c80 <scalbn+0x90>
 8006c08:	4b31      	ldr	r3, [pc, #196]	; (8006cd0 <scalbn+0xe0>)
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	ee10 0a10 	vmov	r0, s0
 8006c12:	f7f9 fcb1 	bl	8000578 <__aeabi_dmul>
 8006c16:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <scalbn+0xe4>)
 8006c18:	429e      	cmp	r6, r3
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	da12      	bge.n	8006c46 <scalbn+0x56>
 8006c20:	a327      	add	r3, pc, #156	; (adr r3, 8006cc0 <scalbn+0xd0>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f7f9 fca7 	bl	8000578 <__aeabi_dmul>
 8006c2a:	e009      	b.n	8006c40 <scalbn+0x50>
 8006c2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006c30:	428a      	cmp	r2, r1
 8006c32:	d10c      	bne.n	8006c4e <scalbn+0x5e>
 8006c34:	ee10 2a10 	vmov	r2, s0
 8006c38:	4620      	mov	r0, r4
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	f7f9 fae6 	bl	800020c <__adddf3>
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	e01c      	b.n	8006c80 <scalbn+0x90>
 8006c46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	3a36      	subs	r2, #54	; 0x36
 8006c4e:	4432      	add	r2, r6
 8006c50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006c54:	428a      	cmp	r2, r1
 8006c56:	dd0b      	ble.n	8006c70 <scalbn+0x80>
 8006c58:	ec45 4b11 	vmov	d1, r4, r5
 8006c5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006cc8 <scalbn+0xd8>
 8006c60:	f000 f83c 	bl	8006cdc <copysign>
 8006c64:	a318      	add	r3, pc, #96	; (adr r3, 8006cc8 <scalbn+0xd8>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	ec51 0b10 	vmov	r0, r1, d0
 8006c6e:	e7da      	b.n	8006c26 <scalbn+0x36>
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	dd08      	ble.n	8006c86 <scalbn+0x96>
 8006c74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006c80:	ec45 4b10 	vmov	d0, r4, r5
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006c8a:	da0d      	bge.n	8006ca8 <scalbn+0xb8>
 8006c8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c90:	429e      	cmp	r6, r3
 8006c92:	ec45 4b11 	vmov	d1, r4, r5
 8006c96:	dce1      	bgt.n	8006c5c <scalbn+0x6c>
 8006c98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006cc0 <scalbn+0xd0>
 8006c9c:	f000 f81e 	bl	8006cdc <copysign>
 8006ca0:	a307      	add	r3, pc, #28	; (adr r3, 8006cc0 <scalbn+0xd0>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	e7e0      	b.n	8006c6a <scalbn+0x7a>
 8006ca8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cac:	3236      	adds	r2, #54	; 0x36
 8006cae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <scalbn+0xe8>)
 8006cbe:	e7b2      	b.n	8006c26 <scalbn+0x36>
 8006cc0:	c2f8f359 	.word	0xc2f8f359
 8006cc4:	01a56e1f 	.word	0x01a56e1f
 8006cc8:	8800759c 	.word	0x8800759c
 8006ccc:	7e37e43c 	.word	0x7e37e43c
 8006cd0:	43500000 	.word	0x43500000
 8006cd4:	ffff3cb0 	.word	0xffff3cb0
 8006cd8:	3c900000 	.word	0x3c900000

08006cdc <copysign>:
 8006cdc:	ec51 0b10 	vmov	r0, r1, d0
 8006ce0:	ee11 0a90 	vmov	r0, s3
 8006ce4:	ee10 2a10 	vmov	r2, s0
 8006ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006cec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006cf0:	ea41 0300 	orr.w	r3, r1, r0
 8006cf4:	ec43 2b10 	vmov	d0, r2, r3
 8006cf8:	4770      	bx	lr
	...

08006cfc <_init>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	bf00      	nop
 8006d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d02:	bc08      	pop	{r3}
 8006d04:	469e      	mov	lr, r3
 8006d06:	4770      	bx	lr

08006d08 <_fini>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr
