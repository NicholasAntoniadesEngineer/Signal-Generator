
STM32F429VGT6 Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f0c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080060c0  080060c0  000160c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c0  080062c0  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c8  080062c8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080062d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000030  08006300  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08006300  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001032b  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000283f  00000000  00000000  0003038b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00032bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00033b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025035  00000000  00000000  000348c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d98a  00000000  00000000  000598fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de886  00000000  00000000  00067287  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004190  00000000  00000000  00145b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000030 	.word	0x20000030
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060a4 	.word	0x080060a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000034 	.word	0x20000034
 80001ec:	080060a4 	.word	0x080060a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b972 	b.w	8000e38 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	4688      	mov	r8, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14b      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4615      	mov	r5, r2
 8000b7e:	d967      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0720 	rsb	r7, r2, #32
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b92:	4095      	lsls	r5, r2
 8000b94:	ea47 0803 	orr.w	r8, r7, r3
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba4:	fa1f fc85 	uxth.w	ip, r5
 8000ba8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18eb      	adds	r3, r5, r3
 8000bba:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bbe:	f080 811b 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8118 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bc8:	3f02      	subs	r7, #2
 8000bca:	442b      	add	r3, r5
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be0:	45a4      	cmp	ip, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	192c      	adds	r4, r5, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8107 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	f240 8104 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	442c      	add	r4, r5
 8000bf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfc:	eba4 040c 	sub.w	r4, r4, ip
 8000c00:	2700      	movs	r7, #0
 8000c02:	b11e      	cbz	r6, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0xbe>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80eb 	beq.w	8000df2 <__udivmoddi4+0x286>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c22:	4638      	mov	r0, r7
 8000c24:	4639      	mov	r1, r7
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f783 	clz	r7, r3
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d147      	bne.n	8000cc2 <__udivmoddi4+0x156>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xd0>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80fa 	bhi.w	8000e30 <__udivmoddi4+0x2c4>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4698      	mov	r8, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e0      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000c4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c4e:	e7dd      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xe8>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f040 808f 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5e:	1b49      	subs	r1, r1, r5
 8000c60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c64:	fa1f f885 	uxth.w	r8, r5
 8000c68:	2701      	movs	r7, #1
 8000c6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb08 f10c 	mul.w	r1, r8, ip
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x14c>
 8000ca8:	192c      	adds	r4, r5, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x14a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80b6 	bhi.w	8000e22 <__udivmoddi4+0x2b6>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e79f      	b.n	8000c02 <__udivmoddi4+0x96>
 8000cc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cc6:	40bb      	lsls	r3, r7
 8000cc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ccc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ce6:	0c2c      	lsrs	r4, r5, #16
 8000ce8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cec:	fa1f fa8e 	uxth.w	sl, lr
 8000cf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1e 0303 	adds.w	r3, lr, r3
 8000d08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d0c:	f080 8087 	bcs.w	8000e1e <__udivmoddi4+0x2b2>
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f240 8084 	bls.w	8000e1e <__udivmoddi4+0x2b2>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4473      	add	r3, lr
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d30:	45a2      	cmp	sl, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1e 0404 	adds.w	r4, lr, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	d26b      	bcs.n	8000e16 <__udivmoddi4+0x2aa>
 8000d3e:	45a2      	cmp	sl, r4
 8000d40:	d969      	bls.n	8000e16 <__udivmoddi4+0x2aa>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4474      	add	r4, lr
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4e:	eba4 040a 	sub.w	r4, r4, sl
 8000d52:	454c      	cmp	r4, r9
 8000d54:	46c2      	mov	sl, r8
 8000d56:	464b      	mov	r3, r9
 8000d58:	d354      	bcc.n	8000e04 <__udivmoddi4+0x298>
 8000d5a:	d051      	beq.n	8000e00 <__udivmoddi4+0x294>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d069      	beq.n	8000e34 <__udivmoddi4+0x2c8>
 8000d60:	ebb1 050a 	subs.w	r5, r1, sl
 8000d64:	eb64 0403 	sbc.w	r4, r4, r3
 8000d68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d6c:	40fd      	lsrs	r5, r7
 8000d6e:	40fc      	lsrs	r4, r7
 8000d70:	ea4c 0505 	orr.w	r5, ip, r5
 8000d74:	e9c6 5400 	strd	r5, r4, [r6]
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e747      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f703 	lsr.w	r7, r0, r3
 8000d84:	4095      	lsls	r5, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d92:	4338      	orrs	r0, r7
 8000d94:	0c01      	lsrs	r1, r0, #16
 8000d96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9a:	fa1f f885 	uxth.w	r8, r5
 8000d9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb07 f308 	mul.w	r3, r7, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	fa04 f402 	lsl.w	r4, r4, r2
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x256>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000db8:	d22f      	bcs.n	8000e1a <__udivmoddi4+0x2ae>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d92d      	bls.n	8000e1a <__udivmoddi4+0x2ae>
 8000dbe:	3f02      	subs	r7, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	b281      	uxth	r1, r0
 8000dc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb00 f308 	mul.w	r3, r0, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x27e>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de0:	d217      	bcs.n	8000e12 <__udivmoddi4+0x2a6>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d915      	bls.n	8000e12 <__udivmoddi4+0x2a6>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df0:	e73b      	b.n	8000c6a <__udivmoddi4+0xfe>
 8000df2:	4637      	mov	r7, r6
 8000df4:	4630      	mov	r0, r6
 8000df6:	e709      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df8:	4607      	mov	r7, r0
 8000dfa:	e6e7      	b.n	8000bcc <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fb      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000e00:	4541      	cmp	r1, r8
 8000e02:	d2ab      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e08:	eb69 020e 	sbc.w	r2, r9, lr
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	4613      	mov	r3, r2
 8000e10:	e7a4      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e12:	4660      	mov	r0, ip
 8000e14:	e7e9      	b.n	8000dea <__udivmoddi4+0x27e>
 8000e16:	4618      	mov	r0, r3
 8000e18:	e795      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1a:	4667      	mov	r7, ip
 8000e1c:	e7d1      	b.n	8000dc2 <__udivmoddi4+0x256>
 8000e1e:	4681      	mov	r9, r0
 8000e20:	e77c      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	442c      	add	r4, r5
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0x14c>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	442b      	add	r3, r5
 8000e2e:	e72f      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e30:	4638      	mov	r0, r7
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xda>
 8000e34:	4637      	mov	r7, r6
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0xa0>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_ADC1_Init+0x9c>)
 8000e52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <MX_ADC1_Init+0xa0>)
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e9e:	f000 ff53 	bl	8001d48 <HAL_ADC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea8:	f000 fc06 	bl	80016b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eac:	230c      	movs	r3, #12
 8000eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000ebe:	f000 ff87 	bl	8001dd0 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec8:	f000 fbf6 	bl	80016b8 <Error_Handler>
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000004c 	.word	0x2000004c
 8000ed8:	40012000 	.word	0x40012000
 8000edc:	0f000001 	.word	0x0f000001

08000ee0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_ADC_MspInit+0x7c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d127      	bne.n	8000f52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_ADC_MspInit+0x80>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_ADC_MspInit+0x84>)
 8000f4e:	f002 f811 	bl	8002f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800

08000f68 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_DAC_Init+0x64>)
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <MX_DAC_Init+0x68>)
 8000f7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <MX_DAC_Init+0x64>)
 8000f7e:	f001 fa66 	bl	800244e <HAL_DAC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f88:	f000 fb96 	bl	80016b8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f8c:	2324      	movs	r3, #36	; 0x24
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_DAC_Init+0x64>)
 8000f9c:	f001 fb9a 	bl	80026d4 <HAL_DAC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fa6:	f000 fb87 	bl	80016b8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000faa:	232c      	movs	r3, #44	; 0x2c
 8000fac:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_DAC_Init+0x64>)
 8000fb6:	f001 fb8d 	bl	80026d4 <HAL_DAC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000fc0:	f000 fb7a 	bl	80016b8 <Error_Handler>
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200000f4 	.word	0x200000f4
 8000fd0:	40007400 	.word	0x40007400

08000fd4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_DAC_MspInit+0x150>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	f040 8092 	bne.w	800111c <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <HAL_DAC_MspInit+0x154>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a49      	ldr	r2, [pc, #292]	; (8001128 <HAL_DAC_MspInit+0x154>)
 8001002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_DAC_MspInit+0x154>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_DAC_MspInit+0x154>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a42      	ldr	r2, [pc, #264]	; (8001128 <HAL_DAC_MspInit+0x154>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <HAL_DAC_MspInit+0x154>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001030:	2330      	movs	r3, #48	; 0x30
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	483a      	ldr	r0, [pc, #232]	; (800112c <HAL_DAC_MspInit+0x158>)
 8001044:	f001 ff96 	bl	8002f74 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800104a:	4a3a      	ldr	r2, [pc, #232]	; (8001134 <HAL_DAC_MspInit+0x160>)
 800104c:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001050:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001054:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001058:	2240      	movs	r2, #64	; 0x40
 800105a:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001070:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001074:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001078:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800107a:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800108e:	4828      	ldr	r0, [pc, #160]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 8001090:	f001 fc02 	bl	8002898 <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800109a:	f000 fb0d 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a23      	ldr	r2, [pc, #140]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <HAL_DAC_MspInit+0x15c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ac:	4a23      	ldr	r2, [pc, #140]	; (800113c <HAL_DAC_MspInit+0x168>)
 80010ae:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010b2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010b6:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ca:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d2:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010da:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <HAL_DAC_MspInit+0x164>)
 80010f2:	f001 fbd1 	bl	8002898 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80010fc:	f000 fadc 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_DAC_MspInit+0x164>)
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <HAL_DAC_MspInit+0x164>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2036      	movs	r0, #54	; 0x36
 8001112:	f001 f966 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001116:	2036      	movs	r0, #54	; 0x36
 8001118:	f001 f97f 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40007400 	.word	0x40007400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	20000094 	.word	0x20000094
 8001134:	40026088 	.word	0x40026088
 8001138:	20000108 	.word	0x20000108
 800113c:	400260a0 	.word	0x400260a0

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_DMA_Init+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <MX_DMA_Init+0x88>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_DMA_Init+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_DMA_Init+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <MX_DMA_Init+0x88>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_DMA_Init+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2010      	movs	r0, #16
 8001184:	f001 f92d 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001188:	2010      	movs	r0, #16
 800118a:	f001 f946 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2011      	movs	r0, #17
 8001194:	f001 f925 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001198:	2011      	movs	r0, #17
 800119a:	f001 f93e 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	203a      	movs	r0, #58	; 0x3a
 80011a4:	f001 f91d 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011a8:	203a      	movs	r0, #58	; 0x3a
 80011aa:	f001 f936 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2046      	movs	r0, #70	; 0x46
 80011b4:	f001 f915 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80011b8:	2046      	movs	r0, #70	; 0x46
 80011ba:	f001 f92e 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <MX_GPIO_Init+0xfc>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <MX_GPIO_Init+0xfc>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <MX_GPIO_Init+0xfc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_GPIO_Init+0xfc>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_GPIO_Init+0xfc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MX_GPIO_Init+0xfc>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_GPIO_Init+0xfc>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_PWR_GPIO_Port, MAX485_PWR_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_GPIO_Init+0x100>)
 8001274:	f002 f828 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_GPIO_Init+0x104>)
 8001280:	f002 f822 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_PWR_Pin;
 8001284:	2301      	movs	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAX485_PWR_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_GPIO_Init+0x100>)
 800129c:	f001 fe6a 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_GPIO_Init+0x104>)
 80012ba:	f001 fe5b 	bl	8002f74 <HAL_GPIO_Init>

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	00000000 	.word	0x00000000

080012d8 <get_sine_val>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 90000000;	// APB1 Timer Clocks
int Period = 1;				// Tim2 Period


void get_sine_val(void){
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	e06b      	b.n	80013bc <get_sine_val+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8db 	bl	80004a4 <__aeabi_i2d>
 80012ee:	a340      	add	r3, pc, #256	; (adr r3, 80013f0 <get_sine_val+0x118>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f940 	bl	8000578 <__aeabi_dmul>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	4618      	mov	r0, r3
 80012fe:	4621      	mov	r1, r4
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <get_sine_val+0x100>)
 8001306:	f7ff fa61 	bl	80007cc <__aeabi_ddiv>
 800130a:	4603      	mov	r3, r0
 800130c:	460c      	mov	r4, r1
 800130e:	ec44 3b17 	vmov	d7, r3, r4
 8001312:	eeb0 0a47 	vmov.f32	s0, s14
 8001316:	eef0 0a67 	vmov.f32	s1, s15
 800131a:	f003 feb1 	bl	8005080 <sin>
 800131e:	ec51 0b10 	vmov	r0, r1, d0
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <get_sine_val+0x104>)
 8001328:	f7fe ff70 	bl	800020c <__adddf3>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4625      	mov	r5, r4
 8001332:	461c      	mov	r4, r3
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <get_sine_val+0x108>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0fda      	lsrs	r2, r3, #31
 800133a:	4413      	add	r3, r2
 800133c:	105b      	asrs	r3, r3, #1
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f8b0 	bl	80004a4 <__aeabi_i2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4620      	mov	r0, r4
 800134a:	4629      	mov	r1, r5
 800134c:	f7ff f914 	bl	8000578 <__aeabi_dmul>
 8001350:	4603      	mov	r3, r0
 8001352:	460c      	mov	r4, r1
 8001354:	4618      	mov	r0, r3
 8001356:	4621      	mov	r1, r4
 8001358:	f7ff fbd0 	bl	8000afc <__aeabi_d2uiz>
 800135c:	4601      	mov	r1, r0
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <get_sine_val+0x10c>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <get_sine_val+0x110>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f89a 	bl	80004a4 <__aeabi_i2d>
 8001370:	4605      	mov	r5, r0
 8001372:	460e      	mov	r6, r1
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <get_sine_val+0x10c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f881 	bl	8000484 <__aeabi_ui2d>
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <get_sine_val+0x114>)
 8001384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	f7ff f8f4 	bl	8000578 <__aeabi_dmul>
 8001390:	4603      	mov	r3, r0
 8001392:	460c      	mov	r4, r1
 8001394:	461a      	mov	r2, r3
 8001396:	4623      	mov	r3, r4
 8001398:	4628      	mov	r0, r5
 800139a:	4631      	mov	r1, r6
 800139c:	f7fe ff36 	bl	800020c <__adddf3>
 80013a0:	4603      	mov	r3, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	4618      	mov	r0, r3
 80013a6:	4621      	mov	r1, r4
 80013a8:	f7ff fba8 	bl	8000afc <__aeabi_d2uiz>
 80013ac:	4601      	mov	r1, r0
 80013ae:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <get_sine_val+0x10c>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3301      	adds	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2bef      	cmp	r3, #239	; 0xef
 80013c0:	dd90      	ble.n	80012e4 <get_sine_val+0xc>
	}
	sine_val[Ns] = 0;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <get_sine_val+0x10c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	406e0000 	.word	0x406e0000
 80013dc:	3ff00000 	.word	0x3ff00000
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000174 	.word	0x20000174
 80013e8:	20000010 	.word	0x20000010
 80013ec:	20000008 	.word	0x20000008
 80013f0:	4d12d84a 	.word	0x4d12d84a
 80013f4:	400921fb 	.word	0x400921fb

080013f8 <set_clock_TIM2>:



void set_clock_TIM2(void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_1*(Period + 1) ) - 1;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <set_clock_TIM2+0x5c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <set_clock_TIM2+0x60>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	09db      	lsrs	r3, r3, #7
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <set_clock_TIM2+0x64>)
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	3201      	adds	r2, #1
 800140e:	4914      	ldr	r1, [pc, #80]	; (8001460 <set_clock_TIM2+0x68>)
 8001410:	6809      	ldr	r1, [r1, #0]
 8001412:	fb01 f202 	mul.w	r2, r1, r2
 8001416:	fbb3 f3f2 	udiv	r3, r3, r2
 800141a:	3b01      	subs	r3, #1
 800141c:	461a      	mov	r2, r3
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <set_clock_TIM2+0x6c>)
 8001420:	601a      	str	r2, [r3, #0]
	  htim2.Instance = TIM2;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <set_clock_TIM2+0x70>)
 8001424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001428:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <set_clock_TIM2+0x64>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <set_clock_TIM2+0x70>)
 8001432:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 50 things start to behave funny.
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <set_clock_TIM2+0x6c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <set_clock_TIM2+0x70>)
 800143c:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <set_clock_TIM2+0x70>)
 8001440:	f002 fbe8 	bl	8003c14 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <set_clock_TIM2+0x56>
	  {
	    Error_Handler();
 800144a:	f000 f935 	bl	80016b8 <Error_Handler>
	  }
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000001c 	.word	0x2000001c
 8001458:	88888889 	.word	0x88888889
 800145c:	20000020 	.word	0x20000020
 8001460:	20000014 	.word	0x20000014
 8001464:	20000170 	.word	0x20000170
 8001468:	2000057c 	.word	0x2000057c

0800146c <set_clock_TIM4>:

void set_clock_TIM4(void){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_2*(Period + 1) ) - 1;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <set_clock_TIM4+0x58>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <set_clock_TIM4+0x5c>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	09db      	lsrs	r3, r3, #7
 800147c:	4a13      	ldr	r2, [pc, #76]	; (80014cc <set_clock_TIM4+0x60>)
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	3201      	adds	r2, #1
 8001482:	4913      	ldr	r1, [pc, #76]	; (80014d0 <set_clock_TIM4+0x64>)
 8001484:	6809      	ldr	r1, [r1, #0]
 8001486:	fb01 f202 	mul.w	r2, r1, r2
 800148a:	fbb3 f3f2 	udiv	r3, r3, r2
 800148e:	3b01      	subs	r3, #1
 8001490:	461a      	mov	r2, r3
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <set_clock_TIM4+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
	  htim4.Instance = TIM4;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <set_clock_TIM4+0x6c>)
 8001498:	4a10      	ldr	r2, [pc, #64]	; (80014dc <set_clock_TIM4+0x70>)
 800149a:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <set_clock_TIM4+0x60>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <set_clock_TIM4+0x6c>)
 80014a4:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 50 things start to behave funny.
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <set_clock_TIM4+0x68>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <set_clock_TIM4+0x6c>)
 80014ae:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <set_clock_TIM4+0x6c>)
 80014b2:	f002 fbaf 	bl	8003c14 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <set_clock_TIM4+0x54>
	  {
	    Error_Handler();
 80014bc:	f000 f8fc 	bl	80016b8 <Error_Handler>
	  }
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000001c 	.word	0x2000001c
 80014c8:	88888889 	.word	0x88888889
 80014cc:	20000020 	.word	0x20000020
 80014d0:	20000018 	.word	0x20000018
 80014d4:	20000170 	.word	0x20000170
 80014d8:	2000053c 	.word	0x2000053c
 80014dc:	40000800 	.word	0x40000800

080014e0 <HAL_UART_RxCpltCallback>:
/* Setting up UART communications*/
#define uartSize 8
uint8_t rx_buff[uartSize];
uint8_t tx_buff[uartSize];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]


	strcpy((char*)tx_buff, "Call!\r\n");
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_UART_RxCpltCallback+0x3c>)
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_UART_RxCpltCallback+0x40>)
 80014ec:	cb03      	ldmia	r3!, {r0, r1}
 80014ee:	6010      	str	r0, [r2, #0]
 80014f0:	6051      	str	r1, [r2, #4]
	HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), HAL_MAX_DELAY);
 80014f2:	480a      	ldr	r0, [pc, #40]	; (800151c <HAL_UART_RxCpltCallback+0x3c>)
 80014f4:	f7fe fe7c 	bl	80001f0 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <HAL_UART_RxCpltCallback+0x3c>)
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <HAL_UART_RxCpltCallback+0x44>)
 8001504:	f002 ffdd 	bl	80044c2 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 8001508:	2208      	movs	r2, #8
 800150a:	4907      	ldr	r1, [pc, #28]	; (8001528 <HAL_UART_RxCpltCallback+0x48>)
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_UART_RxCpltCallback+0x44>)
 800150e:	f003 f871 	bl	80045f4 <HAL_UART_Receive_DMA>
	// Switch statements to validate message integrity

	// Switch statements to read the received message and to respond


}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000534 	.word	0x20000534
 8001520:	080060c0 	.word	0x080060c0
 8001524:	2000067c 	.word	0x2000067c
 8001528:	20000168 	.word	0x20000168

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f000 fb75 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f84f 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153a:	f7ff fe47 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 800153e:	f7ff fdff 	bl	8001140 <MX_DMA_Init>
  MX_ADC1_Init();
 8001542:	f7ff fc7b 	bl	8000e3c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001546:	f000 fa49 	bl	80019dc <MX_USART1_UART_Init>
  MX_DAC_Init();
 800154a:	f7ff fd0d 	bl	8000f68 <MX_DAC_Init>
  MX_TIM2_Init();
 800154e:	f000 f969 	bl	8001824 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001552:	f000 f9b3 	bl	80018bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* Sine function */
  set_clock_TIM2();						// Setting frequency of timer 2
 8001556:	f7ff ff4f 	bl	80013f8 <set_clock_TIM2>
  set_clock_TIM4();						// Setting frequency of timer 4
 800155a:	f7ff ff87 	bl	800146c <set_clock_TIM4>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <main+0x90>)
 8001560:	f002 fb83 	bl	8003c6a <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);			// Start timer 4
 8001564:	4816      	ldr	r0, [pc, #88]	; (80015c0 <main+0x94>)
 8001566:	f002 fb80 	bl	8003c6a <HAL_TIM_Base_Start>
  get_sine_val();						// Call get sineval function
 800156a:	f7ff feb5 	bl	80012d8 <get_sine_val>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	23f0      	movs	r3, #240	; 0xf0
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <main+0x98>)
 8001576:	2100      	movs	r1, #0
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <main+0x9c>)
 800157a:	f000 ff8b 	bl	8002494 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	23f0      	movs	r3, #240	; 0xf0
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <main+0x98>)
 8001586:	2110      	movs	r1, #16
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <main+0x9c>)
 800158a:	f000 ff83 	bl	8002494 <HAL_DAC_Start_DMA>

  /* Setting signal output indicators to on  */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, 1);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <main+0xa0>)
 8001596:	f001 fe97 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED2_Pin, 1);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <main+0xa0>)
 80015a2:	f001 fe91 	bl	80032c8 <HAL_GPIO_WritePin>

  /* Setting up UART communications */
  HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 80015a6:	2208      	movs	r2, #8
 80015a8:	4909      	ldr	r1, [pc, #36]	; (80015d0 <main+0xa4>)
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <main+0xa8>)
 80015ac:	f003 f822 	bl	80045f4 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
	HAL_Delay(1000);
 80015b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b4:	f000 fba6 	bl	8001d04 <HAL_Delay>
 80015b8:	e7fa      	b.n	80015b0 <main+0x84>
 80015ba:	bf00      	nop
 80015bc:	2000057c 	.word	0x2000057c
 80015c0:	2000053c 	.word	0x2000053c
 80015c4:	20000174 	.word	0x20000174
 80015c8:	200000f4 	.word	0x200000f4
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	20000168 	.word	0x20000168
 80015d4:	2000067c 	.word	0x2000067c

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	; 0x50
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fd42 	bl	8005070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <SystemClock_Config+0xd8>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <SystemClock_Config+0xd8>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <SystemClock_Config+0xd8>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <SystemClock_Config+0xdc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <SystemClock_Config+0xdc>)
 8001622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <SystemClock_Config+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	2310      	movs	r3, #16
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001640:	2302      	movs	r3, #2
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001648:	2308      	movs	r3, #8
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800164c:	23b4      	movs	r3, #180	; 0xb4
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001650:	2302      	movs	r3, #2
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001654:	2307      	movs	r3, #7
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fe9d 	bl	800339c <HAL_RCC_OscConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001668:	f000 f826 	bl	80016b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800166c:	f001 fe46 	bl	80032fc <HAL_PWREx_EnableOverDrive>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001676:	f000 f81f 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	230f      	movs	r3, #15
 800167c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167e:	2302      	movs	r3, #2
 8001680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800168a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2105      	movs	r1, #5
 8001698:	4618      	mov	r0, r3
 800169a:	f002 f8ef 	bl	800387c <HAL_RCC_ClockConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016a4:	f000 f808 	bl	80016b8 <Error_Handler>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3750      	adds	r7, #80	; 0x50
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 faae 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA1_Stream5_IRQHandler+0x10>)
 8001772:	f001 f997 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000094 	.word	0x20000094

08001780 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Stream6_IRQHandler+0x10>)
 8001786:	f001 f98d 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000108 	.word	0x20000108

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f002 fa8a 	bl	8003cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000057c 	.word	0x2000057c

080017a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM4_IRQHandler+0x10>)
 80017ae:	f002 fa80 	bl	8003cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000053c 	.word	0x2000053c

080017bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM6_DAC_IRQHandler+0x10>)
 80017c2:	f000 ff15 	bl	80025f0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000f4 	.word	0x200000f4

080017d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <DMA2_Stream2_IRQHandler+0x10>)
 80017d6:	f001 f965 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000061c 	.word	0x2000061c

080017e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <DMA2_Stream7_IRQHandler+0x10>)
 80017ea:	f001 f95b 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200005bc 	.word	0x200005bc

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <SystemInit+0x28>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <SystemInit+0x28>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SystemInit+0x28>)
 800180e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001812:	609a      	str	r2, [r3, #8]
#endif
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM2_Init+0x94>)
 8001842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_TIM2_Init+0x94>)
 800184a:	220a      	movs	r2, #10
 800184c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM2_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM2_Init+0x94>)
 8001856:	220a      	movs	r2, #10
 8001858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_TIM2_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM2_Init+0x94>)
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <MX_TIM2_Init+0x94>)
 8001868:	f002 f9d4 	bl	8003c14 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001872:	f7ff ff21 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4619      	mov	r1, r3
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_TIM2_Init+0x94>)
 8001884:	f002 fb1d 	bl	8003ec2 <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800188e:	f7ff ff13 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001892:	2320      	movs	r3, #32
 8001894:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM2_Init+0x94>)
 80018a0:	f002 fd32 	bl	8004308 <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80018aa:	f7ff ff05 	bl	80016b8 <Error_Handler>
  }

}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000057c 	.word	0x2000057c

080018bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_TIM4_Init+0x90>)
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <MX_TIM4_Init+0x94>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <MX_TIM4_Init+0x90>)
 80018e0:	220a      	movs	r2, #10
 80018e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_TIM4_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <MX_TIM4_Init+0x90>)
 80018ec:	220a      	movs	r2, #10
 80018ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_TIM4_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_TIM4_Init+0x90>)
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018fc:	4813      	ldr	r0, [pc, #76]	; (800194c <MX_TIM4_Init+0x90>)
 80018fe:	f002 f989 	bl	8003c14 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001908:	f7ff fed6 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4619      	mov	r1, r3
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <MX_TIM4_Init+0x90>)
 800191a:	f002 fad2 	bl	8003ec2 <HAL_TIM_ConfigClockSource>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001924:	f7ff fec8 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001928:	2320      	movs	r3, #32
 800192a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_TIM4_Init+0x90>)
 8001936:	f002 fce7 	bl	8004308 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001940:	f7ff feba 	bl	80016b8 <Error_Handler>
  }

}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000053c 	.word	0x2000053c
 8001950:	40000800 	.word	0x40000800

08001954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d116      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_TIM_Base_MspInit+0x80>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_TIM_Base_MspInit+0x80>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_TIM_Base_MspInit+0x80>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	201c      	movs	r0, #28
 8001988:	f000 fd2b 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800198c:	201c      	movs	r0, #28
 800198e:	f000 fd44 	bl	800241a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001992:	e01a      	b.n	80019ca <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_TIM_Base_MspInit+0x84>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d115      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_TIM_Base_MspInit+0x80>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_TIM_Base_MspInit+0x80>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_TIM_Base_MspInit+0x80>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	201e      	movs	r0, #30
 80019c0:	f000 fd0f 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019c4:	201e      	movs	r0, #30
 80019c6:	f000 fd28 	bl	800241a <HAL_NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40000800 	.word	0x40000800

080019dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <MX_USART1_UART_Init+0x50>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 80019f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 8001a04:	220c      	movs	r2, #12
 8001a06:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_USART1_UART_Init+0x4c>)
 8001a16:	f002 fd07 	bl	8004428 <HAL_UART_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001a20:	f7ff fe4a 	bl	80016b8 <Error_Handler>
  }

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000067c 	.word	0x2000067c
 8001a2c:	40011000 	.word	0x40011000

08001a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	; (8001bac <HAL_UART_MspInit+0x17c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f040 80a8 	bne.w	8001ba4 <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	4b55      	ldr	r3, [pc, #340]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	4a54      	ldr	r2, [pc, #336]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6453      	str	r3, [r2, #68]	; 0x44
 8001a64:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a4d      	ldr	r2, [pc, #308]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9c:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <HAL_UART_MspInit+0x180>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <HAL_UART_MspInit+0x184>)
 8001ac6:	f001 fa55 	bl	8002f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ada:	2307      	movs	r3, #7
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4834      	ldr	r0, [pc, #208]	; (8001bb8 <HAL_UART_MspInit+0x188>)
 8001ae6:	f001 fa45 	bl	8002f74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001aec:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_UART_MspInit+0x190>)
 8001aee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b2a:	4824      	ldr	r0, [pc, #144]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b2c:	f000 feb4 	bl	8002898 <HAL_DMA_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001b36:	f7ff fdbf 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_UART_MspInit+0x18c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b48:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_UART_MspInit+0x198>)
 8001b4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b66:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b88:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b8a:	f000 fe85 	bl	8002898 <HAL_DMA_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001b94:	f7ff fd90 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_UART_MspInit+0x194>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	2000061c 	.word	0x2000061c
 8001bc0:	40026440 	.word	0x40026440
 8001bc4:	200005bc 	.word	0x200005bc
 8001bc8:	400264b8 	.word	0x400264b8

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bd2:	e003      	b.n	8001bdc <LoopCopyDataInit>

08001bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bda:	3104      	adds	r1, #4

08001bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001be4:	d3f6      	bcc.n	8001bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001be8:	e002      	b.n	8001bf0 <LoopFillZerobss>

08001bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bec:	f842 3b04 	str.w	r3, [r2], #4

08001bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bf4:	d3f9      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff fdff 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f003 fa15 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fc95 	bl	800152c <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c04:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c08:	080062d0 	.word	0x080062d0
  ldr  r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c10:	20000030 	.word	0x20000030
  ldr  r2, =_sbss
 8001c14:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 8001c18:	200006c0 	.word	0x200006c0

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 fbbf 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fd38 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fbd7 	bl	8002436 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 fb9f 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000024 	.word	0x20000024
 8001cbc:	2000002c 	.word	0x2000002c
 8001cc0:	20000028 	.word	0x20000028

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000002c 	.word	0x2000002c
 8001ce8:	200006bc 	.word	0x200006bc

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200006bc 	.word	0x200006bc

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_Delay+0x40>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000002c 	.word	0x2000002c

08001d48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e033      	b.n	8001dc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff f8ba 	bl	8000ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d8e:	f023 0302 	bic.w	r3, r3, #2
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f94a 	bl	8002034 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f023 0303 	bic.w	r3, r3, #3
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
 8001db6:	e001      	b.n	8001dbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1c>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e113      	b.n	8002014 <HAL_ADC_ConfigChannel+0x244>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	d925      	bls.n	8001e48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68d9      	ldr	r1, [r3, #12]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b1e      	subs	r3, #30
 8001e12:	2207      	movs	r2, #7
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	400a      	ands	r2, r1
 8001e20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68d9      	ldr	r1, [r3, #12]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4403      	add	r3, r0
 8001e3a:	3b1e      	subs	r3, #30
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	e022      	b.n	8001e8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6919      	ldr	r1, [r3, #16]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6919      	ldr	r1, [r3, #16]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4403      	add	r3, r0
 8001e84:	409a      	lsls	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d824      	bhi.n	8001ee0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b05      	subs	r3, #5
 8001ea8:	221f      	movs	r2, #31
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b05      	subs	r3, #5
 8001ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ede:	e04c      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d824      	bhi.n	8001f32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b23      	subs	r3, #35	; 0x23
 8001efa:	221f      	movs	r2, #31
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43da      	mvns	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	400a      	ands	r2, r1
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	3b23      	subs	r3, #35	; 0x23
 8001f24:	fa00 f203 	lsl.w	r2, r0, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f30:	e023      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b41      	subs	r3, #65	; 0x41
 8001f44:	221f      	movs	r2, #31
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	400a      	ands	r2, r1
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b41      	subs	r3, #65	; 0x41
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_ADC_ConfigChannel+0x250>)
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <HAL_ADC_ConfigChannel+0x254>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d10f      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d8>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_ADC_ConfigChannel+0x254>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12b      	bne.n	800200a <HAL_ADC_ConfigChannel+0x23a>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_ADC_ConfigChannel+0x258>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <HAL_ADC_ConfigChannel+0x1f4>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b11      	cmp	r3, #17
 8001fc2:	d122      	bne.n	800200a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <HAL_ADC_ConfigChannel+0x258>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d111      	bne.n	800200a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_ADC_ConfigChannel+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_ADC_ConfigChannel+0x260>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	0c9a      	lsrs	r2, r3, #18
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40012300 	.word	0x40012300
 8002024:	40012000 	.word	0x40012000
 8002028:	10000012 	.word	0x10000012
 800202c:	20000024 	.word	0x20000024
 8002030:	431bde83 	.word	0x431bde83

08002034 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800203c:	4b79      	ldr	r3, [pc, #484]	; (8002224 <ADC_Init+0x1f0>)
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	431a      	orrs	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800208c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6899      	ldr	r1, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	4a58      	ldr	r2, [pc, #352]	; (8002228 <ADC_Init+0x1f4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d022      	beq.n	8002112 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	e00f      	b.n	8002132 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002130:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0202 	bic.w	r2, r2, #2
 8002140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7e1b      	ldrb	r3, [r3, #24]
 800214c:	005a      	lsls	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800216e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800217e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	3b01      	subs	r3, #1
 800218c:	035a      	lsls	r2, r3, #13
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	e007      	b.n	80021a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	051a      	lsls	r2, r3, #20
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ea:	025a      	lsls	r2, r3, #9
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	029a      	lsls	r2, r3, #10
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	0f000001 	.word	0x0f000001

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff29 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff3e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff31 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e014      	b.n	800248a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fe fdaf 	bl	8000fd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	795b      	ldrb	r3, [r3, #5]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_DAC_Start_DMA+0x1e>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e08e      	b.n	80025d0 <HAL_DAC_Start_DMA+0x13c>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2202      	movs	r2, #2
 80024bc:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d12a      	bne.n	800251a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a43      	ldr	r2, [pc, #268]	; (80025d8 <HAL_DAC_Start_DMA+0x144>)
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a42      	ldr	r2, [pc, #264]	; (80025dc <HAL_DAC_Start_DMA+0x148>)
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a41      	ldr	r2, [pc, #260]	; (80025e0 <HAL_DAC_Start_DMA+0x14c>)
 80024da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024ea:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d009      	beq.n	8002506 <HAL_DAC_Start_DMA+0x72>
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d00c      	beq.n	8002510 <HAL_DAC_Start_DMA+0x7c>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d000      	beq.n	80024fc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80024fa:	e039      	b.n	8002570 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3308      	adds	r3, #8
 8002502:	617b      	str	r3, [r7, #20]
        break;
 8002504:	e034      	b.n	8002570 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	330c      	adds	r3, #12
 800250c:	617b      	str	r3, [r7, #20]
        break;
 800250e:	e02f      	b.n	8002570 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3310      	adds	r3, #16
 8002516:	617b      	str	r3, [r7, #20]
        break;
 8002518:	e02a      	b.n	8002570 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <HAL_DAC_Start_DMA+0x150>)
 8002520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <HAL_DAC_Start_DMA+0x154>)
 8002528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_DAC_Start_DMA+0x158>)
 8002530:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002540:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d009      	beq.n	800255c <HAL_DAC_Start_DMA+0xc8>
 8002548:	2b08      	cmp	r3, #8
 800254a:	d00c      	beq.n	8002566 <HAL_DAC_Start_DMA+0xd2>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d000      	beq.n	8002552 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002550:	e00e      	b.n	8002570 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3314      	adds	r3, #20
 8002558:	617b      	str	r3, [r7, #20]
        break;
 800255a:	e009      	b.n	8002570 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3318      	adds	r3, #24
 8002562:	617b      	str	r3, [r7, #20]
        break;
 8002564:	e004      	b.n	8002570 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	331c      	adds	r3, #28
 800256c:	617b      	str	r3, [r7, #20]
        break;
 800256e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002584:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6898      	ldr	r0, [r3, #8]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	f000 fa30 	bl	80029f4 <HAL_DMA_Start_IT>
 8002594:	e00e      	b.n	80025b4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80025a4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68d8      	ldr	r0, [r3, #12]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	f000 fa20 	bl	80029f4 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	0800276f 	.word	0x0800276f
 80025dc:	08002791 	.word	0x08002791
 80025e0:	080027ad 	.word	0x080027ad
 80025e4:	0800282b 	.word	0x0800282b
 80025e8:	0800284d 	.word	0x0800284d
 80025ec:	08002869 	.word	0x08002869

080025f0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002606:	d118      	bne.n	800263a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2204      	movs	r2, #4
 800260c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002622:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002632:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f843 	bl	80026c0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002648:	d118      	bne.n	800267c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2204      	movs	r2, #4
 800264e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f043 0202 	orr.w	r2, r3, #2
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002664:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002674:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8cd 	bl	8002816 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	795b      	ldrb	r3, [r3, #5]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_DAC_ConfigChannel+0x20>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e036      	b.n	8002762 <HAL_DAC_ConfigChannel+0x8e>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2202      	movs	r2, #2
 80026fe:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002708:	f640 72fe 	movw	r2, #4094	; 0xffe
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4013      	ands	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	22c0      	movs	r2, #192	; 0xc0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ff81 	bl	8002684 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	711a      	strb	r2, [r3, #4]
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff ff7a 	bl	8002698 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff ff70 	bl	80026ac <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	711a      	strb	r2, [r3, #4]
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff ffce 	bl	80027da <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	711a      	strb	r2, [r3, #4]
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7ff ffc7 	bl	80027ee <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff ffbd 	bl	8002802 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	711a      	strb	r2, [r3, #4]
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff fa22 	bl	8001cec <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e099      	b.n	80029e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d4:	e00f      	b.n	80028f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d6:	f7ff fa09 	bl	8001cec <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d908      	bls.n	80028f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e078      	b.n	80029e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e8      	bne.n	80028d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_DMA_Init+0x158>)
 8002910:	4013      	ands	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2b04      	cmp	r3, #4
 800294e:	d107      	bne.n	8002960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4313      	orrs	r3, r2
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0307 	bic.w	r3, r3, #7
 8002976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	2b04      	cmp	r3, #4
 8002988:	d117      	bne.n	80029ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fa6f 	bl	8002e80 <DMA_CheckFifoParam>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029b6:	2301      	movs	r3, #1
 80029b8:	e016      	b.n	80029e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa26 	bl	8002e14 <DMA_CalcBaseAndBitshift>
 80029c8:	4603      	mov	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	223f      	movs	r2, #63	; 0x3f
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	f010803f 	.word	0xf010803f

080029f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_DMA_Start_IT+0x26>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e040      	b.n	8002a9c <HAL_DMA_Start_IT+0xa8>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d12f      	bne.n	8002a8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f9b8 	bl	8002db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	223f      	movs	r2, #63	; 0x3f
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0216 	orr.w	r2, r2, #22
 8002a62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e005      	b.n	8002a9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
 8002a98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab0:	4b92      	ldr	r3, [pc, #584]	; (8002cfc <HAL_DMA_IRQHandler+0x258>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a92      	ldr	r2, [pc, #584]	; (8002d00 <HAL_DMA_IRQHandler+0x25c>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2208      	movs	r2, #8
 8002afe:	409a      	lsls	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2204      	movs	r2, #4
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2210      	movs	r2, #16
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d03c      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
 8002bd2:	e01f      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e016      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2220      	movs	r2, #32
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 808e 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8086 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d136      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0216 	bic.w	r2, r2, #22
 8002c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x1da>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	223f      	movs	r2, #63	; 0x3f
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d07d      	beq.n	8002dae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
        }
        return;
 8002cba:	e078      	b.n	8002dae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01c      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d108      	bne.n	8002cea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d030      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e02b      	b.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
 8002cfa:	e022      	b.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
 8002cfc:	20000024 	.word	0x20000024
 8002d00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0210 	bic.w	r2, r2, #16
 8002d20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d032      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d022      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2205      	movs	r2, #5
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d307      	bcc.n	8002d8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f2      	bne.n	8002d6e <HAL_DMA_IRQHandler+0x2ca>
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
 8002dac:	e000      	b.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dae:	bf00      	nop
    }
  }
}
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop

08002db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d108      	bne.n	8002df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002df6:	e007      	b.n	8002e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	3b10      	subs	r3, #16
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <DMA_CalcBaseAndBitshift+0x64>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <DMA_CalcBaseAndBitshift+0x68>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d909      	bls.n	8002e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	659a      	str	r2, [r3, #88]	; 0x58
 8002e54:	e007      	b.n	8002e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	aaaaaaab 	.word	0xaaaaaaab
 8002e7c:	080060e0 	.word	0x080060e0

08002e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d855      	bhi.n	8002f4c <DMA_CheckFifoParam+0xcc>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <DMA_CheckFifoParam+0x28>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ecb 	.word	0x08002ecb
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002f4d 	.word	0x08002f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d045      	beq.n	8002f50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e042      	b.n	8002f50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed2:	d13f      	bne.n	8002f54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e03c      	b.n	8002f54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee2:	d121      	bne.n	8002f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d836      	bhi.n	8002f58 <DMA_CheckFifoParam+0xd8>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <DMA_CheckFifoParam+0x70>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f07 	.word	0x08002f07
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	08002f19 	.word	0x08002f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e02f      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e021      	b.n	8002f5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f20:	d11e      	bne.n	8002f60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f26:	e01b      	b.n	8002f60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d902      	bls.n	8002f34 <DMA_CheckFifoParam+0xb4>
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d003      	beq.n	8002f3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f32:	e018      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e015      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4a:	e00b      	b.n	8002f64 <DMA_CheckFifoParam+0xe4>
      break;
 8002f4c:	bf00      	nop
 8002f4e:	e00a      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f50:	bf00      	nop
 8002f52:	e008      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f54:	bf00      	nop
 8002f56:	e006      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f58:	bf00      	nop
 8002f5a:	e004      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e002      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f60:	bf00      	nop
 8002f62:	e000      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f64:	bf00      	nop
    }
  } 
  
  return status; 
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e177      	b.n	8003280 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8166 	bne.w	800327a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d00b      	beq.n	8002fce <HAL_GPIO_Init+0x5a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fc2:	2b11      	cmp	r3, #17
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b12      	cmp	r3, #18
 8002fcc:	d130      	bne.n	8003030 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0xfc>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b12      	cmp	r3, #18
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80c0 	beq.w	800327a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_GPIO_Init+0x320>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a64      	ldr	r2, [pc, #400]	; (8003294 <HAL_GPIO_Init+0x320>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_GPIO_Init+0x320>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003116:	4a60      	ldr	r2, [pc, #384]	; (8003298 <HAL_GPIO_Init+0x324>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a57      	ldr	r2, [pc, #348]	; (800329c <HAL_GPIO_Init+0x328>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d037      	beq.n	80031b2 <HAL_GPIO_Init+0x23e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_GPIO_Init+0x32c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_GPIO_Init+0x23a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a55      	ldr	r2, [pc, #340]	; (80032a4 <HAL_GPIO_Init+0x330>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d02b      	beq.n	80031aa <HAL_GPIO_Init+0x236>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a54      	ldr	r2, [pc, #336]	; (80032a8 <HAL_GPIO_Init+0x334>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d025      	beq.n	80031a6 <HAL_GPIO_Init+0x232>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a53      	ldr	r2, [pc, #332]	; (80032ac <HAL_GPIO_Init+0x338>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01f      	beq.n	80031a2 <HAL_GPIO_Init+0x22e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_GPIO_Init+0x33c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d019      	beq.n	800319e <HAL_GPIO_Init+0x22a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_GPIO_Init+0x340>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_GPIO_Init+0x226>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <HAL_GPIO_Init+0x344>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00d      	beq.n	8003196 <HAL_GPIO_Init+0x222>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4f      	ldr	r2, [pc, #316]	; (80032bc <HAL_GPIO_Init+0x348>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <HAL_GPIO_Init+0x21e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <HAL_GPIO_Init+0x34c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_GPIO_Init+0x21a>
 800318a:	2309      	movs	r3, #9
 800318c:	e012      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 800318e:	230a      	movs	r3, #10
 8003190:	e010      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 8003192:	2308      	movs	r3, #8
 8003194:	e00e      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 8003196:	2307      	movs	r3, #7
 8003198:	e00c      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 800319a:	2306      	movs	r3, #6
 800319c:	e00a      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 800319e:	2305      	movs	r3, #5
 80031a0:	e008      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 80031a2:	2304      	movs	r3, #4
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 80031a6:	2303      	movs	r3, #3
 80031a8:	e004      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e002      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_GPIO_Init+0x240>
 80031b2:	2300      	movs	r3, #0
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	f002 0203 	and.w	r2, r2, #3
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	4093      	lsls	r3, r2
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c4:	4934      	ldr	r1, [pc, #208]	; (8003298 <HAL_GPIO_Init+0x324>)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d2:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_GPIO_Init+0x350>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f6:	4a33      	ldr	r2, [pc, #204]	; (80032c4 <HAL_GPIO_Init+0x350>)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_GPIO_Init+0x350>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003220:	4a28      	ldr	r2, [pc, #160]	; (80032c4 <HAL_GPIO_Init+0x350>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_GPIO_Init+0x350>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_GPIO_Init+0x350>)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_GPIO_Init+0x350>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003274:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <HAL_GPIO_Init+0x350>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3301      	adds	r3, #1
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	f67f ae84 	bls.w	8002f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003288:	bf00      	nop
 800328a:	3724      	adds	r7, #36	; 0x24
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40021400 	.word	0x40021400
 80032b4:	40021800 	.word	0x40021800
 80032b8:	40021c00 	.word	0x40021c00
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40022400 	.word	0x40022400
 80032c4:	40013c00 	.word	0x40013c00

080032c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
 80032d4:	4613      	mov	r3, r2
 80032d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d8:	787b      	ldrb	r3, [r7, #1]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032e4:	e003      	b.n	80032ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	041a      	lsls	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	619a      	str	r2, [r3, #24]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_PWREx_EnableOverDrive+0x90>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_PWREx_EnableOverDrive+0x90>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_PWREx_EnableOverDrive+0x90>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_PWREx_EnableOverDrive+0x94>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003328:	f7fe fce0 	bl	8001cec <HAL_GetTick>
 800332c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800332e:	e009      	b.n	8003344 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003330:	f7fe fcdc 	bl	8001cec <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800333e:	d901      	bls.n	8003344 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e01f      	b.n	8003384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_PWREx_EnableOverDrive+0x98>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d1ee      	bne.n	8003330 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003358:	f7fe fcc8 	bl	8001cec <HAL_GetTick>
 800335c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800335e:	e009      	b.n	8003374 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003360:	f7fe fcc4 	bl	8001cec <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800336e:	d901      	bls.n	8003374 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e007      	b.n	8003384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_PWREx_EnableOverDrive+0x98>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003380:	d1ee      	bne.n	8003360 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	420e0040 	.word	0x420e0040
 8003394:	40007000 	.word	0x40007000
 8003398:	420e0044 	.word	0x420e0044

0800339c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e25b      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d075      	beq.n	80034a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ba:	4ba3      	ldr	r3, [pc, #652]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d00c      	beq.n	80033e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c6:	4ba0      	ldr	r3, [pc, #640]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d112      	bne.n	80033f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b9d      	ldr	r3, [pc, #628]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033de:	d10b      	bne.n	80033f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	4b99      	ldr	r3, [pc, #612]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d05b      	beq.n	80034a4 <HAL_RCC_OscConfig+0x108>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d157      	bne.n	80034a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e236      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d106      	bne.n	8003410 <HAL_RCC_OscConfig+0x74>
 8003402:	4b91      	ldr	r3, [pc, #580]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a90      	ldr	r2, [pc, #576]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e01d      	b.n	800344c <HAL_RCC_OscConfig+0xb0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x98>
 800341a:	4b8b      	ldr	r3, [pc, #556]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a8a      	ldr	r2, [pc, #552]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a87      	ldr	r2, [pc, #540]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0xb0>
 8003434:	4b84      	ldr	r3, [pc, #528]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a83      	ldr	r2, [pc, #524]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b81      	ldr	r3, [pc, #516]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a80      	ldr	r2, [pc, #512]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fc4a 	bl	8001cec <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fc46 	bl	8001cec <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1fb      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0xc0>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fc36 	bl	8001cec <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003484:	f7fe fc32 	bl	8001cec <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1e7      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	4b6c      	ldr	r3, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0xe8>
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034be:	4b62      	ldr	r3, [pc, #392]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d11c      	bne.n	8003504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x152>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e1bb      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b56      	ldr	r3, [pc, #344]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4952      	ldr	r1, [pc, #328]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	e03a      	b.n	800357a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b4f      	ldr	r3, [pc, #316]	; (800364c <HAL_RCC_OscConfig+0x2b0>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe fbeb 	bl	8001cec <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800351a:	f7fe fbe7 	bl	8001cec <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e19c      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4940      	ldr	r1, [pc, #256]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	e015      	b.n	800357a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_RCC_OscConfig+0x2b0>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fbca 	bl	8001cec <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355c:	f7fe fbc6 	bl	8001cec <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e17b      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d030      	beq.n	80035e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HAL_RCC_OscConfig+0x2b4>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fe fbaa 	bl	8001cec <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359c:	f7fe fba6 	bl	8001cec <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e15b      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x200>
 80035ba:	e015      	b.n	80035e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCC_OscConfig+0x2b4>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fe fb93 	bl	8001cec <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fe fb8f 	bl	8001cec <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e144      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a0 	beq.w	8003736 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	6413      	str	r3, [r2, #64]	; 0x40
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_OscConfig+0x2b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d121      	bne.n	8003676 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_OscConfig+0x2b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a07      	ldr	r2, [pc, #28]	; (8003654 <HAL_RCC_OscConfig+0x2b8>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fe fb55 	bl	8001cec <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e011      	b.n	800366a <HAL_RCC_OscConfig+0x2ce>
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	42470000 	.word	0x42470000
 8003650:	42470e80 	.word	0x42470e80
 8003654:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fe fb48 	bl	8001cec <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0fd      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x4d4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d106      	bne.n	800368c <HAL_RCC_OscConfig+0x2f0>
 800367e:	4b7d      	ldr	r3, [pc, #500]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a7c      	ldr	r2, [pc, #496]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	e01c      	b.n	80036c6 <HAL_RCC_OscConfig+0x32a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0x312>
 8003694:	4b77      	ldr	r3, [pc, #476]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a76      	ldr	r2, [pc, #472]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800369a:	f043 0304 	orr.w	r3, r3, #4
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	4b74      	ldr	r3, [pc, #464]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a73      	ldr	r2, [pc, #460]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	e00b      	b.n	80036c6 <HAL_RCC_OscConfig+0x32a>
 80036ae:	4b71      	ldr	r3, [pc, #452]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a70      	ldr	r2, [pc, #448]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b6e      	ldr	r3, [pc, #440]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a6d      	ldr	r2, [pc, #436]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d015      	beq.n	80036fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fe fb0d 	bl	8001cec <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe fb09 	bl	8001cec <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0bc      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ee      	beq.n	80036d6 <HAL_RCC_OscConfig+0x33a>
 80036f8:	e014      	b.n	8003724 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7fe faf7 	bl	8001cec <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fe faf3 	bl	8001cec <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0a6      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ee      	bne.n	8003702 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b52      	ldr	r3, [pc, #328]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a51      	ldr	r2, [pc, #324]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8092 	beq.w	8003864 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d05c      	beq.n	8003806 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d141      	bne.n	80037d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b48      	ldr	r3, [pc, #288]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fac7 	bl	8001cec <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fe fac3 	bl	8001cec <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e078      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	019b      	lsls	r3, r3, #6
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	4933      	ldr	r1, [pc, #204]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037aa:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fa9c 	bl	8001cec <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe fa98 	bl	8001cec <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e04d      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x41c>
 80037d6:	e045      	b.n	8003864 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe fa85 	bl	8001cec <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fe fa81 	bl	8001cec <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e036      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x44a>
 8003804:	e02e      	b.n	8003864 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e029      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	429a      	cmp	r2, r3
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d115      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003840:	4293      	cmp	r3, r2
 8003842:	d10d      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40007000 	.word	0x40007000
 8003874:	40023800 	.word	0x40023800
 8003878:	42470060 	.word	0x42470060

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe f9be 	bl	8001cec <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe f9ba 	bl	8001cec <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f91e 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	080060c8 	.word	0x080060c8
 8003a40:	20000024 	.word	0x20000024
 8003a44:	20000028 	.word	0x20000028

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	2300      	movs	r3, #0
 8003a58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5e:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d007      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x32>
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x38>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 808d 	bne.w	8003b8e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a76:	60bb      	str	r3, [r7, #8]
       break;
 8003a78:	e08c      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a7c:	60bb      	str	r3, [r7, #8]
      break;
 8003a7e:	e089      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8a:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d023      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	f04f 0400 	mov.w	r4, #0
 8003aa0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	ea03 0501 	and.w	r5, r3, r1
 8003aac:	ea04 0602 	and.w	r6, r4, r2
 8003ab0:	4a3d      	ldr	r2, [pc, #244]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ab2:	fb02 f106 	mul.w	r1, r2, r6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	fb02 f205 	mul.w	r2, r2, r5
 8003abc:	440a      	add	r2, r1
 8003abe:	493a      	ldr	r1, [pc, #232]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac0:	fba5 0101 	umull	r0, r1, r5, r1
 8003ac4:	1853      	adds	r3, r2, r1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f04f 0400 	mov.w	r4, #0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7fd f833 	bl	8000b3c <__aeabi_uldivmod>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e049      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	f04f 0400 	mov.w	r4, #0
 8003ae8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	ea03 0501 	and.w	r5, r3, r1
 8003af4:	ea04 0602 	and.w	r6, r4, r2
 8003af8:	4629      	mov	r1, r5
 8003afa:	4632      	mov	r2, r6
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	f04f 0400 	mov.w	r4, #0
 8003b04:	0154      	lsls	r4, r2, #5
 8003b06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b0a:	014b      	lsls	r3, r1, #5
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4622      	mov	r2, r4
 8003b10:	1b49      	subs	r1, r1, r5
 8003b12:	eb62 0206 	sbc.w	r2, r2, r6
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	f04f 0400 	mov.w	r4, #0
 8003b1e:	0194      	lsls	r4, r2, #6
 8003b20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b24:	018b      	lsls	r3, r1, #6
 8003b26:	1a5b      	subs	r3, r3, r1
 8003b28:	eb64 0402 	sbc.w	r4, r4, r2
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	00e2      	lsls	r2, r4, #3
 8003b36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b3a:	00d9      	lsls	r1, r3, #3
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4614      	mov	r4, r2
 8003b40:	195b      	adds	r3, r3, r5
 8003b42:	eb44 0406 	adc.w	r4, r4, r6
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	02a2      	lsls	r2, r4, #10
 8003b50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b54:	0299      	lsls	r1, r3, #10
 8003b56:	460b      	mov	r3, r1
 8003b58:	4614      	mov	r4, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f04f 0400 	mov.w	r4, #0
 8003b64:	461a      	mov	r2, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	f7fc ffe8 	bl	8000b3c <__aeabi_uldivmod>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	60bb      	str	r3, [r7, #8]
      break;
 8003b8c:	e002      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b90:	60bb      	str	r3, [r7, #8]
      break;
 8003b92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b94:	68bb      	ldr	r3, [r7, #8]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	017d7840 	.word	0x017d7840

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000024 	.word	0x20000024

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4601      	mov	r1, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4a03      	ldr	r2, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5cd3      	ldrb	r3, [r2, r3]
 8003bdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	080060d8 	.word	0x080060d8

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffdc 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf4:	4601      	mov	r1, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0b5b      	lsrs	r3, r3, #13
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4a03      	ldr	r2, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	080060d8 	.word	0x080060d8

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e01d      	b.n	8003c62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fe8a 	bl	8001954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 fa1e 	bl	8004094 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d007      	beq.n	8003c9c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d122      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d11b      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0202 	mvn.w	r2, #2
 8003cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f9af 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003cfa:	e005      	b.n	8003d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f9a1 	bl	8004044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f9b2 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d122      	bne.n	8003d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d11b      	bne.n	8003d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0204 	mvn.w	r2, #4
 8003d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f985 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003d4e:	e005      	b.n	8003d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f977 	bl	8004044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f988 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d122      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d11b      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f06f 0208 	mvn.w	r2, #8
 8003d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f95b 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003da2:	e005      	b.n	8003db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f94d 	bl	8004044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f95e 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d122      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d11b      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f06f 0210 	mvn.w	r2, #16
 8003dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2208      	movs	r2, #8
 8003de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f931 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003df6:	e005      	b.n	8003e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f923 	bl	8004044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f934 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10e      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d107      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f06f 0201 	mvn.w	r2, #1
 8003e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8fd 	bl	8004030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d10e      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d107      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fad9 	bl	8004414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d10e      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d107      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f8f9 	bl	8004080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d10e      	bne.n	8003eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0220 	mvn.w	r2, #32
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 faa3 	bl	8004400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_ConfigClockSource+0x18>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0a6      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x166>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ef8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f00:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d067      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x120>
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d80b      	bhi.n	8003f2e <HAL_TIM_ConfigClockSource+0x6c>
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d073      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x140>
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d802      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x62>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d06f      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f22:	e078      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d06c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x140>
 8003f28:	2b30      	cmp	r3, #48	; 0x30
 8003f2a:	d06a      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f2c:	e073      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f2e:	2b70      	cmp	r3, #112	; 0x70
 8003f30:	d00d      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x8c>
 8003f32:	2b70      	cmp	r3, #112	; 0x70
 8003f34:	d804      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x7e>
 8003f36:	2b50      	cmp	r3, #80	; 0x50
 8003f38:	d033      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0xe0>
 8003f3a:	2b60      	cmp	r3, #96	; 0x60
 8003f3c:	d041      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f3e:	e06a      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d066      	beq.n	8004014 <HAL_TIM_ConfigClockSource+0x152>
 8003f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4a:	d017      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f4c:	e063      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f000 f9b3 	bl	80042c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	609a      	str	r2, [r3, #8]
      break;
 8003f7a:	e04c      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f000 f99c 	bl	80042c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e039      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 f910 	bl	80041d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2150      	movs	r1, #80	; 0x50
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f969 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e029      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 f92f 	bl	8004232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2160      	movs	r1, #96	; 0x60
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f959 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e019      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 f8f0 	bl	80041d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f949 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8004000:	e009      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f000 f940 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8004012:	e000      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004014:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <TIM_Base_SetConfig+0x114>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <TIM_Base_SetConfig+0x40>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b2:	d00f      	beq.n	80040d4 <TIM_Base_SetConfig+0x40>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a3d      	ldr	r2, [pc, #244]	; (80041ac <TIM_Base_SetConfig+0x118>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00b      	beq.n	80040d4 <TIM_Base_SetConfig+0x40>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a3c      	ldr	r2, [pc, #240]	; (80041b0 <TIM_Base_SetConfig+0x11c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <TIM_Base_SetConfig+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a3b      	ldr	r2, [pc, #236]	; (80041b4 <TIM_Base_SetConfig+0x120>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a3a      	ldr	r2, [pc, #232]	; (80041b8 <TIM_Base_SetConfig+0x124>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d108      	bne.n	80040e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2f      	ldr	r2, [pc, #188]	; (80041a8 <TIM_Base_SetConfig+0x114>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02b      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d027      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2c      	ldr	r2, [pc, #176]	; (80041ac <TIM_Base_SetConfig+0x118>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d023      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2b      	ldr	r2, [pc, #172]	; (80041b0 <TIM_Base_SetConfig+0x11c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <TIM_Base_SetConfig+0x120>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01b      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <TIM_Base_SetConfig+0x124>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d017      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a28      	ldr	r2, [pc, #160]	; (80041bc <TIM_Base_SetConfig+0x128>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <TIM_Base_SetConfig+0x12c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <TIM_Base_SetConfig+0x130>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <TIM_Base_SetConfig+0x134>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a24      	ldr	r2, [pc, #144]	; (80041cc <TIM_Base_SetConfig+0x138>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <TIM_Base_SetConfig+0x13c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <TIM_Base_SetConfig+0x114>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0xf8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <TIM_Base_SetConfig+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d103      	bne.n	8004194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	615a      	str	r2, [r3, #20]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	40010400 	.word	0x40010400
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800
 80041c8:	40001800 	.word	0x40001800
 80041cc:	40001c00 	.word	0x40001c00
 80041d0:	40002000 	.word	0x40002000

080041d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0201 	bic.w	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 030a 	bic.w	r3, r3, #10
 8004210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0210 	bic.w	r2, r3, #16
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800425c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	031b      	lsls	r3, r3, #12
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800426e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f043 0307 	orr.w	r3, r3, #7
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	021a      	lsls	r2, r3, #8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800431c:	2302      	movs	r3, #2
 800431e:	e05a      	b.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d01d      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10c      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40010400 	.word	0x40010400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40001800 	.word	0x40001800

08004400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03f      	b.n	80044ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd faee 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa5f 	bl	8004930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b088      	sub	sp, #32
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	f040 8083 	bne.w	80045ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_UART_Transmit+0x2e>
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e07b      	b.n	80045ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Transmit+0x40>
 80044fe:	2302      	movs	r3, #2
 8004500:	e074      	b.n	80045ec <HAL_UART_Transmit+0x12a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2221      	movs	r2, #33	; 0x21
 8004514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004518:	f7fd fbe8 	bl	8001cec <HAL_GetTick>
 800451c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004532:	e042      	b.n	80045ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	d122      	bne.n	8004592 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f96c 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e042      	b.n	80045ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004578:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3302      	adds	r3, #2
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	e017      	b.n	80045ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3301      	adds	r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	e013      	b.n	80045ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	; 0x80
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f949 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e01f      	b.n	80045ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	60ba      	str	r2, [r7, #8]
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1b7      	bne.n	8004534 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f930 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e006      	b.n	80045ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	4613      	mov	r3, r2
 8004600:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b20      	cmp	r3, #32
 800460c:	d166      	bne.n	80046dc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_UART_Receive_DMA+0x26>
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e05f      	b.n	80046de <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_UART_Receive_DMA+0x38>
 8004628:	2302      	movs	r3, #2
 800462a:	e058      	b.n	80046de <HAL_UART_Receive_DMA+0xea>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2222      	movs	r2, #34	; 0x22
 800464a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <HAL_UART_Receive_DMA+0xf4>)
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	4a24      	ldr	r2, [pc, #144]	; (80046ec <HAL_UART_Receive_DMA+0xf8>)
 800465c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <HAL_UART_Receive_DMA+0xfc>)
 8004664:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	2200      	movs	r2, #0
 800466c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	f7fe f9b5 	bl	80029f4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	08004785 	.word	0x08004785
 80046f0:	080047a1 	.word	0x080047a1

080046f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11e      	bne.n	8004776 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800474c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7fc feb2 	bl	80014e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff ffae 	bl	80046f4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047bc:	2b80      	cmp	r3, #128	; 0x80
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b21      	cmp	r3, #33	; 0x21
 80047d2:	d108      	bne.n	80047e6 <UART_DMAError+0x46>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2200      	movs	r2, #0
 80047de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047e0:	68b8      	ldr	r0, [r7, #8]
 80047e2:	f000 f871 	bl	80048c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b22      	cmp	r3, #34	; 0x22
 8004806:	d108      	bne.n	800481a <UART_DMAError+0x7a>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004814:	68b8      	ldr	r0, [r7, #8]
 8004816:	f000 f86d 	bl	80048f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	f043 0210 	orr.w	r2, r3, #16
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f7ff ff6e 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004844:	e02c      	b.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d028      	beq.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x30>
 8004854:	f7fd fa4a 	bl	8001cec <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d21d      	bcs.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004872:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e00f      	b.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d0c3      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800490a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004972:	f023 030c 	bic.w	r3, r3, #12
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	430b      	orrs	r3, r1
 800497e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499e:	f040 818b 	bne.w	8004cb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4ac1      	ldr	r2, [pc, #772]	; (8004cac <UART_SetConfig+0x37c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d005      	beq.n	80049b8 <UART_SetConfig+0x88>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4abf      	ldr	r2, [pc, #764]	; (8004cb0 <UART_SetConfig+0x380>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f040 80bd 	bne.w	8004b32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7ff f918 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 80049bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	461d      	mov	r5, r3
 80049c2:	f04f 0600 	mov.w	r6, #0
 80049c6:	46a8      	mov	r8, r5
 80049c8:	46b1      	mov	r9, r6
 80049ca:	eb18 0308 	adds.w	r3, r8, r8
 80049ce:	eb49 0409 	adc.w	r4, r9, r9
 80049d2:	4698      	mov	r8, r3
 80049d4:	46a1      	mov	r9, r4
 80049d6:	eb18 0805 	adds.w	r8, r8, r5
 80049da:	eb49 0906 	adc.w	r9, r9, r6
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049f2:	4688      	mov	r8, r1
 80049f4:	4691      	mov	r9, r2
 80049f6:	eb18 0005 	adds.w	r0, r8, r5
 80049fa:	eb49 0106 	adc.w	r1, r9, r6
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	461d      	mov	r5, r3
 8004a04:	f04f 0600 	mov.w	r6, #0
 8004a08:	196b      	adds	r3, r5, r5
 8004a0a:	eb46 0406 	adc.w	r4, r6, r6
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4623      	mov	r3, r4
 8004a12:	f7fc f893 	bl	8000b3c <__aeabi_uldivmod>
 8004a16:	4603      	mov	r3, r0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4ba5      	ldr	r3, [pc, #660]	; (8004cb4 <UART_SetConfig+0x384>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	f04f 0600 	mov.w	r6, #0
 8004a30:	46a9      	mov	r9, r5
 8004a32:	46b2      	mov	sl, r6
 8004a34:	eb19 0309 	adds.w	r3, r9, r9
 8004a38:	eb4a 040a 	adc.w	r4, sl, sl
 8004a3c:	4699      	mov	r9, r3
 8004a3e:	46a2      	mov	sl, r4
 8004a40:	eb19 0905 	adds.w	r9, r9, r5
 8004a44:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a5c:	4689      	mov	r9, r1
 8004a5e:	4692      	mov	sl, r2
 8004a60:	eb19 0005 	adds.w	r0, r9, r5
 8004a64:	eb4a 0106 	adc.w	r1, sl, r6
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	461d      	mov	r5, r3
 8004a6e:	f04f 0600 	mov.w	r6, #0
 8004a72:	196b      	adds	r3, r5, r5
 8004a74:	eb46 0406 	adc.w	r4, r6, r6
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	f7fc f85e 	bl	8000b3c <__aeabi_uldivmod>
 8004a80:	4603      	mov	r3, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b8b      	ldr	r3, [pc, #556]	; (8004cb4 <UART_SetConfig+0x384>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	2164      	movs	r1, #100	; 0x64
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	3332      	adds	r3, #50	; 0x32
 8004a9a:	4a86      	ldr	r2, [pc, #536]	; (8004cb4 <UART_SetConfig+0x384>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aa8:	4498      	add	r8, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	461d      	mov	r5, r3
 8004aae:	f04f 0600 	mov.w	r6, #0
 8004ab2:	46a9      	mov	r9, r5
 8004ab4:	46b2      	mov	sl, r6
 8004ab6:	eb19 0309 	adds.w	r3, r9, r9
 8004aba:	eb4a 040a 	adc.w	r4, sl, sl
 8004abe:	4699      	mov	r9, r3
 8004ac0:	46a2      	mov	sl, r4
 8004ac2:	eb19 0905 	adds.w	r9, r9, r5
 8004ac6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004aca:	f04f 0100 	mov.w	r1, #0
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ad6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ada:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ade:	4689      	mov	r9, r1
 8004ae0:	4692      	mov	sl, r2
 8004ae2:	eb19 0005 	adds.w	r0, r9, r5
 8004ae6:	eb4a 0106 	adc.w	r1, sl, r6
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	461d      	mov	r5, r3
 8004af0:	f04f 0600 	mov.w	r6, #0
 8004af4:	196b      	adds	r3, r5, r5
 8004af6:	eb46 0406 	adc.w	r4, r6, r6
 8004afa:	461a      	mov	r2, r3
 8004afc:	4623      	mov	r3, r4
 8004afe:	f7fc f81d 	bl	8000b3c <__aeabi_uldivmod>
 8004b02:	4603      	mov	r3, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <UART_SetConfig+0x384>)
 8004b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2164      	movs	r1, #100	; 0x64
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	3332      	adds	r3, #50	; 0x32
 8004b1c:	4a65      	ldr	r2, [pc, #404]	; (8004cb4 <UART_SetConfig+0x384>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	f003 0207 	and.w	r2, r3, #7
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4442      	add	r2, r8
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	e26f      	b.n	8005012 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b32:	f7ff f847 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004b36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	f04f 0600 	mov.w	r6, #0
 8004b40:	46a8      	mov	r8, r5
 8004b42:	46b1      	mov	r9, r6
 8004b44:	eb18 0308 	adds.w	r3, r8, r8
 8004b48:	eb49 0409 	adc.w	r4, r9, r9
 8004b4c:	4698      	mov	r8, r3
 8004b4e:	46a1      	mov	r9, r4
 8004b50:	eb18 0805 	adds.w	r8, r8, r5
 8004b54:	eb49 0906 	adc.w	r9, r9, r6
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b6c:	4688      	mov	r8, r1
 8004b6e:	4691      	mov	r9, r2
 8004b70:	eb18 0005 	adds.w	r0, r8, r5
 8004b74:	eb49 0106 	adc.w	r1, r9, r6
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	461d      	mov	r5, r3
 8004b7e:	f04f 0600 	mov.w	r6, #0
 8004b82:	196b      	adds	r3, r5, r5
 8004b84:	eb46 0406 	adc.w	r4, r6, r6
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	f7fb ffd6 	bl	8000b3c <__aeabi_uldivmod>
 8004b90:	4603      	mov	r3, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	461a      	mov	r2, r3
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <UART_SetConfig+0x384>)
 8004b98:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	461d      	mov	r5, r3
 8004ba6:	f04f 0600 	mov.w	r6, #0
 8004baa:	46a9      	mov	r9, r5
 8004bac:	46b2      	mov	sl, r6
 8004bae:	eb19 0309 	adds.w	r3, r9, r9
 8004bb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb6:	4699      	mov	r9, r3
 8004bb8:	46a2      	mov	sl, r4
 8004bba:	eb19 0905 	adds.w	r9, r9, r5
 8004bbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd6:	4689      	mov	r9, r1
 8004bd8:	4692      	mov	sl, r2
 8004bda:	eb19 0005 	adds.w	r0, r9, r5
 8004bde:	eb4a 0106 	adc.w	r1, sl, r6
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	461d      	mov	r5, r3
 8004be8:	f04f 0600 	mov.w	r6, #0
 8004bec:	196b      	adds	r3, r5, r5
 8004bee:	eb46 0406 	adc.w	r4, r6, r6
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	f7fb ffa1 	bl	8000b3c <__aeabi_uldivmod>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <UART_SetConfig+0x384>)
 8004c02:	fba3 1302 	umull	r1, r3, r3, r2
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2164      	movs	r1, #100	; 0x64
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	3332      	adds	r3, #50	; 0x32
 8004c14:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <UART_SetConfig+0x384>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c22:	4498      	add	r8, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	461d      	mov	r5, r3
 8004c28:	f04f 0600 	mov.w	r6, #0
 8004c2c:	46a9      	mov	r9, r5
 8004c2e:	46b2      	mov	sl, r6
 8004c30:	eb19 0309 	adds.w	r3, r9, r9
 8004c34:	eb4a 040a 	adc.w	r4, sl, sl
 8004c38:	4699      	mov	r9, r3
 8004c3a:	46a2      	mov	sl, r4
 8004c3c:	eb19 0905 	adds.w	r9, r9, r5
 8004c40:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c58:	4689      	mov	r9, r1
 8004c5a:	4692      	mov	sl, r2
 8004c5c:	eb19 0005 	adds.w	r0, r9, r5
 8004c60:	eb4a 0106 	adc.w	r1, sl, r6
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	461d      	mov	r5, r3
 8004c6a:	f04f 0600 	mov.w	r6, #0
 8004c6e:	196b      	adds	r3, r5, r5
 8004c70:	eb46 0406 	adc.w	r4, r6, r6
 8004c74:	461a      	mov	r2, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	f7fb ff60 	bl	8000b3c <__aeabi_uldivmod>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	461a      	mov	r2, r3
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <UART_SetConfig+0x384>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	; 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	3332      	adds	r3, #50	; 0x32
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <UART_SetConfig+0x384>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 0207 	and.w	r2, r3, #7
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4442      	add	r2, r8
 8004ca8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004caa:	e1b2      	b.n	8005012 <UART_SetConfig+0x6e2>
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	40011400 	.word	0x40011400
 8004cb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4ad7      	ldr	r2, [pc, #860]	; (800501c <UART_SetConfig+0x6ec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d005      	beq.n	8004cce <UART_SetConfig+0x39e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4ad6      	ldr	r2, [pc, #856]	; (8005020 <UART_SetConfig+0x6f0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	f040 80d1 	bne.w	8004e70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cce:	f7fe ff8d 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8004cd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	469a      	mov	sl, r3
 8004cd8:	f04f 0b00 	mov.w	fp, #0
 8004cdc:	46d0      	mov	r8, sl
 8004cde:	46d9      	mov	r9, fp
 8004ce0:	eb18 0308 	adds.w	r3, r8, r8
 8004ce4:	eb49 0409 	adc.w	r4, r9, r9
 8004ce8:	4698      	mov	r8, r3
 8004cea:	46a1      	mov	r9, r4
 8004cec:	eb18 080a 	adds.w	r8, r8, sl
 8004cf0:	eb49 090b 	adc.w	r9, r9, fp
 8004cf4:	f04f 0100 	mov.w	r1, #0
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d08:	4688      	mov	r8, r1
 8004d0a:	4691      	mov	r9, r2
 8004d0c:	eb1a 0508 	adds.w	r5, sl, r8
 8004d10:	eb4b 0609 	adc.w	r6, fp, r9
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	f04f 0400 	mov.w	r4, #0
 8004d26:	0094      	lsls	r4, r2, #2
 8004d28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d2c:	008b      	lsls	r3, r1, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4623      	mov	r3, r4
 8004d32:	4628      	mov	r0, r5
 8004d34:	4631      	mov	r1, r6
 8004d36:	f7fb ff01 	bl	8000b3c <__aeabi_uldivmod>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4bb8      	ldr	r3, [pc, #736]	; (8005024 <UART_SetConfig+0x6f4>)
 8004d42:	fba3 2302 	umull	r2, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	469b      	mov	fp, r3
 8004d50:	f04f 0c00 	mov.w	ip, #0
 8004d54:	46d9      	mov	r9, fp
 8004d56:	46e2      	mov	sl, ip
 8004d58:	eb19 0309 	adds.w	r3, r9, r9
 8004d5c:	eb4a 040a 	adc.w	r4, sl, sl
 8004d60:	4699      	mov	r9, r3
 8004d62:	46a2      	mov	sl, r4
 8004d64:	eb19 090b 	adds.w	r9, r9, fp
 8004d68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d80:	4689      	mov	r9, r1
 8004d82:	4692      	mov	sl, r2
 8004d84:	eb1b 0509 	adds.w	r5, fp, r9
 8004d88:	eb4c 060a 	adc.w	r6, ip, sl
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4619      	mov	r1, r3
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	f04f 0400 	mov.w	r4, #0
 8004d9e:	0094      	lsls	r4, r2, #2
 8004da0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	461a      	mov	r2, r3
 8004da8:	4623      	mov	r3, r4
 8004daa:	4628      	mov	r0, r5
 8004dac:	4631      	mov	r1, r6
 8004dae:	f7fb fec5 	bl	8000b3c <__aeabi_uldivmod>
 8004db2:	4603      	mov	r3, r0
 8004db4:	460c      	mov	r4, r1
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b9a      	ldr	r3, [pc, #616]	; (8005024 <UART_SetConfig+0x6f4>)
 8004dba:	fba3 1302 	umull	r1, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2164      	movs	r1, #100	; 0x64
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	3332      	adds	r3, #50	; 0x32
 8004dcc:	4a95      	ldr	r2, [pc, #596]	; (8005024 <UART_SetConfig+0x6f4>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd8:	4498      	add	r8, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	469b      	mov	fp, r3
 8004dde:	f04f 0c00 	mov.w	ip, #0
 8004de2:	46d9      	mov	r9, fp
 8004de4:	46e2      	mov	sl, ip
 8004de6:	eb19 0309 	adds.w	r3, r9, r9
 8004dea:	eb4a 040a 	adc.w	r4, sl, sl
 8004dee:	4699      	mov	r9, r3
 8004df0:	46a2      	mov	sl, r4
 8004df2:	eb19 090b 	adds.w	r9, r9, fp
 8004df6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e0e:	4689      	mov	r9, r1
 8004e10:	4692      	mov	sl, r2
 8004e12:	eb1b 0509 	adds.w	r5, fp, r9
 8004e16:	eb4c 060a 	adc.w	r6, ip, sl
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	0094      	lsls	r4, r2, #2
 8004e2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e32:	008b      	lsls	r3, r1, #2
 8004e34:	461a      	mov	r2, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	f7fb fe7e 	bl	8000b3c <__aeabi_uldivmod>
 8004e40:	4603      	mov	r3, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b77      	ldr	r3, [pc, #476]	; (8005024 <UART_SetConfig+0x6f4>)
 8004e48:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	2164      	movs	r1, #100	; 0x64
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	3332      	adds	r3, #50	; 0x32
 8004e5a:	4a72      	ldr	r2, [pc, #456]	; (8005024 <UART_SetConfig+0x6f4>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4442      	add	r2, r8
 8004e6c:	609a      	str	r2, [r3, #8]
 8004e6e:	e0d0      	b.n	8005012 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7fe fea8 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004e74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	469a      	mov	sl, r3
 8004e7a:	f04f 0b00 	mov.w	fp, #0
 8004e7e:	46d0      	mov	r8, sl
 8004e80:	46d9      	mov	r9, fp
 8004e82:	eb18 0308 	adds.w	r3, r8, r8
 8004e86:	eb49 0409 	adc.w	r4, r9, r9
 8004e8a:	4698      	mov	r8, r3
 8004e8c:	46a1      	mov	r9, r4
 8004e8e:	eb18 080a 	adds.w	r8, r8, sl
 8004e92:	eb49 090b 	adc.w	r9, r9, fp
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ea2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ea6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004eaa:	4688      	mov	r8, r1
 8004eac:	4691      	mov	r9, r2
 8004eae:	eb1a 0508 	adds.w	r5, sl, r8
 8004eb2:	eb4b 0609 	adc.w	r6, fp, r9
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	f04f 0400 	mov.w	r4, #0
 8004ec8:	0094      	lsls	r4, r2, #2
 8004eca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ece:	008b      	lsls	r3, r1, #2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	f7fb fe30 	bl	8000b3c <__aeabi_uldivmod>
 8004edc:	4603      	mov	r3, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4b50      	ldr	r3, [pc, #320]	; (8005024 <UART_SetConfig+0x6f4>)
 8004ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	469b      	mov	fp, r3
 8004ef2:	f04f 0c00 	mov.w	ip, #0
 8004ef6:	46d9      	mov	r9, fp
 8004ef8:	46e2      	mov	sl, ip
 8004efa:	eb19 0309 	adds.w	r3, r9, r9
 8004efe:	eb4a 040a 	adc.w	r4, sl, sl
 8004f02:	4699      	mov	r9, r3
 8004f04:	46a2      	mov	sl, r4
 8004f06:	eb19 090b 	adds.w	r9, r9, fp
 8004f0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f22:	4689      	mov	r9, r1
 8004f24:	4692      	mov	sl, r2
 8004f26:	eb1b 0509 	adds.w	r5, fp, r9
 8004f2a:	eb4c 060a 	adc.w	r6, ip, sl
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4619      	mov	r1, r3
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	f04f 0400 	mov.w	r4, #0
 8004f40:	0094      	lsls	r4, r2, #2
 8004f42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f46:	008b      	lsls	r3, r1, #2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	4631      	mov	r1, r6
 8004f50:	f7fb fdf4 	bl	8000b3c <__aeabi_uldivmod>
 8004f54:	4603      	mov	r3, r0
 8004f56:	460c      	mov	r4, r1
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b32      	ldr	r3, [pc, #200]	; (8005024 <UART_SetConfig+0x6f4>)
 8004f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2164      	movs	r1, #100	; 0x64
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	3332      	adds	r3, #50	; 0x32
 8004f6e:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <UART_SetConfig+0x6f4>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f7a:	4498      	add	r8, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	469b      	mov	fp, r3
 8004f80:	f04f 0c00 	mov.w	ip, #0
 8004f84:	46d9      	mov	r9, fp
 8004f86:	46e2      	mov	sl, ip
 8004f88:	eb19 0309 	adds.w	r3, r9, r9
 8004f8c:	eb4a 040a 	adc.w	r4, sl, sl
 8004f90:	4699      	mov	r9, r3
 8004f92:	46a2      	mov	sl, r4
 8004f94:	eb19 090b 	adds.w	r9, r9, fp
 8004f98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fb0:	4689      	mov	r9, r1
 8004fb2:	4692      	mov	sl, r2
 8004fb4:	eb1b 0509 	adds.w	r5, fp, r9
 8004fb8:	eb4c 060a 	adc.w	r6, ip, sl
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	0094      	lsls	r4, r2, #2
 8004fd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fd4:	008b      	lsls	r3, r1, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4623      	mov	r3, r4
 8004fda:	4628      	mov	r0, r5
 8004fdc:	4631      	mov	r1, r6
 8004fde:	f7fb fdad 	bl	8000b3c <__aeabi_uldivmod>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <UART_SetConfig+0x6f4>)
 8004fea:	fba3 1302 	umull	r1, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2164      	movs	r1, #100	; 0x64
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	3332      	adds	r3, #50	; 0x32
 8004ffc:	4a09      	ldr	r2, [pc, #36]	; (8005024 <UART_SetConfig+0x6f4>)
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	f003 020f 	and.w	r2, r3, #15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4442      	add	r2, r8
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	e7ff      	b.n	8005012 <UART_SetConfig+0x6e2>
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501c:	40011000 	.word	0x40011000
 8005020:	40011400 	.word	0x40011400
 8005024:	51eb851f 	.word	0x51eb851f

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4e0d      	ldr	r6, [pc, #52]	; (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 800502e:	1ba4      	subs	r4, r4, r6
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2500      	movs	r5, #0
 8005034:	42a5      	cmp	r5, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4e0b      	ldr	r6, [pc, #44]	; (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	; (800506c <__libc_init_array+0x44>)
 800503c:	f001 f832 	bl	80060a4 <_init>
 8005040:	1ba4      	subs	r4, r4, r6
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2500      	movs	r5, #0
 8005046:	42a5      	cmp	r5, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005050:	4798      	blx	r3
 8005052:	3501      	adds	r5, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800505a:	4798      	blx	r3
 800505c:	3501      	adds	r5, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	080062c8 	.word	0x080062c8
 8005064:	080062c8 	.word	0x080062c8
 8005068:	080062c8 	.word	0x080062c8
 800506c:	080062cc 	.word	0x080062cc

08005070 <memset>:
 8005070:	4402      	add	r2, r0
 8005072:	4603      	mov	r3, r0
 8005074:	4293      	cmp	r3, r2
 8005076:	d100      	bne.n	800507a <memset+0xa>
 8005078:	4770      	bx	lr
 800507a:	f803 1b01 	strb.w	r1, [r3], #1
 800507e:	e7f9      	b.n	8005074 <memset+0x4>

08005080 <sin>:
 8005080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005082:	ec51 0b10 	vmov	r0, r1, d0
 8005086:	4a20      	ldr	r2, [pc, #128]	; (8005108 <sin+0x88>)
 8005088:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800508c:	4293      	cmp	r3, r2
 800508e:	dc07      	bgt.n	80050a0 <sin+0x20>
 8005090:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005100 <sin+0x80>
 8005094:	2000      	movs	r0, #0
 8005096:	f000 fe37 	bl	8005d08 <__kernel_sin>
 800509a:	ec51 0b10 	vmov	r0, r1, d0
 800509e:	e007      	b.n	80050b0 <sin+0x30>
 80050a0:	4a1a      	ldr	r2, [pc, #104]	; (800510c <sin+0x8c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	dd09      	ble.n	80050ba <sin+0x3a>
 80050a6:	ee10 2a10 	vmov	r2, s0
 80050aa:	460b      	mov	r3, r1
 80050ac:	f7fb f8ac 	bl	8000208 <__aeabi_dsub>
 80050b0:	ec41 0b10 	vmov	d0, r0, r1
 80050b4:	b005      	add	sp, #20
 80050b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80050ba:	4668      	mov	r0, sp
 80050bc:	f000 f828 	bl	8005110 <__ieee754_rem_pio2>
 80050c0:	f000 0003 	and.w	r0, r0, #3
 80050c4:	2801      	cmp	r0, #1
 80050c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80050ca:	ed9d 0b00 	vldr	d0, [sp]
 80050ce:	d004      	beq.n	80050da <sin+0x5a>
 80050d0:	2802      	cmp	r0, #2
 80050d2:	d005      	beq.n	80050e0 <sin+0x60>
 80050d4:	b970      	cbnz	r0, 80050f4 <sin+0x74>
 80050d6:	2001      	movs	r0, #1
 80050d8:	e7dd      	b.n	8005096 <sin+0x16>
 80050da:	f000 fa0d 	bl	80054f8 <__kernel_cos>
 80050de:	e7dc      	b.n	800509a <sin+0x1a>
 80050e0:	2001      	movs	r0, #1
 80050e2:	f000 fe11 	bl	8005d08 <__kernel_sin>
 80050e6:	ec53 2b10 	vmov	r2, r3, d0
 80050ea:	ee10 0a10 	vmov	r0, s0
 80050ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80050f2:	e7dd      	b.n	80050b0 <sin+0x30>
 80050f4:	f000 fa00 	bl	80054f8 <__kernel_cos>
 80050f8:	e7f5      	b.n	80050e6 <sin+0x66>
 80050fa:	bf00      	nop
 80050fc:	f3af 8000 	nop.w
	...
 8005108:	3fe921fb 	.word	0x3fe921fb
 800510c:	7fefffff 	.word	0x7fefffff

08005110 <__ieee754_rem_pio2>:
 8005110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	ec57 6b10 	vmov	r6, r7, d0
 8005118:	4bc3      	ldr	r3, [pc, #780]	; (8005428 <__ieee754_rem_pio2+0x318>)
 800511a:	b08d      	sub	sp, #52	; 0x34
 800511c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005120:	4598      	cmp	r8, r3
 8005122:	4604      	mov	r4, r0
 8005124:	9704      	str	r7, [sp, #16]
 8005126:	dc07      	bgt.n	8005138 <__ieee754_rem_pio2+0x28>
 8005128:	2200      	movs	r2, #0
 800512a:	2300      	movs	r3, #0
 800512c:	ed84 0b00 	vstr	d0, [r4]
 8005130:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005134:	2500      	movs	r5, #0
 8005136:	e027      	b.n	8005188 <__ieee754_rem_pio2+0x78>
 8005138:	4bbc      	ldr	r3, [pc, #752]	; (800542c <__ieee754_rem_pio2+0x31c>)
 800513a:	4598      	cmp	r8, r3
 800513c:	dc75      	bgt.n	800522a <__ieee754_rem_pio2+0x11a>
 800513e:	9b04      	ldr	r3, [sp, #16]
 8005140:	4dbb      	ldr	r5, [pc, #748]	; (8005430 <__ieee754_rem_pio2+0x320>)
 8005142:	2b00      	cmp	r3, #0
 8005144:	ee10 0a10 	vmov	r0, s0
 8005148:	a3a9      	add	r3, pc, #676	; (adr r3, 80053f0 <__ieee754_rem_pio2+0x2e0>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	4639      	mov	r1, r7
 8005150:	dd36      	ble.n	80051c0 <__ieee754_rem_pio2+0xb0>
 8005152:	f7fb f859 	bl	8000208 <__aeabi_dsub>
 8005156:	45a8      	cmp	r8, r5
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
 800515c:	d018      	beq.n	8005190 <__ieee754_rem_pio2+0x80>
 800515e:	a3a6      	add	r3, pc, #664	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x2e8>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7fb f850 	bl	8000208 <__aeabi_dsub>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	e9c4 2300 	strd	r2, r3, [r4]
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb f848 	bl	8000208 <__aeabi_dsub>
 8005178:	a39f      	add	r3, pc, #636	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x2e8>)
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f7fb f843 	bl	8000208 <__aeabi_dsub>
 8005182:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005186:	2501      	movs	r5, #1
 8005188:	4628      	mov	r0, r5
 800518a:	b00d      	add	sp, #52	; 0x34
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	a39b      	add	r3, pc, #620	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2f0>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb f837 	bl	8000208 <__aeabi_dsub>
 800519a:	a39b      	add	r3, pc, #620	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f8>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	4606      	mov	r6, r0
 80051a2:	460f      	mov	r7, r1
 80051a4:	f7fb f830 	bl	8000208 <__aeabi_dsub>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	e9c4 2300 	strd	r2, r3, [r4]
 80051b0:	4630      	mov	r0, r6
 80051b2:	4639      	mov	r1, r7
 80051b4:	f7fb f828 	bl	8000208 <__aeabi_dsub>
 80051b8:	a393      	add	r3, pc, #588	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f8>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	e7de      	b.n	800517e <__ieee754_rem_pio2+0x6e>
 80051c0:	f7fb f824 	bl	800020c <__adddf3>
 80051c4:	45a8      	cmp	r8, r5
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	d016      	beq.n	80051fa <__ieee754_rem_pio2+0xea>
 80051cc:	a38a      	add	r3, pc, #552	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x2e8>)
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f7fb f81b 	bl	800020c <__adddf3>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	e9c4 2300 	strd	r2, r3, [r4]
 80051de:	4630      	mov	r0, r6
 80051e0:	4639      	mov	r1, r7
 80051e2:	f7fb f811 	bl	8000208 <__aeabi_dsub>
 80051e6:	a384      	add	r3, pc, #528	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x2e8>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb f80e 	bl	800020c <__adddf3>
 80051f0:	f04f 35ff 	mov.w	r5, #4294967295
 80051f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051f8:	e7c6      	b.n	8005188 <__ieee754_rem_pio2+0x78>
 80051fa:	a381      	add	r3, pc, #516	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2f0>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f7fb f804 	bl	800020c <__adddf3>
 8005204:	a380      	add	r3, pc, #512	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f8>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	4606      	mov	r6, r0
 800520c:	460f      	mov	r7, r1
 800520e:	f7fa fffd 	bl	800020c <__adddf3>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	e9c4 2300 	strd	r2, r3, [r4]
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fa fff3 	bl	8000208 <__aeabi_dsub>
 8005222:	a379      	add	r3, pc, #484	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f8>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	e7e0      	b.n	80051ec <__ieee754_rem_pio2+0xdc>
 800522a:	4b82      	ldr	r3, [pc, #520]	; (8005434 <__ieee754_rem_pio2+0x324>)
 800522c:	4598      	cmp	r8, r3
 800522e:	f300 80d0 	bgt.w	80053d2 <__ieee754_rem_pio2+0x2c2>
 8005232:	f000 fe23 	bl	8005e7c <fabs>
 8005236:	ec57 6b10 	vmov	r6, r7, d0
 800523a:	ee10 0a10 	vmov	r0, s0
 800523e:	a374      	add	r3, pc, #464	; (adr r3, 8005410 <__ieee754_rem_pio2+0x300>)
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	4639      	mov	r1, r7
 8005246:	f7fb f997 	bl	8000578 <__aeabi_dmul>
 800524a:	2200      	movs	r2, #0
 800524c:	4b7a      	ldr	r3, [pc, #488]	; (8005438 <__ieee754_rem_pio2+0x328>)
 800524e:	f7fa ffdd 	bl	800020c <__adddf3>
 8005252:	f7fb fc2b 	bl	8000aac <__aeabi_d2iz>
 8005256:	4605      	mov	r5, r0
 8005258:	f7fb f924 	bl	80004a4 <__aeabi_i2d>
 800525c:	a364      	add	r3, pc, #400	; (adr r3, 80053f0 <__ieee754_rem_pio2+0x2e0>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005266:	f7fb f987 	bl	8000578 <__aeabi_dmul>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	f7fa ffc9 	bl	8000208 <__aeabi_dsub>
 8005276:	a360      	add	r3, pc, #384	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x2e8>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	4682      	mov	sl, r0
 800527e:	468b      	mov	fp, r1
 8005280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005284:	f7fb f978 	bl	8000578 <__aeabi_dmul>
 8005288:	2d1f      	cmp	r5, #31
 800528a:	4606      	mov	r6, r0
 800528c:	460f      	mov	r7, r1
 800528e:	dc0c      	bgt.n	80052aa <__ieee754_rem_pio2+0x19a>
 8005290:	1e6a      	subs	r2, r5, #1
 8005292:	4b6a      	ldr	r3, [pc, #424]	; (800543c <__ieee754_rem_pio2+0x32c>)
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	4543      	cmp	r3, r8
 800529a:	d006      	beq.n	80052aa <__ieee754_rem_pio2+0x19a>
 800529c:	4632      	mov	r2, r6
 800529e:	463b      	mov	r3, r7
 80052a0:	4650      	mov	r0, sl
 80052a2:	4659      	mov	r1, fp
 80052a4:	f7fa ffb0 	bl	8000208 <__aeabi_dsub>
 80052a8:	e00e      	b.n	80052c8 <__ieee754_rem_pio2+0x1b8>
 80052aa:	4632      	mov	r2, r6
 80052ac:	463b      	mov	r3, r7
 80052ae:	4650      	mov	r0, sl
 80052b0:	4659      	mov	r1, fp
 80052b2:	f7fa ffa9 	bl	8000208 <__aeabi_dsub>
 80052b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	9a05      	ldr	r2, [sp, #20]
 80052be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	dc02      	bgt.n	80052ce <__ieee754_rem_pio2+0x1be>
 80052c8:	e9c4 0100 	strd	r0, r1, [r4]
 80052cc:	e039      	b.n	8005342 <__ieee754_rem_pio2+0x232>
 80052ce:	a34c      	add	r3, pc, #304	; (adr r3, 8005400 <__ieee754_rem_pio2+0x2f0>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d8:	f7fb f94e 	bl	8000578 <__aeabi_dmul>
 80052dc:	4606      	mov	r6, r0
 80052de:	460f      	mov	r7, r1
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4650      	mov	r0, sl
 80052e6:	4659      	mov	r1, fp
 80052e8:	f7fa ff8e 	bl	8000208 <__aeabi_dsub>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4680      	mov	r8, r0
 80052f2:	4689      	mov	r9, r1
 80052f4:	4650      	mov	r0, sl
 80052f6:	4659      	mov	r1, fp
 80052f8:	f7fa ff86 	bl	8000208 <__aeabi_dsub>
 80052fc:	4632      	mov	r2, r6
 80052fe:	463b      	mov	r3, r7
 8005300:	f7fa ff82 	bl	8000208 <__aeabi_dsub>
 8005304:	a340      	add	r3, pc, #256	; (adr r3, 8005408 <__ieee754_rem_pio2+0x2f8>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	4606      	mov	r6, r0
 800530c:	460f      	mov	r7, r1
 800530e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005312:	f7fb f931 	bl	8000578 <__aeabi_dmul>
 8005316:	4632      	mov	r2, r6
 8005318:	463b      	mov	r3, r7
 800531a:	f7fa ff75 	bl	8000208 <__aeabi_dsub>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4606      	mov	r6, r0
 8005324:	460f      	mov	r7, r1
 8005326:	4640      	mov	r0, r8
 8005328:	4649      	mov	r1, r9
 800532a:	f7fa ff6d 	bl	8000208 <__aeabi_dsub>
 800532e:	9a05      	ldr	r2, [sp, #20]
 8005330:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b31      	cmp	r3, #49	; 0x31
 8005338:	dc20      	bgt.n	800537c <__ieee754_rem_pio2+0x26c>
 800533a:	e9c4 0100 	strd	r0, r1, [r4]
 800533e:	46c2      	mov	sl, r8
 8005340:	46cb      	mov	fp, r9
 8005342:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005346:	4650      	mov	r0, sl
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	4659      	mov	r1, fp
 800534e:	f7fa ff5b 	bl	8000208 <__aeabi_dsub>
 8005352:	463b      	mov	r3, r7
 8005354:	4632      	mov	r2, r6
 8005356:	f7fa ff57 	bl	8000208 <__aeabi_dsub>
 800535a:	9b04      	ldr	r3, [sp, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005362:	f6bf af11 	bge.w	8005188 <__ieee754_rem_pio2+0x78>
 8005366:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800536a:	6063      	str	r3, [r4, #4]
 800536c:	f8c4 8000 	str.w	r8, [r4]
 8005370:	60a0      	str	r0, [r4, #8]
 8005372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005376:	60e3      	str	r3, [r4, #12]
 8005378:	426d      	negs	r5, r5
 800537a:	e705      	b.n	8005188 <__ieee754_rem_pio2+0x78>
 800537c:	a326      	add	r3, pc, #152	; (adr r3, 8005418 <__ieee754_rem_pio2+0x308>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005386:	f7fb f8f7 	bl	8000578 <__aeabi_dmul>
 800538a:	4606      	mov	r6, r0
 800538c:	460f      	mov	r7, r1
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	f7fa ff37 	bl	8000208 <__aeabi_dsub>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4682      	mov	sl, r0
 80053a0:	468b      	mov	fp, r1
 80053a2:	4640      	mov	r0, r8
 80053a4:	4649      	mov	r1, r9
 80053a6:	f7fa ff2f 	bl	8000208 <__aeabi_dsub>
 80053aa:	4632      	mov	r2, r6
 80053ac:	463b      	mov	r3, r7
 80053ae:	f7fa ff2b 	bl	8000208 <__aeabi_dsub>
 80053b2:	a31b      	add	r3, pc, #108	; (adr r3, 8005420 <__ieee754_rem_pio2+0x310>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	4606      	mov	r6, r0
 80053ba:	460f      	mov	r7, r1
 80053bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c0:	f7fb f8da 	bl	8000578 <__aeabi_dmul>
 80053c4:	4632      	mov	r2, r6
 80053c6:	463b      	mov	r3, r7
 80053c8:	f7fa ff1e 	bl	8000208 <__aeabi_dsub>
 80053cc:	4606      	mov	r6, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	e764      	b.n	800529c <__ieee754_rem_pio2+0x18c>
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <__ieee754_rem_pio2+0x330>)
 80053d4:	4598      	cmp	r8, r3
 80053d6:	dd35      	ble.n	8005444 <__ieee754_rem_pio2+0x334>
 80053d8:	ee10 2a10 	vmov	r2, s0
 80053dc:	463b      	mov	r3, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fa ff11 	bl	8000208 <__aeabi_dsub>
 80053e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053ea:	e9c4 0100 	strd	r0, r1, [r4]
 80053ee:	e6a1      	b.n	8005134 <__ieee754_rem_pio2+0x24>
 80053f0:	54400000 	.word	0x54400000
 80053f4:	3ff921fb 	.word	0x3ff921fb
 80053f8:	1a626331 	.word	0x1a626331
 80053fc:	3dd0b461 	.word	0x3dd0b461
 8005400:	1a600000 	.word	0x1a600000
 8005404:	3dd0b461 	.word	0x3dd0b461
 8005408:	2e037073 	.word	0x2e037073
 800540c:	3ba3198a 	.word	0x3ba3198a
 8005410:	6dc9c883 	.word	0x6dc9c883
 8005414:	3fe45f30 	.word	0x3fe45f30
 8005418:	2e000000 	.word	0x2e000000
 800541c:	3ba3198a 	.word	0x3ba3198a
 8005420:	252049c1 	.word	0x252049c1
 8005424:	397b839a 	.word	0x397b839a
 8005428:	3fe921fb 	.word	0x3fe921fb
 800542c:	4002d97b 	.word	0x4002d97b
 8005430:	3ff921fb 	.word	0x3ff921fb
 8005434:	413921fb 	.word	0x413921fb
 8005438:	3fe00000 	.word	0x3fe00000
 800543c:	080060e8 	.word	0x080060e8
 8005440:	7fefffff 	.word	0x7fefffff
 8005444:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005448:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800544c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005450:	4630      	mov	r0, r6
 8005452:	460f      	mov	r7, r1
 8005454:	f7fb fb2a 	bl	8000aac <__aeabi_d2iz>
 8005458:	f7fb f824 	bl	80004a4 <__aeabi_i2d>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4630      	mov	r0, r6
 8005462:	4639      	mov	r1, r7
 8005464:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005468:	f7fa fece 	bl	8000208 <__aeabi_dsub>
 800546c:	2200      	movs	r2, #0
 800546e:	4b1f      	ldr	r3, [pc, #124]	; (80054ec <__ieee754_rem_pio2+0x3dc>)
 8005470:	f7fb f882 	bl	8000578 <__aeabi_dmul>
 8005474:	460f      	mov	r7, r1
 8005476:	4606      	mov	r6, r0
 8005478:	f7fb fb18 	bl	8000aac <__aeabi_d2iz>
 800547c:	f7fb f812 	bl	80004a4 <__aeabi_i2d>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4630      	mov	r0, r6
 8005486:	4639      	mov	r1, r7
 8005488:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800548c:	f7fa febc 	bl	8000208 <__aeabi_dsub>
 8005490:	2200      	movs	r2, #0
 8005492:	4b16      	ldr	r3, [pc, #88]	; (80054ec <__ieee754_rem_pio2+0x3dc>)
 8005494:	f7fb f870 	bl	8000578 <__aeabi_dmul>
 8005498:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800549c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80054a0:	f04f 0803 	mov.w	r8, #3
 80054a4:	2600      	movs	r6, #0
 80054a6:	2700      	movs	r7, #0
 80054a8:	4632      	mov	r2, r6
 80054aa:	463b      	mov	r3, r7
 80054ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80054b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80054b4:	f7fb fac8 	bl	8000a48 <__aeabi_dcmpeq>
 80054b8:	b9b0      	cbnz	r0, 80054e8 <__ieee754_rem_pio2+0x3d8>
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <__ieee754_rem_pio2+0x3e0>)
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	2302      	movs	r3, #2
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	462a      	mov	r2, r5
 80054c4:	4643      	mov	r3, r8
 80054c6:	4621      	mov	r1, r4
 80054c8:	a806      	add	r0, sp, #24
 80054ca:	f000 f8dd 	bl	8005688 <__kernel_rem_pio2>
 80054ce:	9b04      	ldr	r3, [sp, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	4605      	mov	r5, r0
 80054d4:	f6bf ae58 	bge.w	8005188 <__ieee754_rem_pio2+0x78>
 80054d8:	6863      	ldr	r3, [r4, #4]
 80054da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80054de:	6063      	str	r3, [r4, #4]
 80054e0:	68e3      	ldr	r3, [r4, #12]
 80054e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80054e6:	e746      	b.n	8005376 <__ieee754_rem_pio2+0x266>
 80054e8:	46d0      	mov	r8, sl
 80054ea:	e7dd      	b.n	80054a8 <__ieee754_rem_pio2+0x398>
 80054ec:	41700000 	.word	0x41700000
 80054f0:	08006168 	.word	0x08006168
 80054f4:	00000000 	.word	0x00000000

080054f8 <__kernel_cos>:
 80054f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	ec59 8b10 	vmov	r8, r9, d0
 8005500:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005504:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005508:	ed2d 8b02 	vpush	{d8}
 800550c:	eeb0 8a41 	vmov.f32	s16, s2
 8005510:	eef0 8a61 	vmov.f32	s17, s3
 8005514:	da07      	bge.n	8005526 <__kernel_cos+0x2e>
 8005516:	ee10 0a10 	vmov	r0, s0
 800551a:	4649      	mov	r1, r9
 800551c:	f7fb fac6 	bl	8000aac <__aeabi_d2iz>
 8005520:	2800      	cmp	r0, #0
 8005522:	f000 8089 	beq.w	8005638 <__kernel_cos+0x140>
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	4640      	mov	r0, r8
 800552c:	4649      	mov	r1, r9
 800552e:	f7fb f823 	bl	8000578 <__aeabi_dmul>
 8005532:	2200      	movs	r2, #0
 8005534:	4b4e      	ldr	r3, [pc, #312]	; (8005670 <__kernel_cos+0x178>)
 8005536:	4604      	mov	r4, r0
 8005538:	460d      	mov	r5, r1
 800553a:	f7fb f81d 	bl	8000578 <__aeabi_dmul>
 800553e:	a340      	add	r3, pc, #256	; (adr r3, 8005640 <__kernel_cos+0x148>)
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	4682      	mov	sl, r0
 8005546:	468b      	mov	fp, r1
 8005548:	4620      	mov	r0, r4
 800554a:	4629      	mov	r1, r5
 800554c:	f7fb f814 	bl	8000578 <__aeabi_dmul>
 8005550:	a33d      	add	r3, pc, #244	; (adr r3, 8005648 <__kernel_cos+0x150>)
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f7fa fe59 	bl	800020c <__adddf3>
 800555a:	4622      	mov	r2, r4
 800555c:	462b      	mov	r3, r5
 800555e:	f7fb f80b 	bl	8000578 <__aeabi_dmul>
 8005562:	a33b      	add	r3, pc, #236	; (adr r3, 8005650 <__kernel_cos+0x158>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fa fe4e 	bl	8000208 <__aeabi_dsub>
 800556c:	4622      	mov	r2, r4
 800556e:	462b      	mov	r3, r5
 8005570:	f7fb f802 	bl	8000578 <__aeabi_dmul>
 8005574:	a338      	add	r3, pc, #224	; (adr r3, 8005658 <__kernel_cos+0x160>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f7fa fe47 	bl	800020c <__adddf3>
 800557e:	4622      	mov	r2, r4
 8005580:	462b      	mov	r3, r5
 8005582:	f7fa fff9 	bl	8000578 <__aeabi_dmul>
 8005586:	a336      	add	r3, pc, #216	; (adr r3, 8005660 <__kernel_cos+0x168>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa fe3c 	bl	8000208 <__aeabi_dsub>
 8005590:	4622      	mov	r2, r4
 8005592:	462b      	mov	r3, r5
 8005594:	f7fa fff0 	bl	8000578 <__aeabi_dmul>
 8005598:	a333      	add	r3, pc, #204	; (adr r3, 8005668 <__kernel_cos+0x170>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fa fe35 	bl	800020c <__adddf3>
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	f7fa ffe7 	bl	8000578 <__aeabi_dmul>
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f7fa ffe3 	bl	8000578 <__aeabi_dmul>
 80055b2:	ec53 2b18 	vmov	r2, r3, d8
 80055b6:	4604      	mov	r4, r0
 80055b8:	460d      	mov	r5, r1
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	f7fa ffdb 	bl	8000578 <__aeabi_dmul>
 80055c2:	460b      	mov	r3, r1
 80055c4:	4602      	mov	r2, r0
 80055c6:	4629      	mov	r1, r5
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7fa fe1d 	bl	8000208 <__aeabi_dsub>
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <__kernel_cos+0x17c>)
 80055d0:	429e      	cmp	r6, r3
 80055d2:	4680      	mov	r8, r0
 80055d4:	4689      	mov	r9, r1
 80055d6:	dc11      	bgt.n	80055fc <__kernel_cos+0x104>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4650      	mov	r0, sl
 80055de:	4659      	mov	r1, fp
 80055e0:	f7fa fe12 	bl	8000208 <__aeabi_dsub>
 80055e4:	460b      	mov	r3, r1
 80055e6:	4924      	ldr	r1, [pc, #144]	; (8005678 <__kernel_cos+0x180>)
 80055e8:	4602      	mov	r2, r0
 80055ea:	2000      	movs	r0, #0
 80055ec:	f7fa fe0c 	bl	8000208 <__aeabi_dsub>
 80055f0:	ecbd 8b02 	vpop	{d8}
 80055f4:	ec41 0b10 	vmov	d0, r0, r1
 80055f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fc:	4b1f      	ldr	r3, [pc, #124]	; (800567c <__kernel_cos+0x184>)
 80055fe:	491e      	ldr	r1, [pc, #120]	; (8005678 <__kernel_cos+0x180>)
 8005600:	429e      	cmp	r6, r3
 8005602:	bfcc      	ite	gt
 8005604:	4d1e      	ldrgt	r5, [pc, #120]	; (8005680 <__kernel_cos+0x188>)
 8005606:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800560a:	2400      	movs	r4, #0
 800560c:	4622      	mov	r2, r4
 800560e:	462b      	mov	r3, r5
 8005610:	2000      	movs	r0, #0
 8005612:	f7fa fdf9 	bl	8000208 <__aeabi_dsub>
 8005616:	4622      	mov	r2, r4
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	462b      	mov	r3, r5
 800561e:	4650      	mov	r0, sl
 8005620:	4659      	mov	r1, fp
 8005622:	f7fa fdf1 	bl	8000208 <__aeabi_dsub>
 8005626:	4642      	mov	r2, r8
 8005628:	464b      	mov	r3, r9
 800562a:	f7fa fded 	bl	8000208 <__aeabi_dsub>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4630      	mov	r0, r6
 8005634:	4639      	mov	r1, r7
 8005636:	e7d9      	b.n	80055ec <__kernel_cos+0xf4>
 8005638:	2000      	movs	r0, #0
 800563a:	490f      	ldr	r1, [pc, #60]	; (8005678 <__kernel_cos+0x180>)
 800563c:	e7d8      	b.n	80055f0 <__kernel_cos+0xf8>
 800563e:	bf00      	nop
 8005640:	be8838d4 	.word	0xbe8838d4
 8005644:	bda8fae9 	.word	0xbda8fae9
 8005648:	bdb4b1c4 	.word	0xbdb4b1c4
 800564c:	3e21ee9e 	.word	0x3e21ee9e
 8005650:	809c52ad 	.word	0x809c52ad
 8005654:	3e927e4f 	.word	0x3e927e4f
 8005658:	19cb1590 	.word	0x19cb1590
 800565c:	3efa01a0 	.word	0x3efa01a0
 8005660:	16c15177 	.word	0x16c15177
 8005664:	3f56c16c 	.word	0x3f56c16c
 8005668:	5555554c 	.word	0x5555554c
 800566c:	3fa55555 	.word	0x3fa55555
 8005670:	3fe00000 	.word	0x3fe00000
 8005674:	3fd33332 	.word	0x3fd33332
 8005678:	3ff00000 	.word	0x3ff00000
 800567c:	3fe90000 	.word	0x3fe90000
 8005680:	3fd20000 	.word	0x3fd20000
 8005684:	00000000 	.word	0x00000000

08005688 <__kernel_rem_pio2>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	ed2d 8b02 	vpush	{d8}
 8005690:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005694:	1ed4      	subs	r4, r2, #3
 8005696:	9308      	str	r3, [sp, #32]
 8005698:	9101      	str	r1, [sp, #4]
 800569a:	4bc5      	ldr	r3, [pc, #788]	; (80059b0 <__kernel_rem_pio2+0x328>)
 800569c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800569e:	9009      	str	r0, [sp, #36]	; 0x24
 80056a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056a4:	9304      	str	r3, [sp, #16]
 80056a6:	9b08      	ldr	r3, [sp, #32]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	9307      	str	r3, [sp, #28]
 80056ac:	2318      	movs	r3, #24
 80056ae:	fb94 f4f3 	sdiv	r4, r4, r3
 80056b2:	f06f 0317 	mvn.w	r3, #23
 80056b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80056ba:	fb04 3303 	mla	r3, r4, r3, r3
 80056be:	eb03 0a02 	add.w	sl, r3, r2
 80056c2:	9b04      	ldr	r3, [sp, #16]
 80056c4:	9a07      	ldr	r2, [sp, #28]
 80056c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80059a0 <__kernel_rem_pio2+0x318>
 80056ca:	eb03 0802 	add.w	r8, r3, r2
 80056ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80056d0:	1aa7      	subs	r7, r4, r2
 80056d2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80056d6:	ae22      	add	r6, sp, #136	; 0x88
 80056d8:	2500      	movs	r5, #0
 80056da:	4545      	cmp	r5, r8
 80056dc:	dd13      	ble.n	8005706 <__kernel_rem_pio2+0x7e>
 80056de:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80059a0 <__kernel_rem_pio2+0x318>
 80056e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80056e6:	2600      	movs	r6, #0
 80056e8:	9b04      	ldr	r3, [sp, #16]
 80056ea:	429e      	cmp	r6, r3
 80056ec:	dc32      	bgt.n	8005754 <__kernel_rem_pio2+0xcc>
 80056ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f0:	9302      	str	r3, [sp, #8]
 80056f2:	9b08      	ldr	r3, [sp, #32]
 80056f4:	199d      	adds	r5, r3, r6
 80056f6:	ab22      	add	r3, sp, #136	; 0x88
 80056f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80056fc:	9306      	str	r3, [sp, #24]
 80056fe:	ec59 8b18 	vmov	r8, r9, d8
 8005702:	2700      	movs	r7, #0
 8005704:	e01f      	b.n	8005746 <__kernel_rem_pio2+0xbe>
 8005706:	42ef      	cmn	r7, r5
 8005708:	d407      	bmi.n	800571a <__kernel_rem_pio2+0x92>
 800570a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800570e:	f7fa fec9 	bl	80004a4 <__aeabi_i2d>
 8005712:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005716:	3501      	adds	r5, #1
 8005718:	e7df      	b.n	80056da <__kernel_rem_pio2+0x52>
 800571a:	ec51 0b18 	vmov	r0, r1, d8
 800571e:	e7f8      	b.n	8005712 <__kernel_rem_pio2+0x8a>
 8005720:	9906      	ldr	r1, [sp, #24]
 8005722:	9d02      	ldr	r5, [sp, #8]
 8005724:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005728:	9106      	str	r1, [sp, #24]
 800572a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800572e:	9502      	str	r5, [sp, #8]
 8005730:	f7fa ff22 	bl	8000578 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4640      	mov	r0, r8
 800573a:	4649      	mov	r1, r9
 800573c:	f7fa fd66 	bl	800020c <__adddf3>
 8005740:	3701      	adds	r7, #1
 8005742:	4680      	mov	r8, r0
 8005744:	4689      	mov	r9, r1
 8005746:	9b07      	ldr	r3, [sp, #28]
 8005748:	429f      	cmp	r7, r3
 800574a:	dde9      	ble.n	8005720 <__kernel_rem_pio2+0x98>
 800574c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005750:	3601      	adds	r6, #1
 8005752:	e7c9      	b.n	80056e8 <__kernel_rem_pio2+0x60>
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	aa0e      	add	r2, sp, #56	; 0x38
 8005758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800575c:	930c      	str	r3, [sp, #48]	; 0x30
 800575e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005760:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005764:	9c04      	ldr	r4, [sp, #16]
 8005766:	930b      	str	r3, [sp, #44]	; 0x2c
 8005768:	ab9a      	add	r3, sp, #616	; 0x268
 800576a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800576e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005772:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005776:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800577a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800577e:	ab9a      	add	r3, sp, #616	; 0x268
 8005780:	445b      	add	r3, fp
 8005782:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005786:	2500      	movs	r5, #0
 8005788:	1b63      	subs	r3, r4, r5
 800578a:	2b00      	cmp	r3, #0
 800578c:	dc78      	bgt.n	8005880 <__kernel_rem_pio2+0x1f8>
 800578e:	4650      	mov	r0, sl
 8005790:	ec49 8b10 	vmov	d0, r8, r9
 8005794:	f000 fc00 	bl	8005f98 <scalbn>
 8005798:	ec57 6b10 	vmov	r6, r7, d0
 800579c:	2200      	movs	r2, #0
 800579e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80057a2:	ee10 0a10 	vmov	r0, s0
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fa fee6 	bl	8000578 <__aeabi_dmul>
 80057ac:	ec41 0b10 	vmov	d0, r0, r1
 80057b0:	f000 fb6e 	bl	8005e90 <floor>
 80057b4:	2200      	movs	r2, #0
 80057b6:	ec51 0b10 	vmov	r0, r1, d0
 80057ba:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <__kernel_rem_pio2+0x32c>)
 80057bc:	f7fa fedc 	bl	8000578 <__aeabi_dmul>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4630      	mov	r0, r6
 80057c6:	4639      	mov	r1, r7
 80057c8:	f7fa fd1e 	bl	8000208 <__aeabi_dsub>
 80057cc:	460f      	mov	r7, r1
 80057ce:	4606      	mov	r6, r0
 80057d0:	f7fb f96c 	bl	8000aac <__aeabi_d2iz>
 80057d4:	9006      	str	r0, [sp, #24]
 80057d6:	f7fa fe65 	bl	80004a4 <__aeabi_i2d>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4630      	mov	r0, r6
 80057e0:	4639      	mov	r1, r7
 80057e2:	f7fa fd11 	bl	8000208 <__aeabi_dsub>
 80057e6:	f1ba 0f00 	cmp.w	sl, #0
 80057ea:	4606      	mov	r6, r0
 80057ec:	460f      	mov	r7, r1
 80057ee:	dd6c      	ble.n	80058ca <__kernel_rem_pio2+0x242>
 80057f0:	1e62      	subs	r2, r4, #1
 80057f2:	ab0e      	add	r3, sp, #56	; 0x38
 80057f4:	f1ca 0118 	rsb	r1, sl, #24
 80057f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80057fc:	9d06      	ldr	r5, [sp, #24]
 80057fe:	fa40 f301 	asr.w	r3, r0, r1
 8005802:	441d      	add	r5, r3
 8005804:	408b      	lsls	r3, r1
 8005806:	1ac0      	subs	r0, r0, r3
 8005808:	ab0e      	add	r3, sp, #56	; 0x38
 800580a:	9506      	str	r5, [sp, #24]
 800580c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005810:	f1ca 0317 	rsb	r3, sl, #23
 8005814:	fa40 f303 	asr.w	r3, r0, r3
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	9b02      	ldr	r3, [sp, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	dd62      	ble.n	80058e6 <__kernel_rem_pio2+0x25e>
 8005820:	9b06      	ldr	r3, [sp, #24]
 8005822:	2200      	movs	r2, #0
 8005824:	3301      	adds	r3, #1
 8005826:	9306      	str	r3, [sp, #24]
 8005828:	4615      	mov	r5, r2
 800582a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800582e:	4294      	cmp	r4, r2
 8005830:	f300 8095 	bgt.w	800595e <__kernel_rem_pio2+0x2d6>
 8005834:	f1ba 0f00 	cmp.w	sl, #0
 8005838:	dd07      	ble.n	800584a <__kernel_rem_pio2+0x1c2>
 800583a:	f1ba 0f01 	cmp.w	sl, #1
 800583e:	f000 80a2 	beq.w	8005986 <__kernel_rem_pio2+0x2fe>
 8005842:	f1ba 0f02 	cmp.w	sl, #2
 8005846:	f000 80c1 	beq.w	80059cc <__kernel_rem_pio2+0x344>
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d14a      	bne.n	80058e6 <__kernel_rem_pio2+0x25e>
 8005850:	4632      	mov	r2, r6
 8005852:	463b      	mov	r3, r7
 8005854:	2000      	movs	r0, #0
 8005856:	4958      	ldr	r1, [pc, #352]	; (80059b8 <__kernel_rem_pio2+0x330>)
 8005858:	f7fa fcd6 	bl	8000208 <__aeabi_dsub>
 800585c:	4606      	mov	r6, r0
 800585e:	460f      	mov	r7, r1
 8005860:	2d00      	cmp	r5, #0
 8005862:	d040      	beq.n	80058e6 <__kernel_rem_pio2+0x25e>
 8005864:	4650      	mov	r0, sl
 8005866:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80059a8 <__kernel_rem_pio2+0x320>
 800586a:	f000 fb95 	bl	8005f98 <scalbn>
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	ec53 2b10 	vmov	r2, r3, d0
 8005876:	f7fa fcc7 	bl	8000208 <__aeabi_dsub>
 800587a:	4606      	mov	r6, r0
 800587c:	460f      	mov	r7, r1
 800587e:	e032      	b.n	80058e6 <__kernel_rem_pio2+0x25e>
 8005880:	2200      	movs	r2, #0
 8005882:	4b4e      	ldr	r3, [pc, #312]	; (80059bc <__kernel_rem_pio2+0x334>)
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fa fe76 	bl	8000578 <__aeabi_dmul>
 800588c:	f7fb f90e 	bl	8000aac <__aeabi_d2iz>
 8005890:	f7fa fe08 	bl	80004a4 <__aeabi_i2d>
 8005894:	2200      	movs	r2, #0
 8005896:	4b4a      	ldr	r3, [pc, #296]	; (80059c0 <__kernel_rem_pio2+0x338>)
 8005898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800589c:	f7fa fe6c 	bl	8000578 <__aeabi_dmul>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4640      	mov	r0, r8
 80058a6:	4649      	mov	r1, r9
 80058a8:	f7fa fcae 	bl	8000208 <__aeabi_dsub>
 80058ac:	f7fb f8fe 	bl	8000aac <__aeabi_d2iz>
 80058b0:	ab0e      	add	r3, sp, #56	; 0x38
 80058b2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80058b6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80058ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058be:	f7fa fca5 	bl	800020c <__adddf3>
 80058c2:	3501      	adds	r5, #1
 80058c4:	4680      	mov	r8, r0
 80058c6:	4689      	mov	r9, r1
 80058c8:	e75e      	b.n	8005788 <__kernel_rem_pio2+0x100>
 80058ca:	d105      	bne.n	80058d8 <__kernel_rem_pio2+0x250>
 80058cc:	1e63      	subs	r3, r4, #1
 80058ce:	aa0e      	add	r2, sp, #56	; 0x38
 80058d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80058d4:	15c3      	asrs	r3, r0, #23
 80058d6:	e79f      	b.n	8005818 <__kernel_rem_pio2+0x190>
 80058d8:	2200      	movs	r2, #0
 80058da:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <__kernel_rem_pio2+0x33c>)
 80058dc:	f7fb f8d2 	bl	8000a84 <__aeabi_dcmpge>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d139      	bne.n	8005958 <__kernel_rem_pio2+0x2d0>
 80058e4:	9002      	str	r0, [sp, #8]
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4630      	mov	r0, r6
 80058ec:	4639      	mov	r1, r7
 80058ee:	f7fb f8ab 	bl	8000a48 <__aeabi_dcmpeq>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f000 80c7 	beq.w	8005a86 <__kernel_rem_pio2+0x3fe>
 80058f8:	1e65      	subs	r5, r4, #1
 80058fa:	462b      	mov	r3, r5
 80058fc:	2200      	movs	r2, #0
 80058fe:	9904      	ldr	r1, [sp, #16]
 8005900:	428b      	cmp	r3, r1
 8005902:	da6a      	bge.n	80059da <__kernel_rem_pio2+0x352>
 8005904:	2a00      	cmp	r2, #0
 8005906:	f000 8088 	beq.w	8005a1a <__kernel_rem_pio2+0x392>
 800590a:	ab0e      	add	r3, sp, #56	; 0x38
 800590c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005910:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80b4 	beq.w	8005a82 <__kernel_rem_pio2+0x3fa>
 800591a:	4650      	mov	r0, sl
 800591c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80059a8 <__kernel_rem_pio2+0x320>
 8005920:	f000 fb3a 	bl	8005f98 <scalbn>
 8005924:	00ec      	lsls	r4, r5, #3
 8005926:	ab72      	add	r3, sp, #456	; 0x1c8
 8005928:	191e      	adds	r6, r3, r4
 800592a:	ec59 8b10 	vmov	r8, r9, d0
 800592e:	f106 0a08 	add.w	sl, r6, #8
 8005932:	462f      	mov	r7, r5
 8005934:	2f00      	cmp	r7, #0
 8005936:	f280 80df 	bge.w	8005af8 <__kernel_rem_pio2+0x470>
 800593a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80059a0 <__kernel_rem_pio2+0x318>
 800593e:	f04f 0a00 	mov.w	sl, #0
 8005942:	eba5 030a 	sub.w	r3, r5, sl
 8005946:	2b00      	cmp	r3, #0
 8005948:	f2c0 810a 	blt.w	8005b60 <__kernel_rem_pio2+0x4d8>
 800594c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80059c8 <__kernel_rem_pio2+0x340>
 8005950:	ec59 8b18 	vmov	r8, r9, d8
 8005954:	2700      	movs	r7, #0
 8005956:	e0f5      	b.n	8005b44 <__kernel_rem_pio2+0x4bc>
 8005958:	2302      	movs	r3, #2
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	e760      	b.n	8005820 <__kernel_rem_pio2+0x198>
 800595e:	ab0e      	add	r3, sp, #56	; 0x38
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	b94d      	cbnz	r5, 800597a <__kernel_rem_pio2+0x2f2>
 8005966:	b12b      	cbz	r3, 8005974 <__kernel_rem_pio2+0x2ec>
 8005968:	a80e      	add	r0, sp, #56	; 0x38
 800596a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800596e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005972:	2301      	movs	r3, #1
 8005974:	3201      	adds	r2, #1
 8005976:	461d      	mov	r5, r3
 8005978:	e759      	b.n	800582e <__kernel_rem_pio2+0x1a6>
 800597a:	a80e      	add	r0, sp, #56	; 0x38
 800597c:	1acb      	subs	r3, r1, r3
 800597e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005982:	462b      	mov	r3, r5
 8005984:	e7f6      	b.n	8005974 <__kernel_rem_pio2+0x2ec>
 8005986:	1e62      	subs	r2, r4, #1
 8005988:	ab0e      	add	r3, sp, #56	; 0x38
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005992:	a90e      	add	r1, sp, #56	; 0x38
 8005994:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005998:	e757      	b.n	800584a <__kernel_rem_pio2+0x1c2>
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w
	...
 80059ac:	3ff00000 	.word	0x3ff00000
 80059b0:	080062b0 	.word	0x080062b0
 80059b4:	40200000 	.word	0x40200000
 80059b8:	3ff00000 	.word	0x3ff00000
 80059bc:	3e700000 	.word	0x3e700000
 80059c0:	41700000 	.word	0x41700000
 80059c4:	3fe00000 	.word	0x3fe00000
 80059c8:	08006270 	.word	0x08006270
 80059cc:	1e62      	subs	r2, r4, #1
 80059ce:	ab0e      	add	r3, sp, #56	; 0x38
 80059d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80059d8:	e7db      	b.n	8005992 <__kernel_rem_pio2+0x30a>
 80059da:	a90e      	add	r1, sp, #56	; 0x38
 80059dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	430a      	orrs	r2, r1
 80059e4:	e78b      	b.n	80058fe <__kernel_rem_pio2+0x276>
 80059e6:	3301      	adds	r3, #1
 80059e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d0fa      	beq.n	80059e6 <__kernel_rem_pio2+0x35e>
 80059f0:	9a08      	ldr	r2, [sp, #32]
 80059f2:	4422      	add	r2, r4
 80059f4:	00d2      	lsls	r2, r2, #3
 80059f6:	a922      	add	r1, sp, #136	; 0x88
 80059f8:	18e3      	adds	r3, r4, r3
 80059fa:	9206      	str	r2, [sp, #24]
 80059fc:	440a      	add	r2, r1
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	f10b 0108 	add.w	r1, fp, #8
 8005a04:	f102 0308 	add.w	r3, r2, #8
 8005a08:	1c66      	adds	r6, r4, #1
 8005a0a:	910a      	str	r1, [sp, #40]	; 0x28
 8005a0c:	2500      	movs	r5, #0
 8005a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	42b3      	cmp	r3, r6
 8005a14:	da04      	bge.n	8005a20 <__kernel_rem_pio2+0x398>
 8005a16:	461c      	mov	r4, r3
 8005a18:	e6a6      	b.n	8005768 <__kernel_rem_pio2+0xe0>
 8005a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e7e3      	b.n	80059e8 <__kernel_rem_pio2+0x360>
 8005a20:	9b06      	ldr	r3, [sp, #24]
 8005a22:	18ef      	adds	r7, r5, r3
 8005a24:	ab22      	add	r3, sp, #136	; 0x88
 8005a26:	441f      	add	r7, r3
 8005a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a2e:	f7fa fd39 	bl	80004a4 <__aeabi_i2d>
 8005a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a34:	461c      	mov	r4, r3
 8005a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a38:	e9c7 0100 	strd	r0, r1, [r7]
 8005a3c:	eb03 0b05 	add.w	fp, r3, r5
 8005a40:	2700      	movs	r7, #0
 8005a42:	f04f 0800 	mov.w	r8, #0
 8005a46:	f04f 0900 	mov.w	r9, #0
 8005a4a:	9b07      	ldr	r3, [sp, #28]
 8005a4c:	429f      	cmp	r7, r3
 8005a4e:	dd08      	ble.n	8005a62 <__kernel_rem_pio2+0x3da>
 8005a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a52:	aa72      	add	r2, sp, #456	; 0x1c8
 8005a54:	18eb      	adds	r3, r5, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	3508      	adds	r5, #8
 8005a60:	e7d6      	b.n	8005a10 <__kernel_rem_pio2+0x388>
 8005a62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005a66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005a6a:	f7fa fd85 	bl	8000578 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4640      	mov	r0, r8
 8005a74:	4649      	mov	r1, r9
 8005a76:	f7fa fbc9 	bl	800020c <__adddf3>
 8005a7a:	3701      	adds	r7, #1
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	4689      	mov	r9, r1
 8005a80:	e7e3      	b.n	8005a4a <__kernel_rem_pio2+0x3c2>
 8005a82:	3d01      	subs	r5, #1
 8005a84:	e741      	b.n	800590a <__kernel_rem_pio2+0x282>
 8005a86:	f1ca 0000 	rsb	r0, sl, #0
 8005a8a:	ec47 6b10 	vmov	d0, r6, r7
 8005a8e:	f000 fa83 	bl	8005f98 <scalbn>
 8005a92:	ec57 6b10 	vmov	r6, r7, d0
 8005a96:	2200      	movs	r2, #0
 8005a98:	4b99      	ldr	r3, [pc, #612]	; (8005d00 <__kernel_rem_pio2+0x678>)
 8005a9a:	ee10 0a10 	vmov	r0, s0
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	f7fa fff0 	bl	8000a84 <__aeabi_dcmpge>
 8005aa4:	b1f8      	cbz	r0, 8005ae6 <__kernel_rem_pio2+0x45e>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4b96      	ldr	r3, [pc, #600]	; (8005d04 <__kernel_rem_pio2+0x67c>)
 8005aaa:	4630      	mov	r0, r6
 8005aac:	4639      	mov	r1, r7
 8005aae:	f7fa fd63 	bl	8000578 <__aeabi_dmul>
 8005ab2:	f7fa fffb 	bl	8000aac <__aeabi_d2iz>
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	f7fa fcf4 	bl	80004a4 <__aeabi_i2d>
 8005abc:	2200      	movs	r2, #0
 8005abe:	4b90      	ldr	r3, [pc, #576]	; (8005d00 <__kernel_rem_pio2+0x678>)
 8005ac0:	f7fa fd5a 	bl	8000578 <__aeabi_dmul>
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	4639      	mov	r1, r7
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7fa fb9c 	bl	8000208 <__aeabi_dsub>
 8005ad0:	f7fa ffec 	bl	8000aac <__aeabi_d2iz>
 8005ad4:	1c65      	adds	r5, r4, #1
 8005ad6:	ab0e      	add	r3, sp, #56	; 0x38
 8005ad8:	f10a 0a18 	add.w	sl, sl, #24
 8005adc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ae0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005ae4:	e719      	b.n	800591a <__kernel_rem_pio2+0x292>
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4639      	mov	r1, r7
 8005aea:	f7fa ffdf 	bl	8000aac <__aeabi_d2iz>
 8005aee:	ab0e      	add	r3, sp, #56	; 0x38
 8005af0:	4625      	mov	r5, r4
 8005af2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005af6:	e710      	b.n	800591a <__kernel_rem_pio2+0x292>
 8005af8:	ab0e      	add	r3, sp, #56	; 0x38
 8005afa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005afe:	f7fa fcd1 	bl	80004a4 <__aeabi_i2d>
 8005b02:	4642      	mov	r2, r8
 8005b04:	464b      	mov	r3, r9
 8005b06:	f7fa fd37 	bl	8000578 <__aeabi_dmul>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005b10:	4b7c      	ldr	r3, [pc, #496]	; (8005d04 <__kernel_rem_pio2+0x67c>)
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f7fa fd2f 	bl	8000578 <__aeabi_dmul>
 8005b1a:	3f01      	subs	r7, #1
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	4689      	mov	r9, r1
 8005b20:	e708      	b.n	8005934 <__kernel_rem_pio2+0x2ac>
 8005b22:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005b2e:	f7fa fd23 	bl	8000578 <__aeabi_dmul>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4640      	mov	r0, r8
 8005b38:	4649      	mov	r1, r9
 8005b3a:	f7fa fb67 	bl	800020c <__adddf3>
 8005b3e:	3701      	adds	r7, #1
 8005b40:	4680      	mov	r8, r0
 8005b42:	4689      	mov	r9, r1
 8005b44:	9b04      	ldr	r3, [sp, #16]
 8005b46:	429f      	cmp	r7, r3
 8005b48:	dc01      	bgt.n	8005b4e <__kernel_rem_pio2+0x4c6>
 8005b4a:	45ba      	cmp	sl, r7
 8005b4c:	dae9      	bge.n	8005b22 <__kernel_rem_pio2+0x49a>
 8005b4e:	ab4a      	add	r3, sp, #296	; 0x128
 8005b50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b54:	e9c3 8900 	strd	r8, r9, [r3]
 8005b58:	f10a 0a01 	add.w	sl, sl, #1
 8005b5c:	3e08      	subs	r6, #8
 8005b5e:	e6f0      	b.n	8005942 <__kernel_rem_pio2+0x2ba>
 8005b60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d85b      	bhi.n	8005c1e <__kernel_rem_pio2+0x596>
 8005b66:	e8df f003 	tbb	[pc, r3]
 8005b6a:	264a      	.short	0x264a
 8005b6c:	0226      	.short	0x0226
 8005b6e:	ab9a      	add	r3, sp, #616	; 0x268
 8005b70:	441c      	add	r4, r3
 8005b72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005b76:	46a2      	mov	sl, r4
 8005b78:	46ab      	mov	fp, r5
 8005b7a:	f1bb 0f00 	cmp.w	fp, #0
 8005b7e:	dc6c      	bgt.n	8005c5a <__kernel_rem_pio2+0x5d2>
 8005b80:	46a2      	mov	sl, r4
 8005b82:	46ab      	mov	fp, r5
 8005b84:	f1bb 0f01 	cmp.w	fp, #1
 8005b88:	f300 8086 	bgt.w	8005c98 <__kernel_rem_pio2+0x610>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	2100      	movs	r1, #0
 8005b90:	2d01      	cmp	r5, #1
 8005b92:	f300 80a0 	bgt.w	8005cd6 <__kernel_rem_pio2+0x64e>
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005b9c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 809e 	bne.w	8005ce2 <__kernel_rem_pio2+0x65a>
 8005ba6:	9b01      	ldr	r3, [sp, #4]
 8005ba8:	e9c3 7800 	strd	r7, r8, [r3]
 8005bac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005bb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005bb4:	e033      	b.n	8005c1e <__kernel_rem_pio2+0x596>
 8005bb6:	3408      	adds	r4, #8
 8005bb8:	ab4a      	add	r3, sp, #296	; 0x128
 8005bba:	441c      	add	r4, r3
 8005bbc:	462e      	mov	r6, r5
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	2e00      	cmp	r6, #0
 8005bc4:	da3a      	bge.n	8005c3c <__kernel_rem_pio2+0x5b4>
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d03d      	beq.n	8005c48 <__kernel_rem_pio2+0x5c0>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bd2:	9c01      	ldr	r4, [sp, #4]
 8005bd4:	e9c4 2300 	strd	r2, r3, [r4]
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005be0:	f7fa fb12 	bl	8000208 <__aeabi_dsub>
 8005be4:	ae4c      	add	r6, sp, #304	; 0x130
 8005be6:	2401      	movs	r4, #1
 8005be8:	42a5      	cmp	r5, r4
 8005bea:	da30      	bge.n	8005c4e <__kernel_rem_pio2+0x5c6>
 8005bec:	9b02      	ldr	r3, [sp, #8]
 8005bee:	b113      	cbz	r3, 8005bf6 <__kernel_rem_pio2+0x56e>
 8005bf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005bfc:	e00f      	b.n	8005c1e <__kernel_rem_pio2+0x596>
 8005bfe:	ab9a      	add	r3, sp, #616	; 0x268
 8005c00:	441c      	add	r4, r3
 8005c02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c06:	2000      	movs	r0, #0
 8005c08:	2100      	movs	r1, #0
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	da10      	bge.n	8005c30 <__kernel_rem_pio2+0x5a8>
 8005c0e:	9b02      	ldr	r3, [sp, #8]
 8005c10:	b113      	cbz	r3, 8005c18 <__kernel_rem_pio2+0x590>
 8005c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c16:	4619      	mov	r1, r3
 8005c18:	9b01      	ldr	r3, [sp, #4]
 8005c1a:	e9c3 0100 	strd	r0, r1, [r3]
 8005c1e:	9b06      	ldr	r3, [sp, #24]
 8005c20:	f003 0007 	and.w	r0, r3, #7
 8005c24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005c28:	ecbd 8b02 	vpop	{d8}
 8005c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c30:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c34:	f7fa faea 	bl	800020c <__adddf3>
 8005c38:	3d01      	subs	r5, #1
 8005c3a:	e7e6      	b.n	8005c0a <__kernel_rem_pio2+0x582>
 8005c3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c40:	f7fa fae4 	bl	800020c <__adddf3>
 8005c44:	3e01      	subs	r6, #1
 8005c46:	e7bc      	b.n	8005bc2 <__kernel_rem_pio2+0x53a>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	e7c1      	b.n	8005bd2 <__kernel_rem_pio2+0x54a>
 8005c4e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005c52:	f7fa fadb 	bl	800020c <__adddf3>
 8005c56:	3401      	adds	r4, #1
 8005c58:	e7c6      	b.n	8005be8 <__kernel_rem_pio2+0x560>
 8005c5a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005c5e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c62:	4640      	mov	r0, r8
 8005c64:	ec53 2b17 	vmov	r2, r3, d7
 8005c68:	4649      	mov	r1, r9
 8005c6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c6e:	f7fa facd 	bl	800020c <__adddf3>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa fac3 	bl	8000208 <__aeabi_dsub>
 8005c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c86:	f7fa fac1 	bl	800020c <__adddf3>
 8005c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c8e:	e9ca 0100 	strd	r0, r1, [sl]
 8005c92:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005c96:	e770      	b.n	8005b7a <__kernel_rem_pio2+0x4f2>
 8005c98:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005c9c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	ec53 2b17 	vmov	r2, r3, d7
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005cac:	f7fa faae 	bl	800020c <__adddf3>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa faa4 	bl	8000208 <__aeabi_dsub>
 8005cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cc4:	f7fa faa2 	bl	800020c <__adddf3>
 8005cc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ccc:	e9ca 0100 	strd	r0, r1, [sl]
 8005cd0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005cd4:	e756      	b.n	8005b84 <__kernel_rem_pio2+0x4fc>
 8005cd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005cda:	f7fa fa97 	bl	800020c <__adddf3>
 8005cde:	3d01      	subs	r5, #1
 8005ce0:	e756      	b.n	8005b90 <__kernel_rem_pio2+0x508>
 8005ce2:	9b01      	ldr	r3, [sp, #4]
 8005ce4:	9a01      	ldr	r2, [sp, #4]
 8005ce6:	601f      	str	r7, [r3, #0]
 8005ce8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005cec:	605c      	str	r4, [r3, #4]
 8005cee:	609d      	str	r5, [r3, #8]
 8005cf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005cf4:	60d3      	str	r3, [r2, #12]
 8005cf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cfa:	6110      	str	r0, [r2, #16]
 8005cfc:	6153      	str	r3, [r2, #20]
 8005cfe:	e78e      	b.n	8005c1e <__kernel_rem_pio2+0x596>
 8005d00:	41700000 	.word	0x41700000
 8005d04:	3e700000 	.word	0x3e700000

08005d08 <__kernel_sin>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	ec55 4b10 	vmov	r4, r5, d0
 8005d10:	b085      	sub	sp, #20
 8005d12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d16:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d1a:	ed8d 1b00 	vstr	d1, [sp]
 8005d1e:	9002      	str	r0, [sp, #8]
 8005d20:	da06      	bge.n	8005d30 <__kernel_sin+0x28>
 8005d22:	ee10 0a10 	vmov	r0, s0
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7fa fec0 	bl	8000aac <__aeabi_d2iz>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d051      	beq.n	8005dd4 <__kernel_sin+0xcc>
 8005d30:	4622      	mov	r2, r4
 8005d32:	462b      	mov	r3, r5
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa fc1e 	bl	8000578 <__aeabi_dmul>
 8005d3c:	4682      	mov	sl, r0
 8005d3e:	468b      	mov	fp, r1
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4620      	mov	r0, r4
 8005d46:	4629      	mov	r1, r5
 8005d48:	f7fa fc16 	bl	8000578 <__aeabi_dmul>
 8005d4c:	a341      	add	r3, pc, #260	; (adr r3, 8005e54 <__kernel_sin+0x14c>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	4680      	mov	r8, r0
 8005d54:	4689      	mov	r9, r1
 8005d56:	4650      	mov	r0, sl
 8005d58:	4659      	mov	r1, fp
 8005d5a:	f7fa fc0d 	bl	8000578 <__aeabi_dmul>
 8005d5e:	a33f      	add	r3, pc, #252	; (adr r3, 8005e5c <__kernel_sin+0x154>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fa50 	bl	8000208 <__aeabi_dsub>
 8005d68:	4652      	mov	r2, sl
 8005d6a:	465b      	mov	r3, fp
 8005d6c:	f7fa fc04 	bl	8000578 <__aeabi_dmul>
 8005d70:	a33c      	add	r3, pc, #240	; (adr r3, 8005e64 <__kernel_sin+0x15c>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	f7fa fa49 	bl	800020c <__adddf3>
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	465b      	mov	r3, fp
 8005d7e:	f7fa fbfb 	bl	8000578 <__aeabi_dmul>
 8005d82:	a33a      	add	r3, pc, #232	; (adr r3, 8005e6c <__kernel_sin+0x164>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fa3e 	bl	8000208 <__aeabi_dsub>
 8005d8c:	4652      	mov	r2, sl
 8005d8e:	465b      	mov	r3, fp
 8005d90:	f7fa fbf2 	bl	8000578 <__aeabi_dmul>
 8005d94:	a337      	add	r3, pc, #220	; (adr r3, 8005e74 <__kernel_sin+0x16c>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f7fa fa37 	bl	800020c <__adddf3>
 8005d9e:	9b02      	ldr	r3, [sp, #8]
 8005da0:	4606      	mov	r6, r0
 8005da2:	460f      	mov	r7, r1
 8005da4:	b9db      	cbnz	r3, 8005dde <__kernel_sin+0xd6>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4650      	mov	r0, sl
 8005dac:	4659      	mov	r1, fp
 8005dae:	f7fa fbe3 	bl	8000578 <__aeabi_dmul>
 8005db2:	a325      	add	r3, pc, #148	; (adr r3, 8005e48 <__kernel_sin+0x140>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f7fa fa26 	bl	8000208 <__aeabi_dsub>
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	f7fa fbda 	bl	8000578 <__aeabi_dmul>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fa1e 	bl	800020c <__adddf3>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	ec45 4b10 	vmov	d0, r4, r5
 8005dd8:	b005      	add	sp, #20
 8005dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dde:	2200      	movs	r2, #0
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <__kernel_sin+0x148>)
 8005de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005de6:	f7fa fbc7 	bl	8000578 <__aeabi_dmul>
 8005dea:	4632      	mov	r2, r6
 8005dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df0:	463b      	mov	r3, r7
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	f7fa fbbf 	bl	8000578 <__aeabi_dmul>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e02:	f7fa fa01 	bl	8000208 <__aeabi_dsub>
 8005e06:	4652      	mov	r2, sl
 8005e08:	465b      	mov	r3, fp
 8005e0a:	f7fa fbb5 	bl	8000578 <__aeabi_dmul>
 8005e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e12:	f7fa f9f9 	bl	8000208 <__aeabi_dsub>
 8005e16:	a30c      	add	r3, pc, #48	; (adr r3, 8005e48 <__kernel_sin+0x140>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	460f      	mov	r7, r1
 8005e20:	4640      	mov	r0, r8
 8005e22:	4649      	mov	r1, r9
 8005e24:	f7fa fba8 	bl	8000578 <__aeabi_dmul>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	4639      	mov	r1, r7
 8005e30:	f7fa f9ec 	bl	800020c <__adddf3>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa f9e4 	bl	8000208 <__aeabi_dsub>
 8005e40:	e7c6      	b.n	8005dd0 <__kernel_sin+0xc8>
 8005e42:	bf00      	nop
 8005e44:	f3af 8000 	nop.w
 8005e48:	55555549 	.word	0x55555549
 8005e4c:	3fc55555 	.word	0x3fc55555
 8005e50:	3fe00000 	.word	0x3fe00000
 8005e54:	5acfd57c 	.word	0x5acfd57c
 8005e58:	3de5d93a 	.word	0x3de5d93a
 8005e5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e60:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e64:	57b1fe7d 	.word	0x57b1fe7d
 8005e68:	3ec71de3 	.word	0x3ec71de3
 8005e6c:	19c161d5 	.word	0x19c161d5
 8005e70:	3f2a01a0 	.word	0x3f2a01a0
 8005e74:	1110f8a6 	.word	0x1110f8a6
 8005e78:	3f811111 	.word	0x3f811111

08005e7c <fabs>:
 8005e7c:	ec51 0b10 	vmov	r0, r1, d0
 8005e80:	ee10 2a10 	vmov	r2, s0
 8005e84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e88:	ec43 2b10 	vmov	d0, r2, r3
 8005e8c:	4770      	bx	lr
	...

08005e90 <floor>:
 8005e90:	ec51 0b10 	vmov	r0, r1, d0
 8005e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005e9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ea0:	2e13      	cmp	r6, #19
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	ee10 5a10 	vmov	r5, s0
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	dc34      	bgt.n	8005f16 <floor+0x86>
 8005eac:	2e00      	cmp	r6, #0
 8005eae:	da16      	bge.n	8005ede <floor+0x4e>
 8005eb0:	a335      	add	r3, pc, #212	; (adr r3, 8005f88 <floor+0xf8>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa f9a9 	bl	800020c <__adddf3>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f7fa fdeb 	bl	8000a98 <__aeabi_dcmpgt>
 8005ec2:	b148      	cbz	r0, 8005ed8 <floor+0x48>
 8005ec4:	2c00      	cmp	r4, #0
 8005ec6:	da59      	bge.n	8005f7c <floor+0xec>
 8005ec8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005ecc:	4a30      	ldr	r2, [pc, #192]	; (8005f90 <floor+0x100>)
 8005ece:	432b      	orrs	r3, r5
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	42ab      	cmp	r3, r5
 8005ed4:	bf18      	it	ne
 8005ed6:	4614      	movne	r4, r2
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	e025      	b.n	8005f2a <floor+0x9a>
 8005ede:	4f2d      	ldr	r7, [pc, #180]	; (8005f94 <floor+0x104>)
 8005ee0:	4137      	asrs	r7, r6
 8005ee2:	ea01 0307 	and.w	r3, r1, r7
 8005ee6:	4303      	orrs	r3, r0
 8005ee8:	d01f      	beq.n	8005f2a <floor+0x9a>
 8005eea:	a327      	add	r3, pc, #156	; (adr r3, 8005f88 <floor+0xf8>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa f98c 	bl	800020c <__adddf3>
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f7fa fdce 	bl	8000a98 <__aeabi_dcmpgt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d0eb      	beq.n	8005ed8 <floor+0x48>
 8005f00:	2c00      	cmp	r4, #0
 8005f02:	bfbe      	ittt	lt
 8005f04:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005f08:	fa43 f606 	asrlt.w	r6, r3, r6
 8005f0c:	19a4      	addlt	r4, r4, r6
 8005f0e:	ea24 0407 	bic.w	r4, r4, r7
 8005f12:	2500      	movs	r5, #0
 8005f14:	e7e0      	b.n	8005ed8 <floor+0x48>
 8005f16:	2e33      	cmp	r6, #51	; 0x33
 8005f18:	dd0b      	ble.n	8005f32 <floor+0xa2>
 8005f1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f1e:	d104      	bne.n	8005f2a <floor+0x9a>
 8005f20:	ee10 2a10 	vmov	r2, s0
 8005f24:	460b      	mov	r3, r1
 8005f26:	f7fa f971 	bl	800020c <__adddf3>
 8005f2a:	ec41 0b10 	vmov	d0, r0, r1
 8005f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f32:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3a:	fa23 f707 	lsr.w	r7, r3, r7
 8005f3e:	4207      	tst	r7, r0
 8005f40:	d0f3      	beq.n	8005f2a <floor+0x9a>
 8005f42:	a311      	add	r3, pc, #68	; (adr r3, 8005f88 <floor+0xf8>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f960 	bl	800020c <__adddf3>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f7fa fda2 	bl	8000a98 <__aeabi_dcmpgt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d0bf      	beq.n	8005ed8 <floor+0x48>
 8005f58:	2c00      	cmp	r4, #0
 8005f5a:	da02      	bge.n	8005f62 <floor+0xd2>
 8005f5c:	2e14      	cmp	r6, #20
 8005f5e:	d103      	bne.n	8005f68 <floor+0xd8>
 8005f60:	3401      	adds	r4, #1
 8005f62:	ea25 0507 	bic.w	r5, r5, r7
 8005f66:	e7b7      	b.n	8005ed8 <floor+0x48>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005f6e:	fa03 f606 	lsl.w	r6, r3, r6
 8005f72:	4435      	add	r5, r6
 8005f74:	4545      	cmp	r5, r8
 8005f76:	bf38      	it	cc
 8005f78:	18e4      	addcc	r4, r4, r3
 8005f7a:	e7f2      	b.n	8005f62 <floor+0xd2>
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	462c      	mov	r4, r5
 8005f80:	e7aa      	b.n	8005ed8 <floor+0x48>
 8005f82:	bf00      	nop
 8005f84:	f3af 8000 	nop.w
 8005f88:	8800759c 	.word	0x8800759c
 8005f8c:	7e37e43c 	.word	0x7e37e43c
 8005f90:	bff00000 	.word	0xbff00000
 8005f94:	000fffff 	.word	0x000fffff

08005f98 <scalbn>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	ec55 4b10 	vmov	r4, r5, d0
 8005f9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	b9aa      	cbnz	r2, 8005fd4 <scalbn+0x3c>
 8005fa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005fac:	4323      	orrs	r3, r4
 8005fae:	d03b      	beq.n	8006028 <scalbn+0x90>
 8005fb0:	4b31      	ldr	r3, [pc, #196]	; (8006078 <scalbn+0xe0>)
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	ee10 0a10 	vmov	r0, s0
 8005fba:	f7fa fadd 	bl	8000578 <__aeabi_dmul>
 8005fbe:	4b2f      	ldr	r3, [pc, #188]	; (800607c <scalbn+0xe4>)
 8005fc0:	429e      	cmp	r6, r3
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	da12      	bge.n	8005fee <scalbn+0x56>
 8005fc8:	a327      	add	r3, pc, #156	; (adr r3, 8006068 <scalbn+0xd0>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fad3 	bl	8000578 <__aeabi_dmul>
 8005fd2:	e009      	b.n	8005fe8 <scalbn+0x50>
 8005fd4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005fd8:	428a      	cmp	r2, r1
 8005fda:	d10c      	bne.n	8005ff6 <scalbn+0x5e>
 8005fdc:	ee10 2a10 	vmov	r2, s0
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	f7fa f912 	bl	800020c <__adddf3>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	e01c      	b.n	8006028 <scalbn+0x90>
 8005fee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	3a36      	subs	r2, #54	; 0x36
 8005ff6:	4432      	add	r2, r6
 8005ff8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005ffc:	428a      	cmp	r2, r1
 8005ffe:	dd0b      	ble.n	8006018 <scalbn+0x80>
 8006000:	ec45 4b11 	vmov	d1, r4, r5
 8006004:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006070 <scalbn+0xd8>
 8006008:	f000 f83c 	bl	8006084 <copysign>
 800600c:	a318      	add	r3, pc, #96	; (adr r3, 8006070 <scalbn+0xd8>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	ec51 0b10 	vmov	r0, r1, d0
 8006016:	e7da      	b.n	8005fce <scalbn+0x36>
 8006018:	2a00      	cmp	r2, #0
 800601a:	dd08      	ble.n	800602e <scalbn+0x96>
 800601c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006020:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006024:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006028:	ec45 4b10 	vmov	d0, r4, r5
 800602c:	bd70      	pop	{r4, r5, r6, pc}
 800602e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006032:	da0d      	bge.n	8006050 <scalbn+0xb8>
 8006034:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006038:	429e      	cmp	r6, r3
 800603a:	ec45 4b11 	vmov	d1, r4, r5
 800603e:	dce1      	bgt.n	8006004 <scalbn+0x6c>
 8006040:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006068 <scalbn+0xd0>
 8006044:	f000 f81e 	bl	8006084 <copysign>
 8006048:	a307      	add	r3, pc, #28	; (adr r3, 8006068 <scalbn+0xd0>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	e7e0      	b.n	8006012 <scalbn+0x7a>
 8006050:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006054:	3236      	adds	r2, #54	; 0x36
 8006056:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800605a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800605e:	4620      	mov	r0, r4
 8006060:	4629      	mov	r1, r5
 8006062:	2200      	movs	r2, #0
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <scalbn+0xe8>)
 8006066:	e7b2      	b.n	8005fce <scalbn+0x36>
 8006068:	c2f8f359 	.word	0xc2f8f359
 800606c:	01a56e1f 	.word	0x01a56e1f
 8006070:	8800759c 	.word	0x8800759c
 8006074:	7e37e43c 	.word	0x7e37e43c
 8006078:	43500000 	.word	0x43500000
 800607c:	ffff3cb0 	.word	0xffff3cb0
 8006080:	3c900000 	.word	0x3c900000

08006084 <copysign>:
 8006084:	ec51 0b10 	vmov	r0, r1, d0
 8006088:	ee11 0a90 	vmov	r0, s3
 800608c:	ee10 2a10 	vmov	r2, s0
 8006090:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006094:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006098:	ea41 0300 	orr.w	r3, r1, r0
 800609c:	ec43 2b10 	vmov	d0, r2, r3
 80060a0:	4770      	bx	lr
	...

080060a4 <_init>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr

080060b0 <_fini>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr
