
STM32F429VGT6 Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000585c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005a10  08005a10  00015a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c08  08005c08  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c10  08005c10  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005c18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000030  08005c48  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08005c48  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001020d  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002823  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00032a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002501d  00000000  00000000  00034768  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d930  00000000  00000000  00059785  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de7e9  00000000  00000000  000670b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014589e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  0014591c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000030 	.word	0x20000030
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080059f4 	.word	0x080059f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000034 	.word	0x20000034
 80001ec:	080059f4 	.word	0x080059f4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_ADC1_Init+0x9c>)
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <MX_ADC1_Init+0xa0>)
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e8e:	f000 fe37 	bl	8001b00 <HAL_ADC_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e98:	f000 fb84 	bl	80015a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000eae:	f000 fe6b 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eb8:	f000 fb74 	bl	80015a4 <Error_Handler>
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000004c 	.word	0x2000004c
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	0f000001 	.word	0x0f000001

08000ed0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_ADC_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d127      	bne.n	8000f42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_ADC_MspInit+0x84>)
 8000f3e:	f001 fef5 	bl	8002d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800

08000f58 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_DAC_Init+0x64>)
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_DAC_Init+0x68>)
 8000f6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_DAC_Init+0x64>)
 8000f6e:	f001 f94a 	bl	8002206 <HAL_DAC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f78:	f000 fb14 	bl	80015a4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f7c:	2324      	movs	r3, #36	; 0x24
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_DAC_Init+0x64>)
 8000f8c:	f001 fa7e 	bl	800248c <HAL_DAC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f96:	f000 fb05 	bl	80015a4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000f9a:	232c      	movs	r3, #44	; 0x2c
 8000f9c:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_DAC_Init+0x64>)
 8000fa6:	f001 fa71 	bl	800248c <HAL_DAC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000fb0:	f000 faf8 	bl	80015a4 <Error_Handler>
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000f4 	.word	0x200000f4
 8000fc0:	40007400 	.word	0x40007400

08000fc4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a4c      	ldr	r2, [pc, #304]	; (8001114 <HAL_DAC_MspInit+0x150>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	f040 8092 	bne.w	800110c <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8000ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_DAC_MspInit+0x154>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a42      	ldr	r2, [pc, #264]	; (8001118 <HAL_DAC_MspInit+0x154>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001024:	2303      	movs	r3, #3
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <HAL_DAC_MspInit+0x158>)
 8001034:	f001 fe7a 	bl	8002d2c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800103a:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <HAL_DAC_MspInit+0x160>)
 800103c:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001040:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001044:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001048:	2240      	movs	r2, #64	; 0x40
 800104a:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b33      	ldr	r3, [pc, #204]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800105c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001060:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001068:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800107e:	4828      	ldr	r0, [pc, #160]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001080:	f001 fae6 	bl	8002650 <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800108a:	f000 fa8b 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a23      	ldr	r2, [pc, #140]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_DAC_MspInit+0x164>)
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_DAC_MspInit+0x168>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010a2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c2:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d2:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010e2:	f001 fab5 	bl	8002650 <HAL_DMA_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80010ec:	f000 fa5a 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2036      	movs	r0, #54	; 0x36
 8001102:	f001 f84a 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001106:	2036      	movs	r0, #54	; 0x36
 8001108:	f001 f863 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40007400 	.word	0x40007400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000
 8001120:	20000094 	.word	0x20000094
 8001124:	40026088 	.word	0x40026088
 8001128:	20000108 	.word	0x20000108
 800112c:	400260a0 	.word	0x400260a0

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_DMA_Init+0x4c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <MX_DMA_Init+0x4c>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_DMA_Init+0x4c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2010      	movs	r0, #16
 8001158:	f001 f81f 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800115c:	2010      	movs	r0, #16
 800115e:	f001 f838 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2011      	movs	r0, #17
 8001168:	f001 f817 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800116c:	2011      	movs	r0, #17
 800116e:	f001 f830 	bl	80021d2 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_GPIO_Init+0xb4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_GPIO_Init+0xb4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_PWR_GPIO_Port, MAX485_PWR_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2101      	movs	r1, #1
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <MX_GPIO_Init+0xb8>)
 800120c:	f001 ff38 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_PWR_Pin;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAX485_PWR_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_GPIO_Init+0xb8>)
 8001228:	f001 fd80 	bl	8002d2c <HAL_GPIO_Init>

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40020800 	.word	0x40020800
 800123c:	00000000 	.word	0x00000000

08001240 <get_sine_val>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 90000000;	// APB1 Timer Clocks
int Period = 1;				// Tim2 Period


void get_sine_val(void){
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e06b      	b.n	8001324 <get_sine_val+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f91f 	bl	8000494 <__aeabi_i2d>
 8001256:	a340      	add	r3, pc, #256	; (adr r3, 8001358 <get_sine_val+0x118>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f984 	bl	8000568 <__aeabi_dmul>
 8001260:	4603      	mov	r3, r0
 8001262:	460c      	mov	r4, r1
 8001264:	4618      	mov	r0, r3
 8001266:	4621      	mov	r1, r4
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <get_sine_val+0x100>)
 800126e:	f7ff faa5 	bl	80007bc <__aeabi_ddiv>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	ec44 3b17 	vmov	d7, r3, r4
 800127a:	eeb0 0a47 	vmov.f32	s0, s14
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	f003 fba5 	bl	80049d0 <sin>
 8001286:	ec51 0b10 	vmov	r0, r1, d0
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <get_sine_val+0x104>)
 8001290:	f7fe ffb4 	bl	80001fc <__adddf3>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4625      	mov	r5, r4
 800129a:	461c      	mov	r4, r3
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <get_sine_val+0x108>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0fda      	lsrs	r2, r3, #31
 80012a2:	4413      	add	r3, r2
 80012a4:	105b      	asrs	r3, r3, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8f4 	bl	8000494 <__aeabi_i2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7ff f958 	bl	8000568 <__aeabi_dmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	f7ff fc14 	bl	8000aec <__aeabi_d2uiz>
 80012c4:	4601      	mov	r1, r0
 80012c6:	4a21      	ldr	r2, [pc, #132]	; (800134c <get_sine_val+0x10c>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <get_sine_val+0x110>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f8de 	bl	8000494 <__aeabi_i2d>
 80012d8:	4605      	mov	r5, r0
 80012da:	460e      	mov	r6, r1
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <get_sine_val+0x10c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f8c5 	bl	8000474 <__aeabi_ui2d>
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <get_sine_val+0x114>)
 80012ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4623      	mov	r3, r4
 80012f4:	f7ff f938 	bl	8000568 <__aeabi_dmul>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	461a      	mov	r2, r3
 80012fe:	4623      	mov	r3, r4
 8001300:	4628      	mov	r0, r5
 8001302:	4631      	mov	r1, r6
 8001304:	f7fe ff7a 	bl	80001fc <__adddf3>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fbec 	bl	8000aec <__aeabi_d2uiz>
 8001314:	4601      	mov	r1, r0
 8001316:	4a0d      	ldr	r2, [pc, #52]	; (800134c <get_sine_val+0x10c>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3301      	adds	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b27      	cmp	r3, #39	; 0x27
 8001328:	dd90      	ble.n	800124c <get_sine_val+0xc>
	}
	sine_val[Ns] = 0;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <get_sine_val+0x10c>)
 800132c:	2200      	movs	r2, #0
 800132e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	40440000 	.word	0x40440000
 8001344:	3ff00000 	.word	0x3ff00000
 8001348:	20000000 	.word	0x20000000
 800134c:	20000178 	.word	0x20000178
 8001350:	20000010 	.word	0x20000010
 8001354:	20000008 	.word	0x20000008
 8001358:	4d12d84a 	.word	0x4d12d84a
 800135c:	400921fb 	.word	0x400921fb

08001360 <set_clock_TIM2>:



void set_clock_TIM2(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_1*(Period + 1) ) - 1;
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <set_clock_TIM2+0x5c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <set_clock_TIM2+0x60>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <set_clock_TIM2+0x64>)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	3201      	adds	r2, #1
 8001376:	4914      	ldr	r1, [pc, #80]	; (80013c8 <set_clock_TIM2+0x68>)
 8001378:	6809      	ldr	r1, [r1, #0]
 800137a:	fb01 f202 	mul.w	r2, r1, r2
 800137e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001382:	3b01      	subs	r3, #1
 8001384:	461a      	mov	r2, r3
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <set_clock_TIM2+0x6c>)
 8001388:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <set_clock_TIM2+0x70>)
 800138c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001390:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <set_clock_TIM2+0x64>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <set_clock_TIM2+0x70>)
 800139a:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 50 things start to behave funny.
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <set_clock_TIM2+0x6c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <set_clock_TIM2+0x70>)
 80013a4:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a6:	480a      	ldr	r0, [pc, #40]	; (80013d0 <set_clock_TIM2+0x70>)
 80013a8:	f002 fb10 	bl	80039cc <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <set_clock_TIM2+0x56>
	  {
	    Error_Handler();
 80013b2:	f000 f8f7 	bl	80015a4 <Error_Handler>
	  }
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000001c 	.word	0x2000001c
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	20000020 	.word	0x20000020
 80013c8:	20000014 	.word	0x20000014
 80013cc:	20000174 	.word	0x20000174
 80013d0:	20000270 	.word	0x20000270

080013d4 <set_clock_TIM4>:

void set_clock_TIM4(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_2*(Period + 1) ) - 1;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <set_clock_TIM4+0x58>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <set_clock_TIM4+0x5c>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	4a13      	ldr	r2, [pc, #76]	; (8001434 <set_clock_TIM4+0x60>)
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	3201      	adds	r2, #1
 80013ea:	4913      	ldr	r1, [pc, #76]	; (8001438 <set_clock_TIM4+0x64>)
 80013ec:	6809      	ldr	r1, [r1, #0]
 80013ee:	fb01 f202 	mul.w	r2, r1, r2
 80013f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80013f6:	3b01      	subs	r3, #1
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <set_clock_TIM4+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]

	  htim4.Instance = TIM4;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <set_clock_TIM4+0x6c>)
 8001400:	4a10      	ldr	r2, [pc, #64]	; (8001444 <set_clock_TIM4+0x70>)
 8001402:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <set_clock_TIM4+0x60>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <set_clock_TIM4+0x6c>)
 800140c:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 50 things start to behave funny.
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <set_clock_TIM4+0x68>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <set_clock_TIM4+0x6c>)
 8001416:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <set_clock_TIM4+0x6c>)
 800141a:	f002 fad7 	bl	80039cc <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <set_clock_TIM4+0x54>
	  {
	    Error_Handler();
 8001424:	f000 f8be 	bl	80015a4 <Error_Handler>
	  }
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000001c 	.word	0x2000001c
 8001430:	cccccccd 	.word	0xcccccccd
 8001434:	20000020 	.word	0x20000020
 8001438:	20000018 	.word	0x20000018
 800143c:	20000174 	.word	0x20000174
 8001440:	20000230 	.word	0x20000230
 8001444:	40000800 	.word	0x40000800

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f000 fac3 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001452:	f000 f837 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f7ff fe93 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 800145a:	f7ff fe69 	bl	8001130 <MX_DMA_Init>
  MX_ADC1_Init();
 800145e:	f7ff fce5 	bl	8000e2c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001462:	f000 fa1d 	bl	80018a0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001466:	f7ff fd77 	bl	8000f58 <MX_DAC_Init>
  MX_TIM2_Init();
 800146a:	f000 f93d 	bl	80016e8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800146e:	f000 f987 	bl	8001780 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* Sine function */
  set_clock_TIM2();						// Setting frequency of timer 2
 8001472:	f7ff ff75 	bl	8001360 <set_clock_TIM2>
  set_clock_TIM4();						// Setting frequency of timer 4
 8001476:	f7ff ffad 	bl	80013d4 <set_clock_TIM4>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <main+0x6c>)
 800147c:	f002 fad1 	bl	8003a22 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);			// Start timer 4
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <main+0x70>)
 8001482:	f002 face 	bl	8003a22 <HAL_TIM_Base_Start>
  get_sine_val();						// Call get sineval function
 8001486:	f7ff fedb 	bl	8001240 <get_sine_val>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2328      	movs	r3, #40	; 0x28
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <main+0x74>)
 8001492:	2100      	movs	r1, #0
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <main+0x78>)
 8001496:	f000 fed9 	bl	800224c <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 800149a:	2300      	movs	r3, #0
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2328      	movs	r3, #40	; 0x28
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <main+0x74>)
 80014a2:	2110      	movs	r1, #16
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <main+0x78>)
 80014a6:	f000 fed1 	bl	800224c <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
	HAL_Delay(300);
 80014aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014ae:	f000 fb05 	bl	8001abc <HAL_Delay>
 80014b2:	e7fa      	b.n	80014aa <main+0x62>
 80014b4:	20000270 	.word	0x20000270
 80014b8:	20000230 	.word	0x20000230
 80014bc:	20000178 	.word	0x20000178
 80014c0:	200000f4 	.word	0x200000f4

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fa72 	bl	80049bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <SystemClock_Config+0xd8>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a2a      	ldr	r2, [pc, #168]	; (800159c <SystemClock_Config+0xd8>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <SystemClock_Config+0xd8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <SystemClock_Config+0xdc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <SystemClock_Config+0xdc>)
 800150e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <SystemClock_Config+0xdc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001534:	2308      	movs	r3, #8
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001538:	23b4      	movs	r3, #180	; 0xb4
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001540:	2307      	movs	r3, #7
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fe03 	bl	8003154 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001554:	f000 f826 	bl	80015a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001558:	f001 fdac 	bl	80030b4 <HAL_PWREx_EnableOverDrive>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001562:	f000 f81f 	bl	80015a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001572:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001576:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2105      	movs	r1, #5
 8001584:	4618      	mov	r0, r3
 8001586:	f002 f855 	bl	8003634 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001590:	f000 f808 	bl	80015a4 <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3750      	adds	r7, #80	; 0x50
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_MspInit+0x4c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x4c>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 fa14 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA1_Stream5_IRQHandler+0x10>)
 800165e:	f001 f8fd 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000094 	.word	0x20000094

0800166c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Stream6_IRQHandler+0x10>)
 8001672:	f001 f8f3 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000108 	.word	0x20000108

08001680 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <TIM2_IRQHandler+0x10>)
 8001686:	f002 f9f0 	bl	8003a6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000270 	.word	0x20000270

08001694 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM4_IRQHandler+0x10>)
 800169a:	f002 f9e6 	bl	8003a6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000230 	.word	0x20000230

080016a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM6_DAC_IRQHandler+0x10>)
 80016ae:	f000 fe7b 	bl	80023a8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000f4 	.word	0x200000f4

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <SystemInit+0x28>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <SystemInit+0x28>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SystemInit+0x28>)
 80016d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d6:	609a      	str	r2, [r3, #8]
#endif
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_TIM2_Init+0x94>)
 8001706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_TIM2_Init+0x94>)
 800170e:	2263      	movs	r2, #99	; 0x63
 8001710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_TIM2_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_TIM2_Init+0x94>)
 800171a:	2264      	movs	r2, #100	; 0x64
 800171c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_TIM2_Init+0x94>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_TIM2_Init+0x94>)
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <MX_TIM2_Init+0x94>)
 800172c:	f002 f94e 	bl	80039cc <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001736:	f7ff ff35 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_TIM2_Init+0x94>)
 8001748:	f002 fa97 	bl	8003c7a <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001752:	f7ff ff27 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001756:	2320      	movs	r3, #32
 8001758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_TIM2_Init+0x94>)
 8001764:	f002 fcac 	bl	80040c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800176e:	f7ff ff19 	bl	80015a4 <Error_Handler>
  }

}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000270 	.word	0x20000270

08001780 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_TIM4_Init+0x90>)
 800179e:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <MX_TIM4_Init+0x94>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_TIM4_Init+0x90>)
 80017a4:	2263      	movs	r2, #99	; 0x63
 80017a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_TIM4_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_TIM4_Init+0x90>)
 80017b0:	2264      	movs	r2, #100	; 0x64
 80017b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_TIM4_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_TIM4_Init+0x90>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017c0:	4813      	ldr	r0, [pc, #76]	; (8001810 <MX_TIM4_Init+0x90>)
 80017c2:	f002 f903 	bl	80039cc <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80017cc:	f7ff feea 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_TIM4_Init+0x90>)
 80017de:	f002 fa4c 	bl	8003c7a <HAL_TIM_ConfigClockSource>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80017e8:	f7ff fedc 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017ec:	2320      	movs	r3, #32
 80017ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_TIM4_Init+0x90>)
 80017fa:	f002 fc61 	bl	80040c0 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001804:	f7ff fece 	bl	80015a4 <Error_Handler>
  }

}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000230 	.word	0x20000230
 8001814:	40000800 	.word	0x40000800

08001818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d116      	bne.n	8001858 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_TIM_Base_MspInit+0x80>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_TIM_Base_MspInit+0x80>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_TIM_Base_MspInit+0x80>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201c      	movs	r0, #28
 800184c:	f000 fca5 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001850:	201c      	movs	r0, #28
 8001852:	f000 fcbe 	bl	80021d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001856:	e01a      	b.n	800188e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_TIM_Base_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d115      	bne.n	800188e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_TIM_Base_MspInit+0x80>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_TIM_Base_MspInit+0x80>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x80>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	201e      	movs	r0, #30
 8001884:	f000 fc89 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001888:	201e      	movs	r0, #30
 800188a:	f000 fca2 	bl	80021d2 <HAL_NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40000800 	.word	0x40000800

080018a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART1_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d8:	f002 fc82 	bl	80041e0 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f7ff fe5f 	bl	80015a4 <Error_Handler>
  }

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200002b0 	.word	0x200002b0
 80018f0:	40011000 	.word	0x40011000

080018f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_UART_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12c      	bne.n	8001970 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0x88>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_UART_MspInit+0x88>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x88>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_UART_MspInit+0x88>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800194e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001960:	2307      	movs	r3, #7
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_UART_MspInit+0x8c>)
 800196c:	f001 f9de 	bl	8002d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40011000 	.word	0x40011000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001988:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800198a:	e003      	b.n	8001994 <LoopCopyDataInit>

0800198c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800198e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001990:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001992:	3104      	adds	r1, #4

08001994 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001998:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800199a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800199c:	d3f6      	bcc.n	800198c <CopyDataInit>
  ldr  r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a0:	e002      	b.n	80019a8 <LoopFillZerobss>

080019a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019a4:	f842 3b04 	str.w	r3, [r2], #4

080019a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019ac:	d3f9      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ae:	f7ff fe85 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f002 ffdf 	bl	8004974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff fd47 	bl	8001448 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019bc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80019c0:	08005c18 	.word	0x08005c18
  ldr  r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c8:	20000030 	.word	0x20000030
  ldr  r2, =_sbss
 80019cc:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 80019d0:	200002f4 	.word	0x200002f4

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 fbbf 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fdd2 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fbd7 	bl	80021ee <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 fb9f 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000024 	.word	0x20000024
 8001a74:	2000002c 	.word	0x2000002c
 8001a78:	20000028 	.word	0x20000028

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000002c 	.word	0x2000002c
 8001aa0:	200002f0 	.word	0x200002f0

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200002f0 	.word	0x200002f0

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_Delay+0x40>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000002c 	.word	0x2000002c

08001b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e033      	b.n	8001b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff f9d6 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f94a 	bl	8001dec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1c>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e113      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x244>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d925      	bls.n	8001c00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b1e      	subs	r3, #30
 8001bca:	2207      	movs	r2, #7
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68d9      	ldr	r1, [r3, #12]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4403      	add	r3, r0
 8001bf2:	3b1e      	subs	r3, #30
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	e022      	b.n	8001c46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	2207      	movs	r2, #7
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6919      	ldr	r1, [r3, #16]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4403      	add	r3, r0
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d824      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b05      	subs	r3, #5
 8001c60:	221f      	movs	r2, #31
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b05      	subs	r3, #5
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
 8001c96:	e04c      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d824      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b23      	subs	r3, #35	; 0x23
 8001cb2:	221f      	movs	r2, #31
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b23      	subs	r3, #35	; 0x23
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce8:	e023      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b41      	subs	r3, #65	; 0x41
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b41      	subs	r3, #65	; 0x41
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_ADC_ConfigChannel+0x250>)
 8001d34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <HAL_ADC_ConfigChannel+0x254>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d10f      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1d8>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_ADC_ConfigChannel+0x254>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12b      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x23a>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_ADC_ConfigChannel+0x258>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <HAL_ADC_ConfigChannel+0x1f4>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b11      	cmp	r3, #17
 8001d7a:	d122      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <HAL_ADC_ConfigChannel+0x258>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d111      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_ADC_ConfigChannel+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_ADC_ConfigChannel+0x260>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9a      	lsrs	r2, r3, #18
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40012300 	.word	0x40012300
 8001ddc:	40012000 	.word	0x40012000
 8001de0:	10000012 	.word	0x10000012
 8001de4:	20000024 	.word	0x20000024
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <ADC_Init+0x1f0>)
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <ADC_Init+0x1f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e00f      	b.n	8001eea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	005a      	lsls	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	035a      	lsls	r2, r3, #13
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e007      	b.n	8001f60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	051a      	lsls	r2, r3, #20
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fa2:	025a      	lsls	r2, r3, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	029a      	lsls	r2, r3, #10
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	0f000001 	.word	0x0f000001

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e014      	b.n	8002242 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe fecb 	bl	8000fc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	795b      	ldrb	r3, [r3, #5]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_DAC_Start_DMA+0x1e>
 8002266:	2302      	movs	r3, #2
 8002268:	e08e      	b.n	8002388 <HAL_DAC_Start_DMA+0x13c>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2202      	movs	r2, #2
 8002274:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d12a      	bne.n	80022d2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a43      	ldr	r2, [pc, #268]	; (8002390 <HAL_DAC_Start_DMA+0x144>)
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a42      	ldr	r2, [pc, #264]	; (8002394 <HAL_DAC_Start_DMA+0x148>)
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a41      	ldr	r2, [pc, #260]	; (8002398 <HAL_DAC_Start_DMA+0x14c>)
 8002292:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022a2:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d009      	beq.n	80022be <HAL_DAC_Start_DMA+0x72>
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d00c      	beq.n	80022c8 <HAL_DAC_Start_DMA+0x7c>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d000      	beq.n	80022b4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80022b2:	e039      	b.n	8002328 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3308      	adds	r3, #8
 80022ba:	617b      	str	r3, [r7, #20]
        break;
 80022bc:	e034      	b.n	8002328 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	617b      	str	r3, [r7, #20]
        break;
 80022c6:	e02f      	b.n	8002328 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3310      	adds	r3, #16
 80022ce:	617b      	str	r3, [r7, #20]
        break;
 80022d0:	e02a      	b.n	8002328 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4a31      	ldr	r2, [pc, #196]	; (800239c <HAL_DAC_Start_DMA+0x150>)
 80022d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <HAL_DAC_Start_DMA+0x154>)
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <HAL_DAC_Start_DMA+0x158>)
 80022e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022f8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d009      	beq.n	8002314 <HAL_DAC_Start_DMA+0xc8>
 8002300:	2b08      	cmp	r3, #8
 8002302:	d00c      	beq.n	800231e <HAL_DAC_Start_DMA+0xd2>
 8002304:	2b00      	cmp	r3, #0
 8002306:	d000      	beq.n	800230a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002308:	e00e      	b.n	8002328 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	617b      	str	r3, [r7, #20]
        break;
 8002312:	e009      	b.n	8002328 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3318      	adds	r3, #24
 800231a:	617b      	str	r3, [r7, #20]
        break;
 800231c:	e004      	b.n	8002328 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	331c      	adds	r3, #28
 8002324:	617b      	str	r3, [r7, #20]
        break;
 8002326:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800233c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6898      	ldr	r0, [r3, #8]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f000 fa30 	bl	80027ac <HAL_DMA_Start_IT>
 800234c:	e00e      	b.n	800236c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800235c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68d8      	ldr	r0, [r3, #12]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	f000 fa20 	bl	80027ac <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6819      	ldr	r1, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	08002527 	.word	0x08002527
 8002394:	08002549 	.word	0x08002549
 8002398:	08002565 	.word	0x08002565
 800239c:	080025e3 	.word	0x080025e3
 80023a0:	08002605 	.word	0x08002605
 80023a4:	08002621 	.word	0x08002621

080023a8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023be:	d118      	bne.n	80023f2 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f843 	bl	8002478 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002400:	d118      	bne.n	8002434 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f043 0202 	orr.w	r2, r3, #2
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800241c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800242c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8cd 	bl	80025ce <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	795b      	ldrb	r3, [r3, #5]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_DAC_ConfigChannel+0x20>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e036      	b.n	800251a <HAL_DAC_ConfigChannel+0x8e>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2202      	movs	r2, #2
 80024b6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80024c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	4013      	ands	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	22c0      	movs	r2, #192	; 0xc0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff ff81 	bl	800243c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	711a      	strb	r2, [r3, #4]
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f7ff ff7a 	bl	8002450 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f043 0204 	orr.w	r2, r3, #4
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff ff70 	bl	8002464 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	711a      	strb	r2, [r3, #4]
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7ff ffce 	bl	8002592 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	711a      	strb	r2, [r3, #4]
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ffc7 	bl	80025a6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f043 0204 	orr.w	r2, r3, #4
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff ffbd 	bl	80025ba <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	711a      	strb	r2, [r3, #4]
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff fa22 	bl	8001aa4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e099      	b.n	80027a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268c:	e00f      	b.n	80026ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268e:	f7ff fa09 	bl	8001aa4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b05      	cmp	r3, #5
 800269a:	d908      	bls.n	80026ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e078      	b.n	80027a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e8      	bne.n	800268e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_DMA_Init+0x158>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2b04      	cmp	r3, #4
 8002706:	d107      	bne.n	8002718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	4313      	orrs	r3, r2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b04      	cmp	r3, #4
 8002740:	d117      	bne.n	8002772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fa6f 	bl	8002c38 <DMA_CheckFifoParam>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276e:	2301      	movs	r3, #1
 8002770:	e016      	b.n	80027a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa26 	bl	8002bcc <DMA_CalcBaseAndBitshift>
 8002780:	4603      	mov	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	223f      	movs	r2, #63	; 0x3f
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	f010803f 	.word	0xf010803f

080027ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_Start_IT+0x26>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e040      	b.n	8002854 <HAL_DMA_Start_IT+0xa8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d12f      	bne.n	8002846 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f9b8 	bl	8002b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	223f      	movs	r2, #63	; 0x3f
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0216 	orr.w	r2, r2, #22
 800281a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0208 	orr.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e005      	b.n	8002852 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800284e:	2302      	movs	r3, #2
 8002850:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002852:	7dfb      	ldrb	r3, [r7, #23]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002868:	4b92      	ldr	r3, [pc, #584]	; (8002ab4 <HAL_DMA_IRQHandler+0x258>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a92      	ldr	r2, [pc, #584]	; (8002ab8 <HAL_DMA_IRQHandler+0x25c>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a9b      	lsrs	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2208      	movs	r2, #8
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	2208      	movs	r2, #8
 80028b6:	409a      	lsls	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	2201      	movs	r2, #1
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2204      	movs	r2, #4
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d012      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2204      	movs	r2, #4
 8002922:	409a      	lsls	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	f043 0204 	orr.w	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2210      	movs	r2, #16
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d043      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d03c      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	2210      	movs	r2, #16
 8002958:	409a      	lsls	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d018      	beq.n	800299e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d024      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
 800298a:	e01f      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e016      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0208 	bic.w	r2, r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	2220      	movs	r2, #32
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 808e 	beq.w	8002afa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8086 	beq.w	8002afa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2220      	movs	r2, #32
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d136      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0216 	bic.w	r2, r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_DMA_IRQHandler+0x1da>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	223f      	movs	r2, #63	; 0x3f
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d07d      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
        }
        return;
 8002a72:	e078      	b.n	8002b66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01c      	beq.n	8002abc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d030      	beq.n	8002afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
 8002aa0:	e02b      	b.n	8002afa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d027      	beq.n	8002afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
 8002ab2:	e022      	b.n	8002afa <HAL_DMA_IRQHandler+0x29e>
 8002ab4:	20000024 	.word	0x20000024
 8002ab8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0210 	bic.w	r2, r2, #16
 8002ad8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d032      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d022      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2205      	movs	r2, #5
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d307      	bcc.n	8002b42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f2      	bne.n	8002b26 <HAL_DMA_IRQHandler+0x2ca>
 8002b40:	e000      	b.n	8002b44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b66:	bf00      	nop
    }
  }
}
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop

08002b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d108      	bne.n	8002bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bae:	e007      	b.n	8002bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3b10      	subs	r3, #16
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <DMA_CalcBaseAndBitshift+0x64>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <DMA_CalcBaseAndBitshift+0x68>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d909      	bls.n	8002c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c0c:	e007      	b.n	8002c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	aaaaaaab 	.word	0xaaaaaaab
 8002c34:	08005a28 	.word	0x08005a28

08002c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11f      	bne.n	8002c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d855      	bhi.n	8002d04 <DMA_CheckFifoParam+0xcc>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <DMA_CheckFifoParam+0x28>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c83 	.word	0x08002c83
 8002c68:	08002c71 	.word	0x08002c71
 8002c6c:	08002d05 	.word	0x08002d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d045      	beq.n	8002d08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c80:	e042      	b.n	8002d08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c8a:	d13f      	bne.n	8002d0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e03c      	b.n	8002d0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9a:	d121      	bne.n	8002ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d836      	bhi.n	8002d10 <DMA_CheckFifoParam+0xd8>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <DMA_CheckFifoParam+0x70>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002cbf 	.word	0x08002cbf
 8002cb0:	08002cb9 	.word	0x08002cb9
 8002cb4:	08002cd1 	.word	0x08002cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e02f      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d024      	beq.n	8002d14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cce:	e021      	b.n	8002d14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd8:	d11e      	bne.n	8002d18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cde:	e01b      	b.n	8002d18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d902      	bls.n	8002cec <DMA_CheckFifoParam+0xb4>
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d003      	beq.n	8002cf2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cea:	e018      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e015      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
      break;
 8002d02:	e00b      	b.n	8002d1c <DMA_CheckFifoParam+0xe4>
      break;
 8002d04:	bf00      	nop
 8002d06:	e00a      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;
 8002d08:	bf00      	nop
 8002d0a:	e008      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e006      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;
 8002d10:	bf00      	nop
 8002d12:	e004      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;
 8002d14:	bf00      	nop
 8002d16:	e002      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;   
 8002d18:	bf00      	nop
 8002d1a:	e000      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;
 8002d1c:	bf00      	nop
    }
  } 
  
  return status; 
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	e177      	b.n	8003038 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	f040 8166 	bne.w	8003032 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d00b      	beq.n	8002d86 <HAL_GPIO_Init+0x5a>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d7a:	2b11      	cmp	r3, #17
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b12      	cmp	r3, #18
 8002d84:	d130      	bne.n	8002de8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 0201 	and.w	r2, r3, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0xfc>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b12      	cmp	r3, #18
 8002e26:	d123      	bne.n	8002e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	08da      	lsrs	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3208      	adds	r2, #8
 8002e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	08da      	lsrs	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	69b9      	ldr	r1, [r7, #24]
 8002e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0203 	and.w	r2, r3, #3
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80c0 	beq.w	8003032 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b65      	ldr	r3, [pc, #404]	; (800304c <HAL_GPIO_Init+0x320>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a64      	ldr	r2, [pc, #400]	; (800304c <HAL_GPIO_Init+0x320>)
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b62      	ldr	r3, [pc, #392]	; (800304c <HAL_GPIO_Init+0x320>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ece:	4a60      	ldr	r2, [pc, #384]	; (8003050 <HAL_GPIO_Init+0x324>)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	220f      	movs	r2, #15
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a57      	ldr	r2, [pc, #348]	; (8003054 <HAL_GPIO_Init+0x328>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d037      	beq.n	8002f6a <HAL_GPIO_Init+0x23e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a56      	ldr	r2, [pc, #344]	; (8003058 <HAL_GPIO_Init+0x32c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d031      	beq.n	8002f66 <HAL_GPIO_Init+0x23a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a55      	ldr	r2, [pc, #340]	; (800305c <HAL_GPIO_Init+0x330>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02b      	beq.n	8002f62 <HAL_GPIO_Init+0x236>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a54      	ldr	r2, [pc, #336]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d025      	beq.n	8002f5e <HAL_GPIO_Init+0x232>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a53      	ldr	r2, [pc, #332]	; (8003064 <HAL_GPIO_Init+0x338>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01f      	beq.n	8002f5a <HAL_GPIO_Init+0x22e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_GPIO_Init+0x33c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d019      	beq.n	8002f56 <HAL_GPIO_Init+0x22a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_GPIO_Init+0x340>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x226>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	; (8003070 <HAL_GPIO_Init+0x344>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x222>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4f      	ldr	r2, [pc, #316]	; (8003074 <HAL_GPIO_Init+0x348>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x21e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4e      	ldr	r2, [pc, #312]	; (8003078 <HAL_GPIO_Init+0x34c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x21a>
 8002f42:	2309      	movs	r3, #9
 8002f44:	e012      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f46:	230a      	movs	r3, #10
 8002f48:	e010      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	e00e      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f4e:	2307      	movs	r3, #7
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f52:	2306      	movs	r3, #6
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	4934      	ldr	r1, [pc, #208]	; (8003050 <HAL_GPIO_Init+0x324>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8a:	4b3c      	ldr	r3, [pc, #240]	; (800307c <HAL_GPIO_Init+0x350>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fae:	4a33      	ldr	r2, [pc, #204]	; (800307c <HAL_GPIO_Init+0x350>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_GPIO_Init+0x350>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd8:	4a28      	ldr	r2, [pc, #160]	; (800307c <HAL_GPIO_Init+0x350>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fde:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_GPIO_Init+0x350>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003002:	4a1e      	ldr	r2, [pc, #120]	; (800307c <HAL_GPIO_Init+0x350>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003008:	4b1c      	ldr	r3, [pc, #112]	; (800307c <HAL_GPIO_Init+0x350>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800302c:	4a13      	ldr	r2, [pc, #76]	; (800307c <HAL_GPIO_Init+0x350>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f67f ae84 	bls.w	8002d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003040:	bf00      	nop
 8003042:	3724      	adds	r7, #36	; 0x24
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40023800 	.word	0x40023800
 8003050:	40013800 	.word	0x40013800
 8003054:	40020000 	.word	0x40020000
 8003058:	40020400 	.word	0x40020400
 800305c:	40020800 	.word	0x40020800
 8003060:	40020c00 	.word	0x40020c00
 8003064:	40021000 	.word	0x40021000
 8003068:	40021400 	.word	0x40021400
 800306c:	40021800 	.word	0x40021800
 8003070:	40021c00 	.word	0x40021c00
 8003074:	40022000 	.word	0x40022000
 8003078:	40022400 	.word	0x40022400
 800307c:	40013c00 	.word	0x40013c00

08003080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003090:	787b      	ldrb	r3, [r7, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800309c:	e003      	b.n	80030a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	041a      	lsls	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	619a      	str	r2, [r3, #24]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_PWREx_EnableOverDrive+0x90>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_PWREx_EnableOverDrive+0x90>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_PWREx_EnableOverDrive+0x90>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_PWREx_EnableOverDrive+0x94>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e0:	f7fe fce0 	bl	8001aa4 <HAL_GetTick>
 80030e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030e6:	e009      	b.n	80030fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030e8:	f7fe fcdc 	bl	8001aa4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f6:	d901      	bls.n	80030fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e01f      	b.n	800313c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_PWREx_EnableOverDrive+0x98>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d1ee      	bne.n	80030e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_PWREx_EnableOverDrive+0x9c>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003110:	f7fe fcc8 	bl	8001aa4 <HAL_GetTick>
 8003114:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003116:	e009      	b.n	800312c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003118:	f7fe fcc4 	bl	8001aa4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003126:	d901      	bls.n	800312c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e007      	b.n	800313c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_PWREx_EnableOverDrive+0x98>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003138:	d1ee      	bne.n	8003118 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	420e0040 	.word	0x420e0040
 800314c:	40007000 	.word	0x40007000
 8003150:	420e0044 	.word	0x420e0044

08003154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e25b      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d075      	beq.n	800325e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003172:	4ba3      	ldr	r3, [pc, #652]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d00c      	beq.n	8003198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4ba0      	ldr	r3, [pc, #640]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003186:	2b08      	cmp	r3, #8
 8003188:	d112      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b9d      	ldr	r3, [pc, #628]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003196:	d10b      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	4b99      	ldr	r3, [pc, #612]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05b      	beq.n	800325c <HAL_RCC_OscConfig+0x108>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d157      	bne.n	800325c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e236      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x74>
 80031ba:	4b91      	ldr	r3, [pc, #580]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a90      	ldr	r2, [pc, #576]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e01d      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x98>
 80031d2:	4b8b      	ldr	r3, [pc, #556]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a8a      	ldr	r2, [pc, #552]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b88      	ldr	r3, [pc, #544]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a87      	ldr	r2, [pc, #540]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031ec:	4b84      	ldr	r3, [pc, #528]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a83      	ldr	r2, [pc, #524]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b81      	ldr	r3, [pc, #516]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a80      	ldr	r2, [pc, #512]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fc4a 	bl	8001aa4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fc46 	bl	8001aa4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1fb      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0xc0>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe fc36 	bl	8001aa4 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe fc32 	bl	8001aa4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1e7      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0xe8>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326a:	4b65      	ldr	r3, [pc, #404]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b62      	ldr	r3, [pc, #392]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327e:	2b08      	cmp	r3, #8
 8003280:	d11c      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d116      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	4b5c      	ldr	r3, [pc, #368]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1bb      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4952      	ldr	r1, [pc, #328]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	e03a      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCC_OscConfig+0x2b0>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fbeb 	bl	8001aa4 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fe fbe7 	bl	8001aa4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e19c      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4940      	ldr	r1, [pc, #256]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
 8003304:	e015      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003306:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <HAL_RCC_OscConfig+0x2b0>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe fbca 	bl	8001aa4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003314:	f7fe fbc6 	bl	8001aa4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e17b      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d030      	beq.n	80033a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_OscConfig+0x2b4>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fbaa 	bl	8001aa4 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe fba6 	bl	8001aa4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e15b      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x200>
 8003372:	e015      	b.n	80033a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x2b4>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fe fb93 	bl	8001aa4 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003382:	f7fe fb8f 	bl	8001aa4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e144      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a0 	beq.w	80034ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_OscConfig+0x2b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d121      	bne.n	800342e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_RCC_OscConfig+0x2b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <HAL_RCC_OscConfig+0x2b8>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fe fb55 	bl	8001aa4 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e011      	b.n	8003422 <HAL_RCC_OscConfig+0x2ce>
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	42470000 	.word	0x42470000
 8003408:	42470e80 	.word	0x42470e80
 800340c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003410:	f7fe fb48 	bl	8001aa4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0fd      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b81      	ldr	r3, [pc, #516]	; (8003628 <HAL_RCC_OscConfig+0x4d4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x2f0>
 8003436:	4b7d      	ldr	r3, [pc, #500]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a7c      	ldr	r2, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	e01c      	b.n	800347e <HAL_RCC_OscConfig+0x32a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x312>
 800344c:	4b77      	ldr	r3, [pc, #476]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a76      	ldr	r2, [pc, #472]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
 8003458:	4b74      	ldr	r3, [pc, #464]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a73      	ldr	r2, [pc, #460]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x32a>
 8003466:	4b71      	ldr	r3, [pc, #452]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	4a70      	ldr	r2, [pc, #448]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6713      	str	r3, [r2, #112]	; 0x70
 8003472:	4b6e      	ldr	r3, [pc, #440]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a6d      	ldr	r2, [pc, #436]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe fb0d 	bl	8001aa4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fb09 	bl	8001aa4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0bc      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCC_OscConfig+0x33a>
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe faf7 	bl	8001aa4 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe faf3 	bl	8001aa4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0a6      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	4b56      	ldr	r3, [pc, #344]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a51      	ldr	r2, [pc, #324]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8092 	beq.w	800361c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f8:	4b4c      	ldr	r3, [pc, #304]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d05c      	beq.n	80035be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d141      	bne.n	8003590 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b48      	ldr	r3, [pc, #288]	; (8003630 <HAL_RCC_OscConfig+0x4dc>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe fac7 	bl	8001aa4 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe fac3 	bl	8001aa4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e078      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352c:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	019b      	lsls	r3, r3, #6
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	3b01      	subs	r3, #1
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	061b      	lsls	r3, r3, #24
 800355c:	4933      	ldr	r1, [pc, #204]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003562:	4b33      	ldr	r3, [pc, #204]	; (8003630 <HAL_RCC_OscConfig+0x4dc>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fa9c 	bl	8001aa4 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fa98 	bl	8001aa4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04d      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b2a      	ldr	r3, [pc, #168]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x41c>
 800358e:	e045      	b.n	800361c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_OscConfig+0x4dc>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe fa85 	bl	8001aa4 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe fa81 	bl	8001aa4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e036      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x44a>
 80035bc:	e02e      	b.n	800361c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e029      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <HAL_RCC_OscConfig+0x4d8>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11c      	bne.n	8003618 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d115      	bne.n	8003618 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f2:	4013      	ands	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10d      	bne.n	8003618 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d106      	bne.n	8003618 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40007000 	.word	0x40007000
 800362c:	40023800 	.word	0x40023800
 8003630:	42470060 	.word	0x42470060

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cc      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d90c      	bls.n	8003670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d044      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e067      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4934      	ldr	r1, [pc, #208]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fe f9be 	bl	8001aa4 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe f9ba 	bl	8001aa4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d20c      	bcs.n	800377c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f821 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 80037be:	4601      	mov	r1, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	5cd3      	ldrb	r3, [r2, r3]
 80037ce:	fa21 f303 	lsr.w	r3, r1, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe f91e 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08005a10 	.word	0x08005a10
 80037f8:	20000024 	.word	0x20000024
 80037fc:	20000028 	.word	0x20000028

08003800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	2300      	movs	r3, #0
 8003810:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003816:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCC_GetSysClockFreq+0x158>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d007      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x32>
 8003822:	2b08      	cmp	r3, #8
 8003824:	d008      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x38>
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 808d 	bne.w	8003946 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_RCC_GetSysClockFreq+0x15c>)
 800382e:	60bb      	str	r3, [r7, #8]
       break;
 8003830:	e08c      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003832:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <HAL_RCC_GetSysClockFreq+0x160>)
 8003834:	60bb      	str	r3, [r7, #8]
      break;
 8003836:	e089      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003838:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_GetSysClockFreq+0x158>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003840:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003842:	4b45      	ldr	r3, [pc, #276]	; (8003958 <HAL_RCC_GetSysClockFreq+0x158>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d023      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b42      	ldr	r3, [pc, #264]	; (8003958 <HAL_RCC_GetSysClockFreq+0x158>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	f04f 0400 	mov.w	r4, #0
 8003858:	f240 11ff 	movw	r1, #511	; 0x1ff
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	ea03 0501 	and.w	r5, r3, r1
 8003864:	ea04 0602 	and.w	r6, r4, r2
 8003868:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <HAL_RCC_GetSysClockFreq+0x160>)
 800386a:	fb02 f106 	mul.w	r1, r2, r6
 800386e:	2200      	movs	r2, #0
 8003870:	fb02 f205 	mul.w	r2, r2, r5
 8003874:	440a      	add	r2, r1
 8003876:	493a      	ldr	r1, [pc, #232]	; (8003960 <HAL_RCC_GetSysClockFreq+0x160>)
 8003878:	fba5 0101 	umull	r0, r1, r5, r1
 800387c:	1853      	adds	r3, r2, r1
 800387e:	4619      	mov	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f04f 0400 	mov.w	r4, #0
 8003886:	461a      	mov	r2, r3
 8003888:	4623      	mov	r3, r4
 800388a:	f7fd f94f 	bl	8000b2c <__aeabi_uldivmod>
 800388e:	4603      	mov	r3, r0
 8003890:	460c      	mov	r4, r1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e049      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003896:	4b30      	ldr	r3, [pc, #192]	; (8003958 <HAL_RCC_GetSysClockFreq+0x158>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	099b      	lsrs	r3, r3, #6
 800389c:	f04f 0400 	mov.w	r4, #0
 80038a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	ea03 0501 	and.w	r5, r3, r1
 80038ac:	ea04 0602 	and.w	r6, r4, r2
 80038b0:	4629      	mov	r1, r5
 80038b2:	4632      	mov	r2, r6
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	f04f 0400 	mov.w	r4, #0
 80038bc:	0154      	lsls	r4, r2, #5
 80038be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038c2:	014b      	lsls	r3, r1, #5
 80038c4:	4619      	mov	r1, r3
 80038c6:	4622      	mov	r2, r4
 80038c8:	1b49      	subs	r1, r1, r5
 80038ca:	eb62 0206 	sbc.w	r2, r2, r6
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	f04f 0400 	mov.w	r4, #0
 80038d6:	0194      	lsls	r4, r2, #6
 80038d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038dc:	018b      	lsls	r3, r1, #6
 80038de:	1a5b      	subs	r3, r3, r1
 80038e0:	eb64 0402 	sbc.w	r4, r4, r2
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	00e2      	lsls	r2, r4, #3
 80038ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038f2:	00d9      	lsls	r1, r3, #3
 80038f4:	460b      	mov	r3, r1
 80038f6:	4614      	mov	r4, r2
 80038f8:	195b      	adds	r3, r3, r5
 80038fa:	eb44 0406 	adc.w	r4, r4, r6
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	02a2      	lsls	r2, r4, #10
 8003908:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800390c:	0299      	lsls	r1, r3, #10
 800390e:	460b      	mov	r3, r1
 8003910:	4614      	mov	r4, r2
 8003912:	4618      	mov	r0, r3
 8003914:	4621      	mov	r1, r4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f04f 0400 	mov.w	r4, #0
 800391c:	461a      	mov	r2, r3
 800391e:	4623      	mov	r3, r4
 8003920:	f7fd f904 	bl	8000b2c <__aeabi_uldivmod>
 8003924:	4603      	mov	r3, r0
 8003926:	460c      	mov	r4, r1
 8003928:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_GetSysClockFreq+0x158>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	3301      	adds	r3, #1
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	60bb      	str	r3, [r7, #8]
      break;
 8003944:	e002      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003948:	60bb      	str	r3, [r7, #8]
      break;
 800394a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394c:	68bb      	ldr	r3, [r7, #8]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400
 8003960:	017d7840 	.word	0x017d7840

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000024 	.word	0x20000024

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4601      	mov	r1, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	08005a20 	.word	0x08005a20

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a8:	f7ff ffdc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ac:	4601      	mov	r1, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0b5b      	lsrs	r3, r3, #13
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4a03      	ldr	r2, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ba:	5cd3      	ldrb	r3, [r2, r3]
 80039bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08005a20 	.word	0x08005a20

080039cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e01d      	b.n	8003a1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd ff10 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fa1e 	bl	8003e4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d007      	beq.n	8003a54 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d122      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d11b      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f06f 0202 	mvn.w	r2, #2
 8003a96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f9af 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003ab2:	e005      	b.n	8003ac0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f9a1 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f9b2 	bl	8003e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d122      	bne.n	8003b1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d11b      	bne.n	8003b1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f06f 0204 	mvn.w	r2, #4
 8003aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f985 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003b06:	e005      	b.n	8003b14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f977 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f988 	bl	8003e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d122      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d11b      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0208 	mvn.w	r2, #8
 8003b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2204      	movs	r2, #4
 8003b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f95b 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003b5a:	e005      	b.n	8003b68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f94d 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f95e 	bl	8003e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d122      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d11b      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0210 	mvn.w	r2, #16
 8003b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2208      	movs	r2, #8
 8003b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f931 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003bae:	e005      	b.n	8003bbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f923 	bl	8003dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f934 	bl	8003e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d10e      	bne.n	8003bee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d107      	bne.n	8003bee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f06f 0201 	mvn.w	r2, #1
 8003be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8fd 	bl	8003de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d10e      	bne.n	8003c1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	d107      	bne.n	8003c1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fad9 	bl	80041cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d10e      	bne.n	8003c46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f8f9 	bl	8003e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d10e      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d107      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f06f 0220 	mvn.w	r2, #32
 8003c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 faa3 	bl	80041b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_ConfigClockSource+0x18>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0a6      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x166>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cb0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d067      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x120>
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d80b      	bhi.n	8003ce6 <HAL_TIM_ConfigClockSource+0x6c>
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d073      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x140>
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d802      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x62>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d06f      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cda:	e078      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d06c      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x140>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d06a      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003ce4:	e073      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ce6:	2b70      	cmp	r3, #112	; 0x70
 8003ce8:	d00d      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x8c>
 8003cea:	2b70      	cmp	r3, #112	; 0x70
 8003cec:	d804      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x7e>
 8003cee:	2b50      	cmp	r3, #80	; 0x50
 8003cf0:	d033      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xe0>
 8003cf2:	2b60      	cmp	r3, #96	; 0x60
 8003cf4:	d041      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003cf6:	e06a      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d066      	beq.n	8003dcc <HAL_TIM_ConfigClockSource+0x152>
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d017      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d04:	e063      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f000 f9b3 	bl	8004080 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	609a      	str	r2, [r3, #8]
      break;
 8003d32:	e04c      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f000 f99c 	bl	8004080 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d56:	609a      	str	r2, [r3, #8]
      break;
 8003d58:	e039      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 f910 	bl	8003f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2150      	movs	r1, #80	; 0x50
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f969 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003d78:	e029      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 f92f 	bl	8003fea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2160      	movs	r1, #96	; 0x60
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f959 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003d98:	e019      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 f8f0 	bl	8003f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f949 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003db8:	e009      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 f940 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003dca:	e000      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a40      	ldr	r2, [pc, #256]	; (8003f60 <TIM_Base_SetConfig+0x114>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6a:	d00f      	beq.n	8003e8c <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <TIM_Base_SetConfig+0x118>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <TIM_Base_SetConfig+0x11c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3b      	ldr	r2, [pc, #236]	; (8003f6c <TIM_Base_SetConfig+0x120>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3a      	ldr	r2, [pc, #232]	; (8003f70 <TIM_Base_SetConfig+0x124>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d108      	bne.n	8003e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <TIM_Base_SetConfig+0x114>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02b      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eac:	d027      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2c      	ldr	r2, [pc, #176]	; (8003f64 <TIM_Base_SetConfig+0x118>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d023      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	; (8003f68 <TIM_Base_SetConfig+0x11c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01f      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <TIM_Base_SetConfig+0x120>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01b      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <TIM_Base_SetConfig+0x124>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d017      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <TIM_Base_SetConfig+0x128>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <TIM_Base_SetConfig+0x12c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00f      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <TIM_Base_SetConfig+0x130>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a25      	ldr	r2, [pc, #148]	; (8003f80 <TIM_Base_SetConfig+0x134>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <TIM_Base_SetConfig+0x138>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <TIM_Base_SetConfig+0x13c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d108      	bne.n	8003f10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <TIM_Base_SetConfig+0x114>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0xf8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d103      	bne.n	8003f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	615a      	str	r2, [r3, #20]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	40001800 	.word	0x40001800
 8003f84:	40001c00 	.word	0x40001c00
 8003f88:	40002000 	.word	0x40002000

08003f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0201 	bic.w	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 030a 	bic.w	r3, r3, #10
 8003fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0210 	bic.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	031b      	lsls	r3, r3, #12
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	f043 0307 	orr.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800409a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e05a      	b.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a21      	ldr	r2, [pc, #132]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d01d      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10c      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	4313      	orrs	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40010400 	.word	0x40010400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40001800 	.word	0x40001800

080041b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e03f      	b.n	8004272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fb74 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f829 	bl	800427c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042be:	f023 030c 	bic.w	r3, r3, #12
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	68f9      	ldr	r1, [r7, #12]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ea:	f040 818b 	bne.w	8004604 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4ac1      	ldr	r2, [pc, #772]	; (80045f8 <UART_SetConfig+0x37c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d005      	beq.n	8004304 <UART_SetConfig+0x88>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4abf      	ldr	r2, [pc, #764]	; (80045fc <UART_SetConfig+0x380>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f040 80bd 	bne.w	800447e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7ff fb4e 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8004308:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	461d      	mov	r5, r3
 800430e:	f04f 0600 	mov.w	r6, #0
 8004312:	46a8      	mov	r8, r5
 8004314:	46b1      	mov	r9, r6
 8004316:	eb18 0308 	adds.w	r3, r8, r8
 800431a:	eb49 0409 	adc.w	r4, r9, r9
 800431e:	4698      	mov	r8, r3
 8004320:	46a1      	mov	r9, r4
 8004322:	eb18 0805 	adds.w	r8, r8, r5
 8004326:	eb49 0906 	adc.w	r9, r9, r6
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004336:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800433a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800433e:	4688      	mov	r8, r1
 8004340:	4691      	mov	r9, r2
 8004342:	eb18 0005 	adds.w	r0, r8, r5
 8004346:	eb49 0106 	adc.w	r1, r9, r6
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	461d      	mov	r5, r3
 8004350:	f04f 0600 	mov.w	r6, #0
 8004354:	196b      	adds	r3, r5, r5
 8004356:	eb46 0406 	adc.w	r4, r6, r6
 800435a:	461a      	mov	r2, r3
 800435c:	4623      	mov	r3, r4
 800435e:	f7fc fbe5 	bl	8000b2c <__aeabi_uldivmod>
 8004362:	4603      	mov	r3, r0
 8004364:	460c      	mov	r4, r1
 8004366:	461a      	mov	r2, r3
 8004368:	4ba5      	ldr	r3, [pc, #660]	; (8004600 <UART_SetConfig+0x384>)
 800436a:	fba3 2302 	umull	r2, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	461d      	mov	r5, r3
 8004378:	f04f 0600 	mov.w	r6, #0
 800437c:	46a9      	mov	r9, r5
 800437e:	46b2      	mov	sl, r6
 8004380:	eb19 0309 	adds.w	r3, r9, r9
 8004384:	eb4a 040a 	adc.w	r4, sl, sl
 8004388:	4699      	mov	r9, r3
 800438a:	46a2      	mov	sl, r4
 800438c:	eb19 0905 	adds.w	r9, r9, r5
 8004390:	eb4a 0a06 	adc.w	sl, sl, r6
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043a8:	4689      	mov	r9, r1
 80043aa:	4692      	mov	sl, r2
 80043ac:	eb19 0005 	adds.w	r0, r9, r5
 80043b0:	eb4a 0106 	adc.w	r1, sl, r6
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	461d      	mov	r5, r3
 80043ba:	f04f 0600 	mov.w	r6, #0
 80043be:	196b      	adds	r3, r5, r5
 80043c0:	eb46 0406 	adc.w	r4, r6, r6
 80043c4:	461a      	mov	r2, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	f7fc fbb0 	bl	8000b2c <__aeabi_uldivmod>
 80043cc:	4603      	mov	r3, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b8b      	ldr	r3, [pc, #556]	; (8004600 <UART_SetConfig+0x384>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	3332      	adds	r3, #50	; 0x32
 80043e6:	4a86      	ldr	r2, [pc, #536]	; (8004600 <UART_SetConfig+0x384>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043f4:	4498      	add	r8, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	461d      	mov	r5, r3
 80043fa:	f04f 0600 	mov.w	r6, #0
 80043fe:	46a9      	mov	r9, r5
 8004400:	46b2      	mov	sl, r6
 8004402:	eb19 0309 	adds.w	r3, r9, r9
 8004406:	eb4a 040a 	adc.w	r4, sl, sl
 800440a:	4699      	mov	r9, r3
 800440c:	46a2      	mov	sl, r4
 800440e:	eb19 0905 	adds.w	r9, r9, r5
 8004412:	eb4a 0a06 	adc.w	sl, sl, r6
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004422:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004426:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800442a:	4689      	mov	r9, r1
 800442c:	4692      	mov	sl, r2
 800442e:	eb19 0005 	adds.w	r0, r9, r5
 8004432:	eb4a 0106 	adc.w	r1, sl, r6
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	461d      	mov	r5, r3
 800443c:	f04f 0600 	mov.w	r6, #0
 8004440:	196b      	adds	r3, r5, r5
 8004442:	eb46 0406 	adc.w	r4, r6, r6
 8004446:	461a      	mov	r2, r3
 8004448:	4623      	mov	r3, r4
 800444a:	f7fc fb6f 	bl	8000b2c <__aeabi_uldivmod>
 800444e:	4603      	mov	r3, r0
 8004450:	460c      	mov	r4, r1
 8004452:	461a      	mov	r2, r3
 8004454:	4b6a      	ldr	r3, [pc, #424]	; (8004600 <UART_SetConfig+0x384>)
 8004456:	fba3 1302 	umull	r1, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2164      	movs	r1, #100	; 0x64
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a65      	ldr	r2, [pc, #404]	; (8004600 <UART_SetConfig+0x384>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 0207 	and.w	r2, r3, #7
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4442      	add	r2, r8
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	e26f      	b.n	800495e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800447e:	f7ff fa7d 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004482:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	461d      	mov	r5, r3
 8004488:	f04f 0600 	mov.w	r6, #0
 800448c:	46a8      	mov	r8, r5
 800448e:	46b1      	mov	r9, r6
 8004490:	eb18 0308 	adds.w	r3, r8, r8
 8004494:	eb49 0409 	adc.w	r4, r9, r9
 8004498:	4698      	mov	r8, r3
 800449a:	46a1      	mov	r9, r4
 800449c:	eb18 0805 	adds.w	r8, r8, r5
 80044a0:	eb49 0906 	adc.w	r9, r9, r6
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044b8:	4688      	mov	r8, r1
 80044ba:	4691      	mov	r9, r2
 80044bc:	eb18 0005 	adds.w	r0, r8, r5
 80044c0:	eb49 0106 	adc.w	r1, r9, r6
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	461d      	mov	r5, r3
 80044ca:	f04f 0600 	mov.w	r6, #0
 80044ce:	196b      	adds	r3, r5, r5
 80044d0:	eb46 0406 	adc.w	r4, r6, r6
 80044d4:	461a      	mov	r2, r3
 80044d6:	4623      	mov	r3, r4
 80044d8:	f7fc fb28 	bl	8000b2c <__aeabi_uldivmod>
 80044dc:	4603      	mov	r3, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	461a      	mov	r2, r3
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <UART_SetConfig+0x384>)
 80044e4:	fba3 2302 	umull	r2, r3, r3, r2
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	461d      	mov	r5, r3
 80044f2:	f04f 0600 	mov.w	r6, #0
 80044f6:	46a9      	mov	r9, r5
 80044f8:	46b2      	mov	sl, r6
 80044fa:	eb19 0309 	adds.w	r3, r9, r9
 80044fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004502:	4699      	mov	r9, r3
 8004504:	46a2      	mov	sl, r4
 8004506:	eb19 0905 	adds.w	r9, r9, r5
 800450a:	eb4a 0a06 	adc.w	sl, sl, r6
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800451a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800451e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004522:	4689      	mov	r9, r1
 8004524:	4692      	mov	sl, r2
 8004526:	eb19 0005 	adds.w	r0, r9, r5
 800452a:	eb4a 0106 	adc.w	r1, sl, r6
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	461d      	mov	r5, r3
 8004534:	f04f 0600 	mov.w	r6, #0
 8004538:	196b      	adds	r3, r5, r5
 800453a:	eb46 0406 	adc.w	r4, r6, r6
 800453e:	461a      	mov	r2, r3
 8004540:	4623      	mov	r3, r4
 8004542:	f7fc faf3 	bl	8000b2c <__aeabi_uldivmod>
 8004546:	4603      	mov	r3, r0
 8004548:	460c      	mov	r4, r1
 800454a:	461a      	mov	r2, r3
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <UART_SetConfig+0x384>)
 800454e:	fba3 1302 	umull	r1, r3, r3, r2
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2164      	movs	r1, #100	; 0x64
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	3332      	adds	r3, #50	; 0x32
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <UART_SetConfig+0x384>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800456e:	4498      	add	r8, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	461d      	mov	r5, r3
 8004574:	f04f 0600 	mov.w	r6, #0
 8004578:	46a9      	mov	r9, r5
 800457a:	46b2      	mov	sl, r6
 800457c:	eb19 0309 	adds.w	r3, r9, r9
 8004580:	eb4a 040a 	adc.w	r4, sl, sl
 8004584:	4699      	mov	r9, r3
 8004586:	46a2      	mov	sl, r4
 8004588:	eb19 0905 	adds.w	r9, r9, r5
 800458c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045a4:	4689      	mov	r9, r1
 80045a6:	4692      	mov	sl, r2
 80045a8:	eb19 0005 	adds.w	r0, r9, r5
 80045ac:	eb4a 0106 	adc.w	r1, sl, r6
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	461d      	mov	r5, r3
 80045b6:	f04f 0600 	mov.w	r6, #0
 80045ba:	196b      	adds	r3, r5, r5
 80045bc:	eb46 0406 	adc.w	r4, r6, r6
 80045c0:	461a      	mov	r2, r3
 80045c2:	4623      	mov	r3, r4
 80045c4:	f7fc fab2 	bl	8000b2c <__aeabi_uldivmod>
 80045c8:	4603      	mov	r3, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <UART_SetConfig+0x384>)
 80045d0:	fba3 1302 	umull	r1, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	2164      	movs	r1, #100	; 0x64
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	3332      	adds	r3, #50	; 0x32
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <UART_SetConfig+0x384>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f003 0207 	and.w	r2, r3, #7
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4442      	add	r2, r8
 80045f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80045f6:	e1b2      	b.n	800495e <UART_SetConfig+0x6e2>
 80045f8:	40011000 	.word	0x40011000
 80045fc:	40011400 	.word	0x40011400
 8004600:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4ad7      	ldr	r2, [pc, #860]	; (8004968 <UART_SetConfig+0x6ec>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d005      	beq.n	800461a <UART_SetConfig+0x39e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4ad6      	ldr	r2, [pc, #856]	; (800496c <UART_SetConfig+0x6f0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	f040 80d1 	bne.w	80047bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800461a:	f7ff f9c3 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 800461e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	469a      	mov	sl, r3
 8004624:	f04f 0b00 	mov.w	fp, #0
 8004628:	46d0      	mov	r8, sl
 800462a:	46d9      	mov	r9, fp
 800462c:	eb18 0308 	adds.w	r3, r8, r8
 8004630:	eb49 0409 	adc.w	r4, r9, r9
 8004634:	4698      	mov	r8, r3
 8004636:	46a1      	mov	r9, r4
 8004638:	eb18 080a 	adds.w	r8, r8, sl
 800463c:	eb49 090b 	adc.w	r9, r9, fp
 8004640:	f04f 0100 	mov.w	r1, #0
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800464c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004650:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004654:	4688      	mov	r8, r1
 8004656:	4691      	mov	r9, r2
 8004658:	eb1a 0508 	adds.w	r5, sl, r8
 800465c:	eb4b 0609 	adc.w	r6, fp, r9
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4619      	mov	r1, r3
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	f04f 0400 	mov.w	r4, #0
 8004672:	0094      	lsls	r4, r2, #2
 8004674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004678:	008b      	lsls	r3, r1, #2
 800467a:	461a      	mov	r2, r3
 800467c:	4623      	mov	r3, r4
 800467e:	4628      	mov	r0, r5
 8004680:	4631      	mov	r1, r6
 8004682:	f7fc fa53 	bl	8000b2c <__aeabi_uldivmod>
 8004686:	4603      	mov	r3, r0
 8004688:	460c      	mov	r4, r1
 800468a:	461a      	mov	r2, r3
 800468c:	4bb8      	ldr	r3, [pc, #736]	; (8004970 <UART_SetConfig+0x6f4>)
 800468e:	fba3 2302 	umull	r2, r3, r3, r2
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	469b      	mov	fp, r3
 800469c:	f04f 0c00 	mov.w	ip, #0
 80046a0:	46d9      	mov	r9, fp
 80046a2:	46e2      	mov	sl, ip
 80046a4:	eb19 0309 	adds.w	r3, r9, r9
 80046a8:	eb4a 040a 	adc.w	r4, sl, sl
 80046ac:	4699      	mov	r9, r3
 80046ae:	46a2      	mov	sl, r4
 80046b0:	eb19 090b 	adds.w	r9, r9, fp
 80046b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046cc:	4689      	mov	r9, r1
 80046ce:	4692      	mov	sl, r2
 80046d0:	eb1b 0509 	adds.w	r5, fp, r9
 80046d4:	eb4c 060a 	adc.w	r6, ip, sl
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4619      	mov	r1, r3
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	f04f 0400 	mov.w	r4, #0
 80046ea:	0094      	lsls	r4, r2, #2
 80046ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046f0:	008b      	lsls	r3, r1, #2
 80046f2:	461a      	mov	r2, r3
 80046f4:	4623      	mov	r3, r4
 80046f6:	4628      	mov	r0, r5
 80046f8:	4631      	mov	r1, r6
 80046fa:	f7fc fa17 	bl	8000b2c <__aeabi_uldivmod>
 80046fe:	4603      	mov	r3, r0
 8004700:	460c      	mov	r4, r1
 8004702:	461a      	mov	r2, r3
 8004704:	4b9a      	ldr	r3, [pc, #616]	; (8004970 <UART_SetConfig+0x6f4>)
 8004706:	fba3 1302 	umull	r1, r3, r3, r2
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2164      	movs	r1, #100	; 0x64
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	3332      	adds	r3, #50	; 0x32
 8004718:	4a95      	ldr	r2, [pc, #596]	; (8004970 <UART_SetConfig+0x6f4>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004724:	4498      	add	r8, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	469b      	mov	fp, r3
 800472a:	f04f 0c00 	mov.w	ip, #0
 800472e:	46d9      	mov	r9, fp
 8004730:	46e2      	mov	sl, ip
 8004732:	eb19 0309 	adds.w	r3, r9, r9
 8004736:	eb4a 040a 	adc.w	r4, sl, sl
 800473a:	4699      	mov	r9, r3
 800473c:	46a2      	mov	sl, r4
 800473e:	eb19 090b 	adds.w	r9, r9, fp
 8004742:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004752:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004756:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800475a:	4689      	mov	r9, r1
 800475c:	4692      	mov	sl, r2
 800475e:	eb1b 0509 	adds.w	r5, fp, r9
 8004762:	eb4c 060a 	adc.w	r6, ip, sl
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	f04f 0400 	mov.w	r4, #0
 8004778:	0094      	lsls	r4, r2, #2
 800477a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800477e:	008b      	lsls	r3, r1, #2
 8004780:	461a      	mov	r2, r3
 8004782:	4623      	mov	r3, r4
 8004784:	4628      	mov	r0, r5
 8004786:	4631      	mov	r1, r6
 8004788:	f7fc f9d0 	bl	8000b2c <__aeabi_uldivmod>
 800478c:	4603      	mov	r3, r0
 800478e:	460c      	mov	r4, r1
 8004790:	461a      	mov	r2, r3
 8004792:	4b77      	ldr	r3, [pc, #476]	; (8004970 <UART_SetConfig+0x6f4>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	; 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	4a72      	ldr	r2, [pc, #456]	; (8004970 <UART_SetConfig+0x6f4>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4442      	add	r2, r8
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	e0d0      	b.n	800495e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047bc:	f7ff f8de 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80047c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	469a      	mov	sl, r3
 80047c6:	f04f 0b00 	mov.w	fp, #0
 80047ca:	46d0      	mov	r8, sl
 80047cc:	46d9      	mov	r9, fp
 80047ce:	eb18 0308 	adds.w	r3, r8, r8
 80047d2:	eb49 0409 	adc.w	r4, r9, r9
 80047d6:	4698      	mov	r8, r3
 80047d8:	46a1      	mov	r9, r4
 80047da:	eb18 080a 	adds.w	r8, r8, sl
 80047de:	eb49 090b 	adc.w	r9, r9, fp
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047f6:	4688      	mov	r8, r1
 80047f8:	4691      	mov	r9, r2
 80047fa:	eb1a 0508 	adds.w	r5, sl, r8
 80047fe:	eb4b 0609 	adc.w	r6, fp, r9
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4619      	mov	r1, r3
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	0094      	lsls	r4, r2, #2
 8004816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800481a:	008b      	lsls	r3, r1, #2
 800481c:	461a      	mov	r2, r3
 800481e:	4623      	mov	r3, r4
 8004820:	4628      	mov	r0, r5
 8004822:	4631      	mov	r1, r6
 8004824:	f7fc f982 	bl	8000b2c <__aeabi_uldivmod>
 8004828:	4603      	mov	r3, r0
 800482a:	460c      	mov	r4, r1
 800482c:	461a      	mov	r2, r3
 800482e:	4b50      	ldr	r3, [pc, #320]	; (8004970 <UART_SetConfig+0x6f4>)
 8004830:	fba3 2302 	umull	r2, r3, r3, r2
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	469b      	mov	fp, r3
 800483e:	f04f 0c00 	mov.w	ip, #0
 8004842:	46d9      	mov	r9, fp
 8004844:	46e2      	mov	sl, ip
 8004846:	eb19 0309 	adds.w	r3, r9, r9
 800484a:	eb4a 040a 	adc.w	r4, sl, sl
 800484e:	4699      	mov	r9, r3
 8004850:	46a2      	mov	sl, r4
 8004852:	eb19 090b 	adds.w	r9, r9, fp
 8004856:	eb4a 0a0c 	adc.w	sl, sl, ip
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004866:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800486a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800486e:	4689      	mov	r9, r1
 8004870:	4692      	mov	sl, r2
 8004872:	eb1b 0509 	adds.w	r5, fp, r9
 8004876:	eb4c 060a 	adc.w	r6, ip, sl
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4619      	mov	r1, r3
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	f04f 0400 	mov.w	r4, #0
 800488c:	0094      	lsls	r4, r2, #2
 800488e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004892:	008b      	lsls	r3, r1, #2
 8004894:	461a      	mov	r2, r3
 8004896:	4623      	mov	r3, r4
 8004898:	4628      	mov	r0, r5
 800489a:	4631      	mov	r1, r6
 800489c:	f7fc f946 	bl	8000b2c <__aeabi_uldivmod>
 80048a0:	4603      	mov	r3, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b32      	ldr	r3, [pc, #200]	; (8004970 <UART_SetConfig+0x6f4>)
 80048a8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	2164      	movs	r1, #100	; 0x64
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	3332      	adds	r3, #50	; 0x32
 80048ba:	4a2d      	ldr	r2, [pc, #180]	; (8004970 <UART_SetConfig+0x6f4>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c6:	4498      	add	r8, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	469b      	mov	fp, r3
 80048cc:	f04f 0c00 	mov.w	ip, #0
 80048d0:	46d9      	mov	r9, fp
 80048d2:	46e2      	mov	sl, ip
 80048d4:	eb19 0309 	adds.w	r3, r9, r9
 80048d8:	eb4a 040a 	adc.w	r4, sl, sl
 80048dc:	4699      	mov	r9, r3
 80048de:	46a2      	mov	sl, r4
 80048e0:	eb19 090b 	adds.w	r9, r9, fp
 80048e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048e8:	f04f 0100 	mov.w	r1, #0
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048fc:	4689      	mov	r9, r1
 80048fe:	4692      	mov	sl, r2
 8004900:	eb1b 0509 	adds.w	r5, fp, r9
 8004904:	eb4c 060a 	adc.w	r6, ip, sl
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	0094      	lsls	r4, r2, #2
 800491c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004920:	008b      	lsls	r3, r1, #2
 8004922:	461a      	mov	r2, r3
 8004924:	4623      	mov	r3, r4
 8004926:	4628      	mov	r0, r5
 8004928:	4631      	mov	r1, r6
 800492a:	f7fc f8ff 	bl	8000b2c <__aeabi_uldivmod>
 800492e:	4603      	mov	r3, r0
 8004930:	460c      	mov	r4, r1
 8004932:	461a      	mov	r2, r3
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <UART_SetConfig+0x6f4>)
 8004936:	fba3 1302 	umull	r1, r3, r3, r2
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2164      	movs	r1, #100	; 0x64
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	3332      	adds	r3, #50	; 0x32
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <UART_SetConfig+0x6f4>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	f003 020f 	and.w	r2, r3, #15
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4442      	add	r2, r8
 800495a:	609a      	str	r2, [r3, #8]
}
 800495c:	e7ff      	b.n	800495e <UART_SetConfig+0x6e2>
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004968:	40011000 	.word	0x40011000
 800496c:	40011400 	.word	0x40011400
 8004970:	51eb851f 	.word	0x51eb851f

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	4e0d      	ldr	r6, [pc, #52]	; (80049ac <__libc_init_array+0x38>)
 8004978:	4c0d      	ldr	r4, [pc, #52]	; (80049b0 <__libc_init_array+0x3c>)
 800497a:	1ba4      	subs	r4, r4, r6
 800497c:	10a4      	asrs	r4, r4, #2
 800497e:	2500      	movs	r5, #0
 8004980:	42a5      	cmp	r5, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	4e0b      	ldr	r6, [pc, #44]	; (80049b4 <__libc_init_array+0x40>)
 8004986:	4c0c      	ldr	r4, [pc, #48]	; (80049b8 <__libc_init_array+0x44>)
 8004988:	f001 f834 	bl	80059f4 <_init>
 800498c:	1ba4      	subs	r4, r4, r6
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	2500      	movs	r5, #0
 8004992:	42a5      	cmp	r5, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800499c:	4798      	blx	r3
 800499e:	3501      	adds	r5, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049a6:	4798      	blx	r3
 80049a8:	3501      	adds	r5, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	08005c10 	.word	0x08005c10
 80049b0:	08005c10 	.word	0x08005c10
 80049b4:	08005c10 	.word	0x08005c10
 80049b8:	08005c14 	.word	0x08005c14

080049bc <memset>:
 80049bc:	4402      	add	r2, r0
 80049be:	4603      	mov	r3, r0
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d100      	bne.n	80049c6 <memset+0xa>
 80049c4:	4770      	bx	lr
 80049c6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ca:	e7f9      	b.n	80049c0 <memset+0x4>
 80049cc:	0000      	movs	r0, r0
	...

080049d0 <sin>:
 80049d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049d2:	ec51 0b10 	vmov	r0, r1, d0
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <sin+0x88>)
 80049d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049dc:	4293      	cmp	r3, r2
 80049de:	dc07      	bgt.n	80049f0 <sin+0x20>
 80049e0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004a50 <sin+0x80>
 80049e4:	2000      	movs	r0, #0
 80049e6:	f000 fe37 	bl	8005658 <__kernel_sin>
 80049ea:	ec51 0b10 	vmov	r0, r1, d0
 80049ee:	e007      	b.n	8004a00 <sin+0x30>
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <sin+0x8c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	dd09      	ble.n	8004a0a <sin+0x3a>
 80049f6:	ee10 2a10 	vmov	r2, s0
 80049fa:	460b      	mov	r3, r1
 80049fc:	f7fb fbfc 	bl	80001f8 <__aeabi_dsub>
 8004a00:	ec41 0b10 	vmov	d0, r0, r1
 8004a04:	b005      	add	sp, #20
 8004a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a0a:	4668      	mov	r0, sp
 8004a0c:	f000 f828 	bl	8004a60 <__ieee754_rem_pio2>
 8004a10:	f000 0003 	and.w	r0, r0, #3
 8004a14:	2801      	cmp	r0, #1
 8004a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004a1a:	ed9d 0b00 	vldr	d0, [sp]
 8004a1e:	d004      	beq.n	8004a2a <sin+0x5a>
 8004a20:	2802      	cmp	r0, #2
 8004a22:	d005      	beq.n	8004a30 <sin+0x60>
 8004a24:	b970      	cbnz	r0, 8004a44 <sin+0x74>
 8004a26:	2001      	movs	r0, #1
 8004a28:	e7dd      	b.n	80049e6 <sin+0x16>
 8004a2a:	f000 fa0d 	bl	8004e48 <__kernel_cos>
 8004a2e:	e7dc      	b.n	80049ea <sin+0x1a>
 8004a30:	2001      	movs	r0, #1
 8004a32:	f000 fe11 	bl	8005658 <__kernel_sin>
 8004a36:	ec53 2b10 	vmov	r2, r3, d0
 8004a3a:	ee10 0a10 	vmov	r0, s0
 8004a3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004a42:	e7dd      	b.n	8004a00 <sin+0x30>
 8004a44:	f000 fa00 	bl	8004e48 <__kernel_cos>
 8004a48:	e7f5      	b.n	8004a36 <sin+0x66>
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w
	...
 8004a58:	3fe921fb 	.word	0x3fe921fb
 8004a5c:	7fefffff 	.word	0x7fefffff

08004a60 <__ieee754_rem_pio2>:
 8004a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	ec57 6b10 	vmov	r6, r7, d0
 8004a68:	4bc3      	ldr	r3, [pc, #780]	; (8004d78 <__ieee754_rem_pio2+0x318>)
 8004a6a:	b08d      	sub	sp, #52	; 0x34
 8004a6c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004a70:	4598      	cmp	r8, r3
 8004a72:	4604      	mov	r4, r0
 8004a74:	9704      	str	r7, [sp, #16]
 8004a76:	dc07      	bgt.n	8004a88 <__ieee754_rem_pio2+0x28>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	ed84 0b00 	vstr	d0, [r4]
 8004a80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004a84:	2500      	movs	r5, #0
 8004a86:	e027      	b.n	8004ad8 <__ieee754_rem_pio2+0x78>
 8004a88:	4bbc      	ldr	r3, [pc, #752]	; (8004d7c <__ieee754_rem_pio2+0x31c>)
 8004a8a:	4598      	cmp	r8, r3
 8004a8c:	dc75      	bgt.n	8004b7a <__ieee754_rem_pio2+0x11a>
 8004a8e:	9b04      	ldr	r3, [sp, #16]
 8004a90:	4dbb      	ldr	r5, [pc, #748]	; (8004d80 <__ieee754_rem_pio2+0x320>)
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	ee10 0a10 	vmov	r0, s0
 8004a98:	a3a9      	add	r3, pc, #676	; (adr r3, 8004d40 <__ieee754_rem_pio2+0x2e0>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	dd36      	ble.n	8004b10 <__ieee754_rem_pio2+0xb0>
 8004aa2:	f7fb fba9 	bl	80001f8 <__aeabi_dsub>
 8004aa6:	45a8      	cmp	r8, r5
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	460f      	mov	r7, r1
 8004aac:	d018      	beq.n	8004ae0 <__ieee754_rem_pio2+0x80>
 8004aae:	a3a6      	add	r3, pc, #664	; (adr r3, 8004d48 <__ieee754_rem_pio2+0x2e8>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fba0 	bl	80001f8 <__aeabi_dsub>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	e9c4 2300 	strd	r2, r3, [r4]
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	f7fb fb98 	bl	80001f8 <__aeabi_dsub>
 8004ac8:	a39f      	add	r3, pc, #636	; (adr r3, 8004d48 <__ieee754_rem_pio2+0x2e8>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f7fb fb93 	bl	80001f8 <__aeabi_dsub>
 8004ad2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ad6:	2501      	movs	r5, #1
 8004ad8:	4628      	mov	r0, r5
 8004ada:	b00d      	add	sp, #52	; 0x34
 8004adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae0:	a39b      	add	r3, pc, #620	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x2f0>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fb87 	bl	80001f8 <__aeabi_dsub>
 8004aea:	a39b      	add	r3, pc, #620	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x2f8>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	f7fb fb80 	bl	80001f8 <__aeabi_dsub>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	e9c4 2300 	strd	r2, r3, [r4]
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb fb78 	bl	80001f8 <__aeabi_dsub>
 8004b08:	a393      	add	r3, pc, #588	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x2f8>)
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	e7de      	b.n	8004ace <__ieee754_rem_pio2+0x6e>
 8004b10:	f7fb fb74 	bl	80001fc <__adddf3>
 8004b14:	45a8      	cmp	r8, r5
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	d016      	beq.n	8004b4a <__ieee754_rem_pio2+0xea>
 8004b1c:	a38a      	add	r3, pc, #552	; (adr r3, 8004d48 <__ieee754_rem_pio2+0x2e8>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fb6b 	bl	80001fc <__adddf3>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	e9c4 2300 	strd	r2, r3, [r4]
 8004b2e:	4630      	mov	r0, r6
 8004b30:	4639      	mov	r1, r7
 8004b32:	f7fb fb61 	bl	80001f8 <__aeabi_dsub>
 8004b36:	a384      	add	r3, pc, #528	; (adr r3, 8004d48 <__ieee754_rem_pio2+0x2e8>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f7fb fb5e 	bl	80001fc <__adddf3>
 8004b40:	f04f 35ff 	mov.w	r5, #4294967295
 8004b44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b48:	e7c6      	b.n	8004ad8 <__ieee754_rem_pio2+0x78>
 8004b4a:	a381      	add	r3, pc, #516	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x2f0>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fb54 	bl	80001fc <__adddf3>
 8004b54:	a380      	add	r3, pc, #512	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x2f8>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	460f      	mov	r7, r1
 8004b5e:	f7fb fb4d 	bl	80001fc <__adddf3>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	e9c4 2300 	strd	r2, r3, [r4]
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb fb43 	bl	80001f8 <__aeabi_dsub>
 8004b72:	a379      	add	r3, pc, #484	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x2f8>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	e7e0      	b.n	8004b3c <__ieee754_rem_pio2+0xdc>
 8004b7a:	4b82      	ldr	r3, [pc, #520]	; (8004d84 <__ieee754_rem_pio2+0x324>)
 8004b7c:	4598      	cmp	r8, r3
 8004b7e:	f300 80d0 	bgt.w	8004d22 <__ieee754_rem_pio2+0x2c2>
 8004b82:	f000 fe23 	bl	80057cc <fabs>
 8004b86:	ec57 6b10 	vmov	r6, r7, d0
 8004b8a:	ee10 0a10 	vmov	r0, s0
 8004b8e:	a374      	add	r3, pc, #464	; (adr r3, 8004d60 <__ieee754_rem_pio2+0x300>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	4639      	mov	r1, r7
 8004b96:	f7fb fce7 	bl	8000568 <__aeabi_dmul>
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4b7a      	ldr	r3, [pc, #488]	; (8004d88 <__ieee754_rem_pio2+0x328>)
 8004b9e:	f7fb fb2d 	bl	80001fc <__adddf3>
 8004ba2:	f7fb ff7b 	bl	8000a9c <__aeabi_d2iz>
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	f7fb fc74 	bl	8000494 <__aeabi_i2d>
 8004bac:	a364      	add	r3, pc, #400	; (adr r3, 8004d40 <__ieee754_rem_pio2+0x2e0>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bb6:	f7fb fcd7 	bl	8000568 <__aeabi_dmul>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f7fb fb19 	bl	80001f8 <__aeabi_dsub>
 8004bc6:	a360      	add	r3, pc, #384	; (adr r3, 8004d48 <__ieee754_rem_pio2+0x2e8>)
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	4682      	mov	sl, r0
 8004bce:	468b      	mov	fp, r1
 8004bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd4:	f7fb fcc8 	bl	8000568 <__aeabi_dmul>
 8004bd8:	2d1f      	cmp	r5, #31
 8004bda:	4606      	mov	r6, r0
 8004bdc:	460f      	mov	r7, r1
 8004bde:	dc0c      	bgt.n	8004bfa <__ieee754_rem_pio2+0x19a>
 8004be0:	1e6a      	subs	r2, r5, #1
 8004be2:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <__ieee754_rem_pio2+0x32c>)
 8004be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be8:	4543      	cmp	r3, r8
 8004bea:	d006      	beq.n	8004bfa <__ieee754_rem_pio2+0x19a>
 8004bec:	4632      	mov	r2, r6
 8004bee:	463b      	mov	r3, r7
 8004bf0:	4650      	mov	r0, sl
 8004bf2:	4659      	mov	r1, fp
 8004bf4:	f7fb fb00 	bl	80001f8 <__aeabi_dsub>
 8004bf8:	e00e      	b.n	8004c18 <__ieee754_rem_pio2+0x1b8>
 8004bfa:	4632      	mov	r2, r6
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	4650      	mov	r0, sl
 8004c00:	4659      	mov	r1, fp
 8004c02:	f7fb faf9 	bl	80001f8 <__aeabi_dsub>
 8004c06:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004c0a:	9305      	str	r3, [sp, #20]
 8004c0c:	9a05      	ldr	r2, [sp, #20]
 8004c0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	dc02      	bgt.n	8004c1e <__ieee754_rem_pio2+0x1be>
 8004c18:	e9c4 0100 	strd	r0, r1, [r4]
 8004c1c:	e039      	b.n	8004c92 <__ieee754_rem_pio2+0x232>
 8004c1e:	a34c      	add	r3, pc, #304	; (adr r3, 8004d50 <__ieee754_rem_pio2+0x2f0>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c28:	f7fb fc9e 	bl	8000568 <__aeabi_dmul>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	460f      	mov	r7, r1
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4650      	mov	r0, sl
 8004c36:	4659      	mov	r1, fp
 8004c38:	f7fb fade 	bl	80001f8 <__aeabi_dsub>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4680      	mov	r8, r0
 8004c42:	4689      	mov	r9, r1
 8004c44:	4650      	mov	r0, sl
 8004c46:	4659      	mov	r1, fp
 8004c48:	f7fb fad6 	bl	80001f8 <__aeabi_dsub>
 8004c4c:	4632      	mov	r2, r6
 8004c4e:	463b      	mov	r3, r7
 8004c50:	f7fb fad2 	bl	80001f8 <__aeabi_dsub>
 8004c54:	a340      	add	r3, pc, #256	; (adr r3, 8004d58 <__ieee754_rem_pio2+0x2f8>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	460f      	mov	r7, r1
 8004c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c62:	f7fb fc81 	bl	8000568 <__aeabi_dmul>
 8004c66:	4632      	mov	r2, r6
 8004c68:	463b      	mov	r3, r7
 8004c6a:	f7fb fac5 	bl	80001f8 <__aeabi_dsub>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4606      	mov	r6, r0
 8004c74:	460f      	mov	r7, r1
 8004c76:	4640      	mov	r0, r8
 8004c78:	4649      	mov	r1, r9
 8004c7a:	f7fb fabd 	bl	80001f8 <__aeabi_dsub>
 8004c7e:	9a05      	ldr	r2, [sp, #20]
 8004c80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b31      	cmp	r3, #49	; 0x31
 8004c88:	dc20      	bgt.n	8004ccc <__ieee754_rem_pio2+0x26c>
 8004c8a:	e9c4 0100 	strd	r0, r1, [r4]
 8004c8e:	46c2      	mov	sl, r8
 8004c90:	46cb      	mov	fp, r9
 8004c92:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004c96:	4650      	mov	r0, sl
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	f7fb faab 	bl	80001f8 <__aeabi_dsub>
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	f7fb faa7 	bl	80001f8 <__aeabi_dsub>
 8004caa:	9b04      	ldr	r3, [sp, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004cb2:	f6bf af11 	bge.w	8004ad8 <__ieee754_rem_pio2+0x78>
 8004cb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cba:	6063      	str	r3, [r4, #4]
 8004cbc:	f8c4 8000 	str.w	r8, [r4]
 8004cc0:	60a0      	str	r0, [r4, #8]
 8004cc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cc6:	60e3      	str	r3, [r4, #12]
 8004cc8:	426d      	negs	r5, r5
 8004cca:	e705      	b.n	8004ad8 <__ieee754_rem_pio2+0x78>
 8004ccc:	a326      	add	r3, pc, #152	; (adr r3, 8004d68 <__ieee754_rem_pio2+0x308>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cd6:	f7fb fc47 	bl	8000568 <__aeabi_dmul>
 8004cda:	4606      	mov	r6, r0
 8004cdc:	460f      	mov	r7, r1
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	f7fb fa87 	bl	80001f8 <__aeabi_dsub>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4682      	mov	sl, r0
 8004cf0:	468b      	mov	fp, r1
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	f7fb fa7f 	bl	80001f8 <__aeabi_dsub>
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	f7fb fa7b 	bl	80001f8 <__aeabi_dsub>
 8004d02:	a31b      	add	r3, pc, #108	; (adr r3, 8004d70 <__ieee754_rem_pio2+0x310>)
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	4606      	mov	r6, r0
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d10:	f7fb fc2a 	bl	8000568 <__aeabi_dmul>
 8004d14:	4632      	mov	r2, r6
 8004d16:	463b      	mov	r3, r7
 8004d18:	f7fb fa6e 	bl	80001f8 <__aeabi_dsub>
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	460f      	mov	r7, r1
 8004d20:	e764      	b.n	8004bec <__ieee754_rem_pio2+0x18c>
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <__ieee754_rem_pio2+0x330>)
 8004d24:	4598      	cmp	r8, r3
 8004d26:	dd35      	ble.n	8004d94 <__ieee754_rem_pio2+0x334>
 8004d28:	ee10 2a10 	vmov	r2, s0
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	4630      	mov	r0, r6
 8004d30:	4639      	mov	r1, r7
 8004d32:	f7fb fa61 	bl	80001f8 <__aeabi_dsub>
 8004d36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d3a:	e9c4 0100 	strd	r0, r1, [r4]
 8004d3e:	e6a1      	b.n	8004a84 <__ieee754_rem_pio2+0x24>
 8004d40:	54400000 	.word	0x54400000
 8004d44:	3ff921fb 	.word	0x3ff921fb
 8004d48:	1a626331 	.word	0x1a626331
 8004d4c:	3dd0b461 	.word	0x3dd0b461
 8004d50:	1a600000 	.word	0x1a600000
 8004d54:	3dd0b461 	.word	0x3dd0b461
 8004d58:	2e037073 	.word	0x2e037073
 8004d5c:	3ba3198a 	.word	0x3ba3198a
 8004d60:	6dc9c883 	.word	0x6dc9c883
 8004d64:	3fe45f30 	.word	0x3fe45f30
 8004d68:	2e000000 	.word	0x2e000000
 8004d6c:	3ba3198a 	.word	0x3ba3198a
 8004d70:	252049c1 	.word	0x252049c1
 8004d74:	397b839a 	.word	0x397b839a
 8004d78:	3fe921fb 	.word	0x3fe921fb
 8004d7c:	4002d97b 	.word	0x4002d97b
 8004d80:	3ff921fb 	.word	0x3ff921fb
 8004d84:	413921fb 	.word	0x413921fb
 8004d88:	3fe00000 	.word	0x3fe00000
 8004d8c:	08005a30 	.word	0x08005a30
 8004d90:	7fefffff 	.word	0x7fefffff
 8004d94:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004d98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004d9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004da0:	4630      	mov	r0, r6
 8004da2:	460f      	mov	r7, r1
 8004da4:	f7fb fe7a 	bl	8000a9c <__aeabi_d2iz>
 8004da8:	f7fb fb74 	bl	8000494 <__aeabi_i2d>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4630      	mov	r0, r6
 8004db2:	4639      	mov	r1, r7
 8004db4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004db8:	f7fb fa1e 	bl	80001f8 <__aeabi_dsub>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <__ieee754_rem_pio2+0x3dc>)
 8004dc0:	f7fb fbd2 	bl	8000568 <__aeabi_dmul>
 8004dc4:	460f      	mov	r7, r1
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	f7fb fe68 	bl	8000a9c <__aeabi_d2iz>
 8004dcc:	f7fb fb62 	bl	8000494 <__aeabi_i2d>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ddc:	f7fb fa0c 	bl	80001f8 <__aeabi_dsub>
 8004de0:	2200      	movs	r2, #0
 8004de2:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <__ieee754_rem_pio2+0x3dc>)
 8004de4:	f7fb fbc0 	bl	8000568 <__aeabi_dmul>
 8004de8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004dec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004df0:	f04f 0803 	mov.w	r8, #3
 8004df4:	2600      	movs	r6, #0
 8004df6:	2700      	movs	r7, #0
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004e00:	f108 3aff 	add.w	sl, r8, #4294967295
 8004e04:	f7fb fe18 	bl	8000a38 <__aeabi_dcmpeq>
 8004e08:	b9b0      	cbnz	r0, 8004e38 <__ieee754_rem_pio2+0x3d8>
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <__ieee754_rem_pio2+0x3e0>)
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	2302      	movs	r3, #2
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	462a      	mov	r2, r5
 8004e14:	4643      	mov	r3, r8
 8004e16:	4621      	mov	r1, r4
 8004e18:	a806      	add	r0, sp, #24
 8004e1a:	f000 f8dd 	bl	8004fd8 <__kernel_rem_pio2>
 8004e1e:	9b04      	ldr	r3, [sp, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	4605      	mov	r5, r0
 8004e24:	f6bf ae58 	bge.w	8004ad8 <__ieee754_rem_pio2+0x78>
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	68e3      	ldr	r3, [r4, #12]
 8004e32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e36:	e746      	b.n	8004cc6 <__ieee754_rem_pio2+0x266>
 8004e38:	46d0      	mov	r8, sl
 8004e3a:	e7dd      	b.n	8004df8 <__ieee754_rem_pio2+0x398>
 8004e3c:	41700000 	.word	0x41700000
 8004e40:	08005ab0 	.word	0x08005ab0
 8004e44:	00000000 	.word	0x00000000

08004e48 <__kernel_cos>:
 8004e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	ec59 8b10 	vmov	r8, r9, d0
 8004e50:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004e54:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004e58:	ed2d 8b02 	vpush	{d8}
 8004e5c:	eeb0 8a41 	vmov.f32	s16, s2
 8004e60:	eef0 8a61 	vmov.f32	s17, s3
 8004e64:	da07      	bge.n	8004e76 <__kernel_cos+0x2e>
 8004e66:	ee10 0a10 	vmov	r0, s0
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	f7fb fe16 	bl	8000a9c <__aeabi_d2iz>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f000 8089 	beq.w	8004f88 <__kernel_cos+0x140>
 8004e76:	4642      	mov	r2, r8
 8004e78:	464b      	mov	r3, r9
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	f7fb fb73 	bl	8000568 <__aeabi_dmul>
 8004e82:	2200      	movs	r2, #0
 8004e84:	4b4e      	ldr	r3, [pc, #312]	; (8004fc0 <__kernel_cos+0x178>)
 8004e86:	4604      	mov	r4, r0
 8004e88:	460d      	mov	r5, r1
 8004e8a:	f7fb fb6d 	bl	8000568 <__aeabi_dmul>
 8004e8e:	a340      	add	r3, pc, #256	; (adr r3, 8004f90 <__kernel_cos+0x148>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	4682      	mov	sl, r0
 8004e96:	468b      	mov	fp, r1
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb fb64 	bl	8000568 <__aeabi_dmul>
 8004ea0:	a33d      	add	r3, pc, #244	; (adr r3, 8004f98 <__kernel_cos+0x150>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb f9a9 	bl	80001fc <__adddf3>
 8004eaa:	4622      	mov	r2, r4
 8004eac:	462b      	mov	r3, r5
 8004eae:	f7fb fb5b 	bl	8000568 <__aeabi_dmul>
 8004eb2:	a33b      	add	r3, pc, #236	; (adr r3, 8004fa0 <__kernel_cos+0x158>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb f99e 	bl	80001f8 <__aeabi_dsub>
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	462b      	mov	r3, r5
 8004ec0:	f7fb fb52 	bl	8000568 <__aeabi_dmul>
 8004ec4:	a338      	add	r3, pc, #224	; (adr r3, 8004fa8 <__kernel_cos+0x160>)
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f7fb f997 	bl	80001fc <__adddf3>
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	f7fb fb49 	bl	8000568 <__aeabi_dmul>
 8004ed6:	a336      	add	r3, pc, #216	; (adr r3, 8004fb0 <__kernel_cos+0x168>)
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f7fb f98c 	bl	80001f8 <__aeabi_dsub>
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	f7fb fb40 	bl	8000568 <__aeabi_dmul>
 8004ee8:	a333      	add	r3, pc, #204	; (adr r3, 8004fb8 <__kernel_cos+0x170>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f7fb f985 	bl	80001fc <__adddf3>
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	f7fb fb37 	bl	8000568 <__aeabi_dmul>
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	f7fb fb33 	bl	8000568 <__aeabi_dmul>
 8004f02:	ec53 2b18 	vmov	r2, r3, d8
 8004f06:	4604      	mov	r4, r0
 8004f08:	460d      	mov	r5, r1
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	f7fb fb2b 	bl	8000568 <__aeabi_dmul>
 8004f12:	460b      	mov	r3, r1
 8004f14:	4602      	mov	r2, r0
 8004f16:	4629      	mov	r1, r5
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7fb f96d 	bl	80001f8 <__aeabi_dsub>
 8004f1e:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <__kernel_cos+0x17c>)
 8004f20:	429e      	cmp	r6, r3
 8004f22:	4680      	mov	r8, r0
 8004f24:	4689      	mov	r9, r1
 8004f26:	dc11      	bgt.n	8004f4c <__kernel_cos+0x104>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	4659      	mov	r1, fp
 8004f30:	f7fb f962 	bl	80001f8 <__aeabi_dsub>
 8004f34:	460b      	mov	r3, r1
 8004f36:	4924      	ldr	r1, [pc, #144]	; (8004fc8 <__kernel_cos+0x180>)
 8004f38:	4602      	mov	r2, r0
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7fb f95c 	bl	80001f8 <__aeabi_dsub>
 8004f40:	ecbd 8b02 	vpop	{d8}
 8004f44:	ec41 0b10 	vmov	d0, r0, r1
 8004f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <__kernel_cos+0x184>)
 8004f4e:	491e      	ldr	r1, [pc, #120]	; (8004fc8 <__kernel_cos+0x180>)
 8004f50:	429e      	cmp	r6, r3
 8004f52:	bfcc      	ite	gt
 8004f54:	4d1e      	ldrgt	r5, [pc, #120]	; (8004fd0 <__kernel_cos+0x188>)
 8004f56:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	462b      	mov	r3, r5
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fb f949 	bl	80001f8 <__aeabi_dsub>
 8004f66:	4622      	mov	r2, r4
 8004f68:	4606      	mov	r6, r0
 8004f6a:	460f      	mov	r7, r1
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	4650      	mov	r0, sl
 8004f70:	4659      	mov	r1, fp
 8004f72:	f7fb f941 	bl	80001f8 <__aeabi_dsub>
 8004f76:	4642      	mov	r2, r8
 8004f78:	464b      	mov	r3, r9
 8004f7a:	f7fb f93d 	bl	80001f8 <__aeabi_dsub>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4630      	mov	r0, r6
 8004f84:	4639      	mov	r1, r7
 8004f86:	e7d9      	b.n	8004f3c <__kernel_cos+0xf4>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	490f      	ldr	r1, [pc, #60]	; (8004fc8 <__kernel_cos+0x180>)
 8004f8c:	e7d8      	b.n	8004f40 <__kernel_cos+0xf8>
 8004f8e:	bf00      	nop
 8004f90:	be8838d4 	.word	0xbe8838d4
 8004f94:	bda8fae9 	.word	0xbda8fae9
 8004f98:	bdb4b1c4 	.word	0xbdb4b1c4
 8004f9c:	3e21ee9e 	.word	0x3e21ee9e
 8004fa0:	809c52ad 	.word	0x809c52ad
 8004fa4:	3e927e4f 	.word	0x3e927e4f
 8004fa8:	19cb1590 	.word	0x19cb1590
 8004fac:	3efa01a0 	.word	0x3efa01a0
 8004fb0:	16c15177 	.word	0x16c15177
 8004fb4:	3f56c16c 	.word	0x3f56c16c
 8004fb8:	5555554c 	.word	0x5555554c
 8004fbc:	3fa55555 	.word	0x3fa55555
 8004fc0:	3fe00000 	.word	0x3fe00000
 8004fc4:	3fd33332 	.word	0x3fd33332
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	3fe90000 	.word	0x3fe90000
 8004fd0:	3fd20000 	.word	0x3fd20000
 8004fd4:	00000000 	.word	0x00000000

08004fd8 <__kernel_rem_pio2>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	ed2d 8b02 	vpush	{d8}
 8004fe0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004fe4:	1ed4      	subs	r4, r2, #3
 8004fe6:	9308      	str	r3, [sp, #32]
 8004fe8:	9101      	str	r1, [sp, #4]
 8004fea:	4bc5      	ldr	r3, [pc, #788]	; (8005300 <__kernel_rem_pio2+0x328>)
 8004fec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004fee:	9009      	str	r0, [sp, #36]	; 0x24
 8004ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004ff4:	9304      	str	r3, [sp, #16]
 8004ff6:	9b08      	ldr	r3, [sp, #32]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	9307      	str	r3, [sp, #28]
 8004ffc:	2318      	movs	r3, #24
 8004ffe:	fb94 f4f3 	sdiv	r4, r4, r3
 8005002:	f06f 0317 	mvn.w	r3, #23
 8005006:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800500a:	fb04 3303 	mla	r3, r4, r3, r3
 800500e:	eb03 0a02 	add.w	sl, r3, r2
 8005012:	9b04      	ldr	r3, [sp, #16]
 8005014:	9a07      	ldr	r2, [sp, #28]
 8005016:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80052f0 <__kernel_rem_pio2+0x318>
 800501a:	eb03 0802 	add.w	r8, r3, r2
 800501e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005020:	1aa7      	subs	r7, r4, r2
 8005022:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005026:	ae22      	add	r6, sp, #136	; 0x88
 8005028:	2500      	movs	r5, #0
 800502a:	4545      	cmp	r5, r8
 800502c:	dd13      	ble.n	8005056 <__kernel_rem_pio2+0x7e>
 800502e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80052f0 <__kernel_rem_pio2+0x318>
 8005032:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005036:	2600      	movs	r6, #0
 8005038:	9b04      	ldr	r3, [sp, #16]
 800503a:	429e      	cmp	r6, r3
 800503c:	dc32      	bgt.n	80050a4 <__kernel_rem_pio2+0xcc>
 800503e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005040:	9302      	str	r3, [sp, #8]
 8005042:	9b08      	ldr	r3, [sp, #32]
 8005044:	199d      	adds	r5, r3, r6
 8005046:	ab22      	add	r3, sp, #136	; 0x88
 8005048:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800504c:	9306      	str	r3, [sp, #24]
 800504e:	ec59 8b18 	vmov	r8, r9, d8
 8005052:	2700      	movs	r7, #0
 8005054:	e01f      	b.n	8005096 <__kernel_rem_pio2+0xbe>
 8005056:	42ef      	cmn	r7, r5
 8005058:	d407      	bmi.n	800506a <__kernel_rem_pio2+0x92>
 800505a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800505e:	f7fb fa19 	bl	8000494 <__aeabi_i2d>
 8005062:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005066:	3501      	adds	r5, #1
 8005068:	e7df      	b.n	800502a <__kernel_rem_pio2+0x52>
 800506a:	ec51 0b18 	vmov	r0, r1, d8
 800506e:	e7f8      	b.n	8005062 <__kernel_rem_pio2+0x8a>
 8005070:	9906      	ldr	r1, [sp, #24]
 8005072:	9d02      	ldr	r5, [sp, #8]
 8005074:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005078:	9106      	str	r1, [sp, #24]
 800507a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800507e:	9502      	str	r5, [sp, #8]
 8005080:	f7fb fa72 	bl	8000568 <__aeabi_dmul>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4640      	mov	r0, r8
 800508a:	4649      	mov	r1, r9
 800508c:	f7fb f8b6 	bl	80001fc <__adddf3>
 8005090:	3701      	adds	r7, #1
 8005092:	4680      	mov	r8, r0
 8005094:	4689      	mov	r9, r1
 8005096:	9b07      	ldr	r3, [sp, #28]
 8005098:	429f      	cmp	r7, r3
 800509a:	dde9      	ble.n	8005070 <__kernel_rem_pio2+0x98>
 800509c:	e8eb 8902 	strd	r8, r9, [fp], #8
 80050a0:	3601      	adds	r6, #1
 80050a2:	e7c9      	b.n	8005038 <__kernel_rem_pio2+0x60>
 80050a4:	9b04      	ldr	r3, [sp, #16]
 80050a6:	aa0e      	add	r2, sp, #56	; 0x38
 80050a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050ac:	930c      	str	r3, [sp, #48]	; 0x30
 80050ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80050b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80050b4:	9c04      	ldr	r4, [sp, #16]
 80050b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b8:	ab9a      	add	r3, sp, #616	; 0x268
 80050ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80050be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80050ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80050ce:	ab9a      	add	r3, sp, #616	; 0x268
 80050d0:	445b      	add	r3, fp
 80050d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80050d6:	2500      	movs	r5, #0
 80050d8:	1b63      	subs	r3, r4, r5
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dc78      	bgt.n	80051d0 <__kernel_rem_pio2+0x1f8>
 80050de:	4650      	mov	r0, sl
 80050e0:	ec49 8b10 	vmov	d0, r8, r9
 80050e4:	f000 fc00 	bl	80058e8 <scalbn>
 80050e8:	ec57 6b10 	vmov	r6, r7, d0
 80050ec:	2200      	movs	r2, #0
 80050ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80050f2:	ee10 0a10 	vmov	r0, s0
 80050f6:	4639      	mov	r1, r7
 80050f8:	f7fb fa36 	bl	8000568 <__aeabi_dmul>
 80050fc:	ec41 0b10 	vmov	d0, r0, r1
 8005100:	f000 fb6e 	bl	80057e0 <floor>
 8005104:	2200      	movs	r2, #0
 8005106:	ec51 0b10 	vmov	r0, r1, d0
 800510a:	4b7e      	ldr	r3, [pc, #504]	; (8005304 <__kernel_rem_pio2+0x32c>)
 800510c:	f7fb fa2c 	bl	8000568 <__aeabi_dmul>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4630      	mov	r0, r6
 8005116:	4639      	mov	r1, r7
 8005118:	f7fb f86e 	bl	80001f8 <__aeabi_dsub>
 800511c:	460f      	mov	r7, r1
 800511e:	4606      	mov	r6, r0
 8005120:	f7fb fcbc 	bl	8000a9c <__aeabi_d2iz>
 8005124:	9006      	str	r0, [sp, #24]
 8005126:	f7fb f9b5 	bl	8000494 <__aeabi_i2d>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb f861 	bl	80001f8 <__aeabi_dsub>
 8005136:	f1ba 0f00 	cmp.w	sl, #0
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	dd6c      	ble.n	800521a <__kernel_rem_pio2+0x242>
 8005140:	1e62      	subs	r2, r4, #1
 8005142:	ab0e      	add	r3, sp, #56	; 0x38
 8005144:	f1ca 0118 	rsb	r1, sl, #24
 8005148:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800514c:	9d06      	ldr	r5, [sp, #24]
 800514e:	fa40 f301 	asr.w	r3, r0, r1
 8005152:	441d      	add	r5, r3
 8005154:	408b      	lsls	r3, r1
 8005156:	1ac0      	subs	r0, r0, r3
 8005158:	ab0e      	add	r3, sp, #56	; 0x38
 800515a:	9506      	str	r5, [sp, #24]
 800515c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005160:	f1ca 0317 	rsb	r3, sl, #23
 8005164:	fa40 f303 	asr.w	r3, r0, r3
 8005168:	9302      	str	r3, [sp, #8]
 800516a:	9b02      	ldr	r3, [sp, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	dd62      	ble.n	8005236 <__kernel_rem_pio2+0x25e>
 8005170:	9b06      	ldr	r3, [sp, #24]
 8005172:	2200      	movs	r2, #0
 8005174:	3301      	adds	r3, #1
 8005176:	9306      	str	r3, [sp, #24]
 8005178:	4615      	mov	r5, r2
 800517a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800517e:	4294      	cmp	r4, r2
 8005180:	f300 8095 	bgt.w	80052ae <__kernel_rem_pio2+0x2d6>
 8005184:	f1ba 0f00 	cmp.w	sl, #0
 8005188:	dd07      	ble.n	800519a <__kernel_rem_pio2+0x1c2>
 800518a:	f1ba 0f01 	cmp.w	sl, #1
 800518e:	f000 80a2 	beq.w	80052d6 <__kernel_rem_pio2+0x2fe>
 8005192:	f1ba 0f02 	cmp.w	sl, #2
 8005196:	f000 80c1 	beq.w	800531c <__kernel_rem_pio2+0x344>
 800519a:	9b02      	ldr	r3, [sp, #8]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d14a      	bne.n	8005236 <__kernel_rem_pio2+0x25e>
 80051a0:	4632      	mov	r2, r6
 80051a2:	463b      	mov	r3, r7
 80051a4:	2000      	movs	r0, #0
 80051a6:	4958      	ldr	r1, [pc, #352]	; (8005308 <__kernel_rem_pio2+0x330>)
 80051a8:	f7fb f826 	bl	80001f8 <__aeabi_dsub>
 80051ac:	4606      	mov	r6, r0
 80051ae:	460f      	mov	r7, r1
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	d040      	beq.n	8005236 <__kernel_rem_pio2+0x25e>
 80051b4:	4650      	mov	r0, sl
 80051b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80052f8 <__kernel_rem_pio2+0x320>
 80051ba:	f000 fb95 	bl	80058e8 <scalbn>
 80051be:	4630      	mov	r0, r6
 80051c0:	4639      	mov	r1, r7
 80051c2:	ec53 2b10 	vmov	r2, r3, d0
 80051c6:	f7fb f817 	bl	80001f8 <__aeabi_dsub>
 80051ca:	4606      	mov	r6, r0
 80051cc:	460f      	mov	r7, r1
 80051ce:	e032      	b.n	8005236 <__kernel_rem_pio2+0x25e>
 80051d0:	2200      	movs	r2, #0
 80051d2:	4b4e      	ldr	r3, [pc, #312]	; (800530c <__kernel_rem_pio2+0x334>)
 80051d4:	4640      	mov	r0, r8
 80051d6:	4649      	mov	r1, r9
 80051d8:	f7fb f9c6 	bl	8000568 <__aeabi_dmul>
 80051dc:	f7fb fc5e 	bl	8000a9c <__aeabi_d2iz>
 80051e0:	f7fb f958 	bl	8000494 <__aeabi_i2d>
 80051e4:	2200      	movs	r2, #0
 80051e6:	4b4a      	ldr	r3, [pc, #296]	; (8005310 <__kernel_rem_pio2+0x338>)
 80051e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ec:	f7fb f9bc 	bl	8000568 <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4640      	mov	r0, r8
 80051f6:	4649      	mov	r1, r9
 80051f8:	f7fa fffe 	bl	80001f8 <__aeabi_dsub>
 80051fc:	f7fb fc4e 	bl	8000a9c <__aeabi_d2iz>
 8005200:	ab0e      	add	r3, sp, #56	; 0x38
 8005202:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005206:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800520a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800520e:	f7fa fff5 	bl	80001fc <__adddf3>
 8005212:	3501      	adds	r5, #1
 8005214:	4680      	mov	r8, r0
 8005216:	4689      	mov	r9, r1
 8005218:	e75e      	b.n	80050d8 <__kernel_rem_pio2+0x100>
 800521a:	d105      	bne.n	8005228 <__kernel_rem_pio2+0x250>
 800521c:	1e63      	subs	r3, r4, #1
 800521e:	aa0e      	add	r2, sp, #56	; 0x38
 8005220:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005224:	15c3      	asrs	r3, r0, #23
 8005226:	e79f      	b.n	8005168 <__kernel_rem_pio2+0x190>
 8005228:	2200      	movs	r2, #0
 800522a:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <__kernel_rem_pio2+0x33c>)
 800522c:	f7fb fc22 	bl	8000a74 <__aeabi_dcmpge>
 8005230:	2800      	cmp	r0, #0
 8005232:	d139      	bne.n	80052a8 <__kernel_rem_pio2+0x2d0>
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fb fbfb 	bl	8000a38 <__aeabi_dcmpeq>
 8005242:	2800      	cmp	r0, #0
 8005244:	f000 80c7 	beq.w	80053d6 <__kernel_rem_pio2+0x3fe>
 8005248:	1e65      	subs	r5, r4, #1
 800524a:	462b      	mov	r3, r5
 800524c:	2200      	movs	r2, #0
 800524e:	9904      	ldr	r1, [sp, #16]
 8005250:	428b      	cmp	r3, r1
 8005252:	da6a      	bge.n	800532a <__kernel_rem_pio2+0x352>
 8005254:	2a00      	cmp	r2, #0
 8005256:	f000 8088 	beq.w	800536a <__kernel_rem_pio2+0x392>
 800525a:	ab0e      	add	r3, sp, #56	; 0x38
 800525c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005260:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80b4 	beq.w	80053d2 <__kernel_rem_pio2+0x3fa>
 800526a:	4650      	mov	r0, sl
 800526c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80052f8 <__kernel_rem_pio2+0x320>
 8005270:	f000 fb3a 	bl	80058e8 <scalbn>
 8005274:	00ec      	lsls	r4, r5, #3
 8005276:	ab72      	add	r3, sp, #456	; 0x1c8
 8005278:	191e      	adds	r6, r3, r4
 800527a:	ec59 8b10 	vmov	r8, r9, d0
 800527e:	f106 0a08 	add.w	sl, r6, #8
 8005282:	462f      	mov	r7, r5
 8005284:	2f00      	cmp	r7, #0
 8005286:	f280 80df 	bge.w	8005448 <__kernel_rem_pio2+0x470>
 800528a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80052f0 <__kernel_rem_pio2+0x318>
 800528e:	f04f 0a00 	mov.w	sl, #0
 8005292:	eba5 030a 	sub.w	r3, r5, sl
 8005296:	2b00      	cmp	r3, #0
 8005298:	f2c0 810a 	blt.w	80054b0 <__kernel_rem_pio2+0x4d8>
 800529c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005318 <__kernel_rem_pio2+0x340>
 80052a0:	ec59 8b18 	vmov	r8, r9, d8
 80052a4:	2700      	movs	r7, #0
 80052a6:	e0f5      	b.n	8005494 <__kernel_rem_pio2+0x4bc>
 80052a8:	2302      	movs	r3, #2
 80052aa:	9302      	str	r3, [sp, #8]
 80052ac:	e760      	b.n	8005170 <__kernel_rem_pio2+0x198>
 80052ae:	ab0e      	add	r3, sp, #56	; 0x38
 80052b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b4:	b94d      	cbnz	r5, 80052ca <__kernel_rem_pio2+0x2f2>
 80052b6:	b12b      	cbz	r3, 80052c4 <__kernel_rem_pio2+0x2ec>
 80052b8:	a80e      	add	r0, sp, #56	; 0x38
 80052ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80052be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80052c2:	2301      	movs	r3, #1
 80052c4:	3201      	adds	r2, #1
 80052c6:	461d      	mov	r5, r3
 80052c8:	e759      	b.n	800517e <__kernel_rem_pio2+0x1a6>
 80052ca:	a80e      	add	r0, sp, #56	; 0x38
 80052cc:	1acb      	subs	r3, r1, r3
 80052ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80052d2:	462b      	mov	r3, r5
 80052d4:	e7f6      	b.n	80052c4 <__kernel_rem_pio2+0x2ec>
 80052d6:	1e62      	subs	r2, r4, #1
 80052d8:	ab0e      	add	r3, sp, #56	; 0x38
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80052e2:	a90e      	add	r1, sp, #56	; 0x38
 80052e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80052e8:	e757      	b.n	800519a <__kernel_rem_pio2+0x1c2>
 80052ea:	bf00      	nop
 80052ec:	f3af 8000 	nop.w
	...
 80052fc:	3ff00000 	.word	0x3ff00000
 8005300:	08005bf8 	.word	0x08005bf8
 8005304:	40200000 	.word	0x40200000
 8005308:	3ff00000 	.word	0x3ff00000
 800530c:	3e700000 	.word	0x3e700000
 8005310:	41700000 	.word	0x41700000
 8005314:	3fe00000 	.word	0x3fe00000
 8005318:	08005bb8 	.word	0x08005bb8
 800531c:	1e62      	subs	r2, r4, #1
 800531e:	ab0e      	add	r3, sp, #56	; 0x38
 8005320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005324:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005328:	e7db      	b.n	80052e2 <__kernel_rem_pio2+0x30a>
 800532a:	a90e      	add	r1, sp, #56	; 0x38
 800532c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005330:	3b01      	subs	r3, #1
 8005332:	430a      	orrs	r2, r1
 8005334:	e78b      	b.n	800524e <__kernel_rem_pio2+0x276>
 8005336:	3301      	adds	r3, #1
 8005338:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800533c:	2900      	cmp	r1, #0
 800533e:	d0fa      	beq.n	8005336 <__kernel_rem_pio2+0x35e>
 8005340:	9a08      	ldr	r2, [sp, #32]
 8005342:	4422      	add	r2, r4
 8005344:	00d2      	lsls	r2, r2, #3
 8005346:	a922      	add	r1, sp, #136	; 0x88
 8005348:	18e3      	adds	r3, r4, r3
 800534a:	9206      	str	r2, [sp, #24]
 800534c:	440a      	add	r2, r1
 800534e:	9302      	str	r3, [sp, #8]
 8005350:	f10b 0108 	add.w	r1, fp, #8
 8005354:	f102 0308 	add.w	r3, r2, #8
 8005358:	1c66      	adds	r6, r4, #1
 800535a:	910a      	str	r1, [sp, #40]	; 0x28
 800535c:	2500      	movs	r5, #0
 800535e:	930d      	str	r3, [sp, #52]	; 0x34
 8005360:	9b02      	ldr	r3, [sp, #8]
 8005362:	42b3      	cmp	r3, r6
 8005364:	da04      	bge.n	8005370 <__kernel_rem_pio2+0x398>
 8005366:	461c      	mov	r4, r3
 8005368:	e6a6      	b.n	80050b8 <__kernel_rem_pio2+0xe0>
 800536a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800536c:	2301      	movs	r3, #1
 800536e:	e7e3      	b.n	8005338 <__kernel_rem_pio2+0x360>
 8005370:	9b06      	ldr	r3, [sp, #24]
 8005372:	18ef      	adds	r7, r5, r3
 8005374:	ab22      	add	r3, sp, #136	; 0x88
 8005376:	441f      	add	r7, r3
 8005378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800537a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800537e:	f7fb f889 	bl	8000494 <__aeabi_i2d>
 8005382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005384:	461c      	mov	r4, r3
 8005386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005388:	e9c7 0100 	strd	r0, r1, [r7]
 800538c:	eb03 0b05 	add.w	fp, r3, r5
 8005390:	2700      	movs	r7, #0
 8005392:	f04f 0800 	mov.w	r8, #0
 8005396:	f04f 0900 	mov.w	r9, #0
 800539a:	9b07      	ldr	r3, [sp, #28]
 800539c:	429f      	cmp	r7, r3
 800539e:	dd08      	ble.n	80053b2 <__kernel_rem_pio2+0x3da>
 80053a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a2:	aa72      	add	r2, sp, #456	; 0x1c8
 80053a4:	18eb      	adds	r3, r5, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80053ac:	3601      	adds	r6, #1
 80053ae:	3508      	adds	r5, #8
 80053b0:	e7d6      	b.n	8005360 <__kernel_rem_pio2+0x388>
 80053b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80053b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80053ba:	f7fb f8d5 	bl	8000568 <__aeabi_dmul>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fa ff19 	bl	80001fc <__adddf3>
 80053ca:	3701      	adds	r7, #1
 80053cc:	4680      	mov	r8, r0
 80053ce:	4689      	mov	r9, r1
 80053d0:	e7e3      	b.n	800539a <__kernel_rem_pio2+0x3c2>
 80053d2:	3d01      	subs	r5, #1
 80053d4:	e741      	b.n	800525a <__kernel_rem_pio2+0x282>
 80053d6:	f1ca 0000 	rsb	r0, sl, #0
 80053da:	ec47 6b10 	vmov	d0, r6, r7
 80053de:	f000 fa83 	bl	80058e8 <scalbn>
 80053e2:	ec57 6b10 	vmov	r6, r7, d0
 80053e6:	2200      	movs	r2, #0
 80053e8:	4b99      	ldr	r3, [pc, #612]	; (8005650 <__kernel_rem_pio2+0x678>)
 80053ea:	ee10 0a10 	vmov	r0, s0
 80053ee:	4639      	mov	r1, r7
 80053f0:	f7fb fb40 	bl	8000a74 <__aeabi_dcmpge>
 80053f4:	b1f8      	cbz	r0, 8005436 <__kernel_rem_pio2+0x45e>
 80053f6:	2200      	movs	r2, #0
 80053f8:	4b96      	ldr	r3, [pc, #600]	; (8005654 <__kernel_rem_pio2+0x67c>)
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	f7fb f8b3 	bl	8000568 <__aeabi_dmul>
 8005402:	f7fb fb4b 	bl	8000a9c <__aeabi_d2iz>
 8005406:	4680      	mov	r8, r0
 8005408:	f7fb f844 	bl	8000494 <__aeabi_i2d>
 800540c:	2200      	movs	r2, #0
 800540e:	4b90      	ldr	r3, [pc, #576]	; (8005650 <__kernel_rem_pio2+0x678>)
 8005410:	f7fb f8aa 	bl	8000568 <__aeabi_dmul>
 8005414:	460b      	mov	r3, r1
 8005416:	4602      	mov	r2, r0
 8005418:	4639      	mov	r1, r7
 800541a:	4630      	mov	r0, r6
 800541c:	f7fa feec 	bl	80001f8 <__aeabi_dsub>
 8005420:	f7fb fb3c 	bl	8000a9c <__aeabi_d2iz>
 8005424:	1c65      	adds	r5, r4, #1
 8005426:	ab0e      	add	r3, sp, #56	; 0x38
 8005428:	f10a 0a18 	add.w	sl, sl, #24
 800542c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005430:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005434:	e719      	b.n	800526a <__kernel_rem_pio2+0x292>
 8005436:	4630      	mov	r0, r6
 8005438:	4639      	mov	r1, r7
 800543a:	f7fb fb2f 	bl	8000a9c <__aeabi_d2iz>
 800543e:	ab0e      	add	r3, sp, #56	; 0x38
 8005440:	4625      	mov	r5, r4
 8005442:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005446:	e710      	b.n	800526a <__kernel_rem_pio2+0x292>
 8005448:	ab0e      	add	r3, sp, #56	; 0x38
 800544a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800544e:	f7fb f821 	bl	8000494 <__aeabi_i2d>
 8005452:	4642      	mov	r2, r8
 8005454:	464b      	mov	r3, r9
 8005456:	f7fb f887 	bl	8000568 <__aeabi_dmul>
 800545a:	2200      	movs	r2, #0
 800545c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005460:	4b7c      	ldr	r3, [pc, #496]	; (8005654 <__kernel_rem_pio2+0x67c>)
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f7fb f87f 	bl	8000568 <__aeabi_dmul>
 800546a:	3f01      	subs	r7, #1
 800546c:	4680      	mov	r8, r0
 800546e:	4689      	mov	r9, r1
 8005470:	e708      	b.n	8005284 <__kernel_rem_pio2+0x2ac>
 8005472:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800547e:	f7fb f873 	bl	8000568 <__aeabi_dmul>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4640      	mov	r0, r8
 8005488:	4649      	mov	r1, r9
 800548a:	f7fa feb7 	bl	80001fc <__adddf3>
 800548e:	3701      	adds	r7, #1
 8005490:	4680      	mov	r8, r0
 8005492:	4689      	mov	r9, r1
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	429f      	cmp	r7, r3
 8005498:	dc01      	bgt.n	800549e <__kernel_rem_pio2+0x4c6>
 800549a:	45ba      	cmp	sl, r7
 800549c:	dae9      	bge.n	8005472 <__kernel_rem_pio2+0x49a>
 800549e:	ab4a      	add	r3, sp, #296	; 0x128
 80054a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054a4:	e9c3 8900 	strd	r8, r9, [r3]
 80054a8:	f10a 0a01 	add.w	sl, sl, #1
 80054ac:	3e08      	subs	r6, #8
 80054ae:	e6f0      	b.n	8005292 <__kernel_rem_pio2+0x2ba>
 80054b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d85b      	bhi.n	800556e <__kernel_rem_pio2+0x596>
 80054b6:	e8df f003 	tbb	[pc, r3]
 80054ba:	264a      	.short	0x264a
 80054bc:	0226      	.short	0x0226
 80054be:	ab9a      	add	r3, sp, #616	; 0x268
 80054c0:	441c      	add	r4, r3
 80054c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80054c6:	46a2      	mov	sl, r4
 80054c8:	46ab      	mov	fp, r5
 80054ca:	f1bb 0f00 	cmp.w	fp, #0
 80054ce:	dc6c      	bgt.n	80055aa <__kernel_rem_pio2+0x5d2>
 80054d0:	46a2      	mov	sl, r4
 80054d2:	46ab      	mov	fp, r5
 80054d4:	f1bb 0f01 	cmp.w	fp, #1
 80054d8:	f300 8086 	bgt.w	80055e8 <__kernel_rem_pio2+0x610>
 80054dc:	2000      	movs	r0, #0
 80054de:	2100      	movs	r1, #0
 80054e0:	2d01      	cmp	r5, #1
 80054e2:	f300 80a0 	bgt.w	8005626 <__kernel_rem_pio2+0x64e>
 80054e6:	9b02      	ldr	r3, [sp, #8]
 80054e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80054ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 809e 	bne.w	8005632 <__kernel_rem_pio2+0x65a>
 80054f6:	9b01      	ldr	r3, [sp, #4]
 80054f8:	e9c3 7800 	strd	r7, r8, [r3]
 80054fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005500:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005504:	e033      	b.n	800556e <__kernel_rem_pio2+0x596>
 8005506:	3408      	adds	r4, #8
 8005508:	ab4a      	add	r3, sp, #296	; 0x128
 800550a:	441c      	add	r4, r3
 800550c:	462e      	mov	r6, r5
 800550e:	2000      	movs	r0, #0
 8005510:	2100      	movs	r1, #0
 8005512:	2e00      	cmp	r6, #0
 8005514:	da3a      	bge.n	800558c <__kernel_rem_pio2+0x5b4>
 8005516:	9b02      	ldr	r3, [sp, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d03d      	beq.n	8005598 <__kernel_rem_pio2+0x5c0>
 800551c:	4602      	mov	r2, r0
 800551e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005522:	9c01      	ldr	r4, [sp, #4]
 8005524:	e9c4 2300 	strd	r2, r3, [r4]
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005530:	f7fa fe62 	bl	80001f8 <__aeabi_dsub>
 8005534:	ae4c      	add	r6, sp, #304	; 0x130
 8005536:	2401      	movs	r4, #1
 8005538:	42a5      	cmp	r5, r4
 800553a:	da30      	bge.n	800559e <__kernel_rem_pio2+0x5c6>
 800553c:	9b02      	ldr	r3, [sp, #8]
 800553e:	b113      	cbz	r3, 8005546 <__kernel_rem_pio2+0x56e>
 8005540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005544:	4619      	mov	r1, r3
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800554c:	e00f      	b.n	800556e <__kernel_rem_pio2+0x596>
 800554e:	ab9a      	add	r3, sp, #616	; 0x268
 8005550:	441c      	add	r4, r3
 8005552:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005556:	2000      	movs	r0, #0
 8005558:	2100      	movs	r1, #0
 800555a:	2d00      	cmp	r5, #0
 800555c:	da10      	bge.n	8005580 <__kernel_rem_pio2+0x5a8>
 800555e:	9b02      	ldr	r3, [sp, #8]
 8005560:	b113      	cbz	r3, 8005568 <__kernel_rem_pio2+0x590>
 8005562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005566:	4619      	mov	r1, r3
 8005568:	9b01      	ldr	r3, [sp, #4]
 800556a:	e9c3 0100 	strd	r0, r1, [r3]
 800556e:	9b06      	ldr	r3, [sp, #24]
 8005570:	f003 0007 	and.w	r0, r3, #7
 8005574:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005578:	ecbd 8b02 	vpop	{d8}
 800557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005580:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005584:	f7fa fe3a 	bl	80001fc <__adddf3>
 8005588:	3d01      	subs	r5, #1
 800558a:	e7e6      	b.n	800555a <__kernel_rem_pio2+0x582>
 800558c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005590:	f7fa fe34 	bl	80001fc <__adddf3>
 8005594:	3e01      	subs	r6, #1
 8005596:	e7bc      	b.n	8005512 <__kernel_rem_pio2+0x53a>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	e7c1      	b.n	8005522 <__kernel_rem_pio2+0x54a>
 800559e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80055a2:	f7fa fe2b 	bl	80001fc <__adddf3>
 80055a6:	3401      	adds	r4, #1
 80055a8:	e7c6      	b.n	8005538 <__kernel_rem_pio2+0x560>
 80055aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80055ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 80055b2:	4640      	mov	r0, r8
 80055b4:	ec53 2b17 	vmov	r2, r3, d7
 80055b8:	4649      	mov	r1, r9
 80055ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80055be:	f7fa fe1d 	bl	80001fc <__adddf3>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4606      	mov	r6, r0
 80055c8:	460f      	mov	r7, r1
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fa fe13 	bl	80001f8 <__aeabi_dsub>
 80055d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d6:	f7fa fe11 	bl	80001fc <__adddf3>
 80055da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055de:	e9ca 0100 	strd	r0, r1, [sl]
 80055e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80055e6:	e770      	b.n	80054ca <__kernel_rem_pio2+0x4f2>
 80055e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80055ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 80055f0:	4630      	mov	r0, r6
 80055f2:	ec53 2b17 	vmov	r2, r3, d7
 80055f6:	4639      	mov	r1, r7
 80055f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80055fc:	f7fa fdfe 	bl	80001fc <__adddf3>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4680      	mov	r8, r0
 8005606:	4689      	mov	r9, r1
 8005608:	4630      	mov	r0, r6
 800560a:	4639      	mov	r1, r7
 800560c:	f7fa fdf4 	bl	80001f8 <__aeabi_dsub>
 8005610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005614:	f7fa fdf2 	bl	80001fc <__adddf3>
 8005618:	f10b 3bff 	add.w	fp, fp, #4294967295
 800561c:	e9ca 0100 	strd	r0, r1, [sl]
 8005620:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005624:	e756      	b.n	80054d4 <__kernel_rem_pio2+0x4fc>
 8005626:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800562a:	f7fa fde7 	bl	80001fc <__adddf3>
 800562e:	3d01      	subs	r5, #1
 8005630:	e756      	b.n	80054e0 <__kernel_rem_pio2+0x508>
 8005632:	9b01      	ldr	r3, [sp, #4]
 8005634:	9a01      	ldr	r2, [sp, #4]
 8005636:	601f      	str	r7, [r3, #0]
 8005638:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800563c:	605c      	str	r4, [r3, #4]
 800563e:	609d      	str	r5, [r3, #8]
 8005640:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005644:	60d3      	str	r3, [r2, #12]
 8005646:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800564a:	6110      	str	r0, [r2, #16]
 800564c:	6153      	str	r3, [r2, #20]
 800564e:	e78e      	b.n	800556e <__kernel_rem_pio2+0x596>
 8005650:	41700000 	.word	0x41700000
 8005654:	3e700000 	.word	0x3e700000

08005658 <__kernel_sin>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	ec55 4b10 	vmov	r4, r5, d0
 8005660:	b085      	sub	sp, #20
 8005662:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005666:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800566a:	ed8d 1b00 	vstr	d1, [sp]
 800566e:	9002      	str	r0, [sp, #8]
 8005670:	da06      	bge.n	8005680 <__kernel_sin+0x28>
 8005672:	ee10 0a10 	vmov	r0, s0
 8005676:	4629      	mov	r1, r5
 8005678:	f7fb fa10 	bl	8000a9c <__aeabi_d2iz>
 800567c:	2800      	cmp	r0, #0
 800567e:	d051      	beq.n	8005724 <__kernel_sin+0xcc>
 8005680:	4622      	mov	r2, r4
 8005682:	462b      	mov	r3, r5
 8005684:	4620      	mov	r0, r4
 8005686:	4629      	mov	r1, r5
 8005688:	f7fa ff6e 	bl	8000568 <__aeabi_dmul>
 800568c:	4682      	mov	sl, r0
 800568e:	468b      	mov	fp, r1
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4620      	mov	r0, r4
 8005696:	4629      	mov	r1, r5
 8005698:	f7fa ff66 	bl	8000568 <__aeabi_dmul>
 800569c:	a341      	add	r3, pc, #260	; (adr r3, 80057a4 <__kernel_sin+0x14c>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	4680      	mov	r8, r0
 80056a4:	4689      	mov	r9, r1
 80056a6:	4650      	mov	r0, sl
 80056a8:	4659      	mov	r1, fp
 80056aa:	f7fa ff5d 	bl	8000568 <__aeabi_dmul>
 80056ae:	a33f      	add	r3, pc, #252	; (adr r3, 80057ac <__kernel_sin+0x154>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f7fa fda0 	bl	80001f8 <__aeabi_dsub>
 80056b8:	4652      	mov	r2, sl
 80056ba:	465b      	mov	r3, fp
 80056bc:	f7fa ff54 	bl	8000568 <__aeabi_dmul>
 80056c0:	a33c      	add	r3, pc, #240	; (adr r3, 80057b4 <__kernel_sin+0x15c>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa fd99 	bl	80001fc <__adddf3>
 80056ca:	4652      	mov	r2, sl
 80056cc:	465b      	mov	r3, fp
 80056ce:	f7fa ff4b 	bl	8000568 <__aeabi_dmul>
 80056d2:	a33a      	add	r3, pc, #232	; (adr r3, 80057bc <__kernel_sin+0x164>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fa fd8e 	bl	80001f8 <__aeabi_dsub>
 80056dc:	4652      	mov	r2, sl
 80056de:	465b      	mov	r3, fp
 80056e0:	f7fa ff42 	bl	8000568 <__aeabi_dmul>
 80056e4:	a337      	add	r3, pc, #220	; (adr r3, 80057c4 <__kernel_sin+0x16c>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fd87 	bl	80001fc <__adddf3>
 80056ee:	9b02      	ldr	r3, [sp, #8]
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	b9db      	cbnz	r3, 800572e <__kernel_sin+0xd6>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4650      	mov	r0, sl
 80056fc:	4659      	mov	r1, fp
 80056fe:	f7fa ff33 	bl	8000568 <__aeabi_dmul>
 8005702:	a325      	add	r3, pc, #148	; (adr r3, 8005798 <__kernel_sin+0x140>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f7fa fd76 	bl	80001f8 <__aeabi_dsub>
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	f7fa ff2a 	bl	8000568 <__aeabi_dmul>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4620      	mov	r0, r4
 800571a:	4629      	mov	r1, r5
 800571c:	f7fa fd6e 	bl	80001fc <__adddf3>
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	ec45 4b10 	vmov	d0, r4, r5
 8005728:	b005      	add	sp, #20
 800572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572e:	2200      	movs	r2, #0
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <__kernel_sin+0x148>)
 8005732:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005736:	f7fa ff17 	bl	8000568 <__aeabi_dmul>
 800573a:	4632      	mov	r2, r6
 800573c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005740:	463b      	mov	r3, r7
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fa ff0f 	bl	8000568 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005752:	f7fa fd51 	bl	80001f8 <__aeabi_dsub>
 8005756:	4652      	mov	r2, sl
 8005758:	465b      	mov	r3, fp
 800575a:	f7fa ff05 	bl	8000568 <__aeabi_dmul>
 800575e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005762:	f7fa fd49 	bl	80001f8 <__aeabi_dsub>
 8005766:	a30c      	add	r3, pc, #48	; (adr r3, 8005798 <__kernel_sin+0x140>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	4606      	mov	r6, r0
 800576e:	460f      	mov	r7, r1
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fa fef8 	bl	8000568 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4630      	mov	r0, r6
 800577e:	4639      	mov	r1, r7
 8005780:	f7fa fd3c 	bl	80001fc <__adddf3>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4620      	mov	r0, r4
 800578a:	4629      	mov	r1, r5
 800578c:	f7fa fd34 	bl	80001f8 <__aeabi_dsub>
 8005790:	e7c6      	b.n	8005720 <__kernel_sin+0xc8>
 8005792:	bf00      	nop
 8005794:	f3af 8000 	nop.w
 8005798:	55555549 	.word	0x55555549
 800579c:	3fc55555 	.word	0x3fc55555
 80057a0:	3fe00000 	.word	0x3fe00000
 80057a4:	5acfd57c 	.word	0x5acfd57c
 80057a8:	3de5d93a 	.word	0x3de5d93a
 80057ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80057b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80057b4:	57b1fe7d 	.word	0x57b1fe7d
 80057b8:	3ec71de3 	.word	0x3ec71de3
 80057bc:	19c161d5 	.word	0x19c161d5
 80057c0:	3f2a01a0 	.word	0x3f2a01a0
 80057c4:	1110f8a6 	.word	0x1110f8a6
 80057c8:	3f811111 	.word	0x3f811111

080057cc <fabs>:
 80057cc:	ec51 0b10 	vmov	r0, r1, d0
 80057d0:	ee10 2a10 	vmov	r2, s0
 80057d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057d8:	ec43 2b10 	vmov	d0, r2, r3
 80057dc:	4770      	bx	lr
	...

080057e0 <floor>:
 80057e0:	ec51 0b10 	vmov	r0, r1, d0
 80057e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80057ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80057f0:	2e13      	cmp	r6, #19
 80057f2:	460c      	mov	r4, r1
 80057f4:	ee10 5a10 	vmov	r5, s0
 80057f8:	4680      	mov	r8, r0
 80057fa:	dc34      	bgt.n	8005866 <floor+0x86>
 80057fc:	2e00      	cmp	r6, #0
 80057fe:	da16      	bge.n	800582e <floor+0x4e>
 8005800:	a335      	add	r3, pc, #212	; (adr r3, 80058d8 <floor+0xf8>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	f7fa fcf9 	bl	80001fc <__adddf3>
 800580a:	2200      	movs	r2, #0
 800580c:	2300      	movs	r3, #0
 800580e:	f7fb f93b 	bl	8000a88 <__aeabi_dcmpgt>
 8005812:	b148      	cbz	r0, 8005828 <floor+0x48>
 8005814:	2c00      	cmp	r4, #0
 8005816:	da59      	bge.n	80058cc <floor+0xec>
 8005818:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800581c:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <floor+0x100>)
 800581e:	432b      	orrs	r3, r5
 8005820:	2500      	movs	r5, #0
 8005822:	42ab      	cmp	r3, r5
 8005824:	bf18      	it	ne
 8005826:	4614      	movne	r4, r2
 8005828:	4621      	mov	r1, r4
 800582a:	4628      	mov	r0, r5
 800582c:	e025      	b.n	800587a <floor+0x9a>
 800582e:	4f2d      	ldr	r7, [pc, #180]	; (80058e4 <floor+0x104>)
 8005830:	4137      	asrs	r7, r6
 8005832:	ea01 0307 	and.w	r3, r1, r7
 8005836:	4303      	orrs	r3, r0
 8005838:	d01f      	beq.n	800587a <floor+0x9a>
 800583a:	a327      	add	r3, pc, #156	; (adr r3, 80058d8 <floor+0xf8>)
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f7fa fcdc 	bl	80001fc <__adddf3>
 8005844:	2200      	movs	r2, #0
 8005846:	2300      	movs	r3, #0
 8005848:	f7fb f91e 	bl	8000a88 <__aeabi_dcmpgt>
 800584c:	2800      	cmp	r0, #0
 800584e:	d0eb      	beq.n	8005828 <floor+0x48>
 8005850:	2c00      	cmp	r4, #0
 8005852:	bfbe      	ittt	lt
 8005854:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005858:	fa43 f606 	asrlt.w	r6, r3, r6
 800585c:	19a4      	addlt	r4, r4, r6
 800585e:	ea24 0407 	bic.w	r4, r4, r7
 8005862:	2500      	movs	r5, #0
 8005864:	e7e0      	b.n	8005828 <floor+0x48>
 8005866:	2e33      	cmp	r6, #51	; 0x33
 8005868:	dd0b      	ble.n	8005882 <floor+0xa2>
 800586a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800586e:	d104      	bne.n	800587a <floor+0x9a>
 8005870:	ee10 2a10 	vmov	r2, s0
 8005874:	460b      	mov	r3, r1
 8005876:	f7fa fcc1 	bl	80001fc <__adddf3>
 800587a:	ec41 0b10 	vmov	d0, r0, r1
 800587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005882:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	fa23 f707 	lsr.w	r7, r3, r7
 800588e:	4207      	tst	r7, r0
 8005890:	d0f3      	beq.n	800587a <floor+0x9a>
 8005892:	a311      	add	r3, pc, #68	; (adr r3, 80058d8 <floor+0xf8>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa fcb0 	bl	80001fc <__adddf3>
 800589c:	2200      	movs	r2, #0
 800589e:	2300      	movs	r3, #0
 80058a0:	f7fb f8f2 	bl	8000a88 <__aeabi_dcmpgt>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0bf      	beq.n	8005828 <floor+0x48>
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	da02      	bge.n	80058b2 <floor+0xd2>
 80058ac:	2e14      	cmp	r6, #20
 80058ae:	d103      	bne.n	80058b8 <floor+0xd8>
 80058b0:	3401      	adds	r4, #1
 80058b2:	ea25 0507 	bic.w	r5, r5, r7
 80058b6:	e7b7      	b.n	8005828 <floor+0x48>
 80058b8:	2301      	movs	r3, #1
 80058ba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80058be:	fa03 f606 	lsl.w	r6, r3, r6
 80058c2:	4435      	add	r5, r6
 80058c4:	4545      	cmp	r5, r8
 80058c6:	bf38      	it	cc
 80058c8:	18e4      	addcc	r4, r4, r3
 80058ca:	e7f2      	b.n	80058b2 <floor+0xd2>
 80058cc:	2500      	movs	r5, #0
 80058ce:	462c      	mov	r4, r5
 80058d0:	e7aa      	b.n	8005828 <floor+0x48>
 80058d2:	bf00      	nop
 80058d4:	f3af 8000 	nop.w
 80058d8:	8800759c 	.word	0x8800759c
 80058dc:	7e37e43c 	.word	0x7e37e43c
 80058e0:	bff00000 	.word	0xbff00000
 80058e4:	000fffff 	.word	0x000fffff

080058e8 <scalbn>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	ec55 4b10 	vmov	r4, r5, d0
 80058ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80058f2:	4606      	mov	r6, r0
 80058f4:	462b      	mov	r3, r5
 80058f6:	b9aa      	cbnz	r2, 8005924 <scalbn+0x3c>
 80058f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80058fc:	4323      	orrs	r3, r4
 80058fe:	d03b      	beq.n	8005978 <scalbn+0x90>
 8005900:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <scalbn+0xe0>)
 8005902:	4629      	mov	r1, r5
 8005904:	2200      	movs	r2, #0
 8005906:	ee10 0a10 	vmov	r0, s0
 800590a:	f7fa fe2d 	bl	8000568 <__aeabi_dmul>
 800590e:	4b2f      	ldr	r3, [pc, #188]	; (80059cc <scalbn+0xe4>)
 8005910:	429e      	cmp	r6, r3
 8005912:	4604      	mov	r4, r0
 8005914:	460d      	mov	r5, r1
 8005916:	da12      	bge.n	800593e <scalbn+0x56>
 8005918:	a327      	add	r3, pc, #156	; (adr r3, 80059b8 <scalbn+0xd0>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fe23 	bl	8000568 <__aeabi_dmul>
 8005922:	e009      	b.n	8005938 <scalbn+0x50>
 8005924:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005928:	428a      	cmp	r2, r1
 800592a:	d10c      	bne.n	8005946 <scalbn+0x5e>
 800592c:	ee10 2a10 	vmov	r2, s0
 8005930:	4620      	mov	r0, r4
 8005932:	4629      	mov	r1, r5
 8005934:	f7fa fc62 	bl	80001fc <__adddf3>
 8005938:	4604      	mov	r4, r0
 800593a:	460d      	mov	r5, r1
 800593c:	e01c      	b.n	8005978 <scalbn+0x90>
 800593e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005942:	460b      	mov	r3, r1
 8005944:	3a36      	subs	r2, #54	; 0x36
 8005946:	4432      	add	r2, r6
 8005948:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800594c:	428a      	cmp	r2, r1
 800594e:	dd0b      	ble.n	8005968 <scalbn+0x80>
 8005950:	ec45 4b11 	vmov	d1, r4, r5
 8005954:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80059c0 <scalbn+0xd8>
 8005958:	f000 f83c 	bl	80059d4 <copysign>
 800595c:	a318      	add	r3, pc, #96	; (adr r3, 80059c0 <scalbn+0xd8>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	ec51 0b10 	vmov	r0, r1, d0
 8005966:	e7da      	b.n	800591e <scalbn+0x36>
 8005968:	2a00      	cmp	r2, #0
 800596a:	dd08      	ble.n	800597e <scalbn+0x96>
 800596c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005974:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005978:	ec45 4b10 	vmov	d0, r4, r5
 800597c:	bd70      	pop	{r4, r5, r6, pc}
 800597e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005982:	da0d      	bge.n	80059a0 <scalbn+0xb8>
 8005984:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005988:	429e      	cmp	r6, r3
 800598a:	ec45 4b11 	vmov	d1, r4, r5
 800598e:	dce1      	bgt.n	8005954 <scalbn+0x6c>
 8005990:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80059b8 <scalbn+0xd0>
 8005994:	f000 f81e 	bl	80059d4 <copysign>
 8005998:	a307      	add	r3, pc, #28	; (adr r3, 80059b8 <scalbn+0xd0>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	e7e0      	b.n	8005962 <scalbn+0x7a>
 80059a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80059a4:	3236      	adds	r2, #54	; 0x36
 80059a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80059ae:	4620      	mov	r0, r4
 80059b0:	4629      	mov	r1, r5
 80059b2:	2200      	movs	r2, #0
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <scalbn+0xe8>)
 80059b6:	e7b2      	b.n	800591e <scalbn+0x36>
 80059b8:	c2f8f359 	.word	0xc2f8f359
 80059bc:	01a56e1f 	.word	0x01a56e1f
 80059c0:	8800759c 	.word	0x8800759c
 80059c4:	7e37e43c 	.word	0x7e37e43c
 80059c8:	43500000 	.word	0x43500000
 80059cc:	ffff3cb0 	.word	0xffff3cb0
 80059d0:	3c900000 	.word	0x3c900000

080059d4 <copysign>:
 80059d4:	ec51 0b10 	vmov	r0, r1, d0
 80059d8:	ee11 0a90 	vmov	r0, s3
 80059dc:	ee10 2a10 	vmov	r2, s0
 80059e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80059e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80059e8:	ea41 0300 	orr.w	r3, r1, r0
 80059ec:	ec43 2b10 	vmov	d0, r2, r3
 80059f0:	4770      	bx	lr
	...

080059f4 <_init>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	bf00      	nop
 80059f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fa:	bc08      	pop	{r3}
 80059fc:	469e      	mov	lr, r3
 80059fe:	4770      	bx	lr

08005a00 <_fini>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr
