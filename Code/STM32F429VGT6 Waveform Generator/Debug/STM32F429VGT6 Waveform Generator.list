
STM32F429VGT6 Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fdc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b0  080041b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000000c  080041c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080041c4  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6fc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ff4  00000000  00000000  0002f738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  00031730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  000327b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e7e  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3bd  00000000  00000000  000575ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd54d  00000000  00000000  0006398b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a0  00000000  00000000  00140f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004170 	.word	0x08004170

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004170 	.word	0x08004170

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 ff38 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f818 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fafa 	bl	8000af0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 fad0 	bl	8000aa0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000500:	f000 f87c 	bl	80005fc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000504:	f000 f8cc 	bl	80006a0 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000508:	f000 f950 	bl	80007ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800050c:	f000 fa6c 	bl	80009e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000510:	f000 fa94 	bl	8000a3c <MX_USART2_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000514:	f000 fabc 	bl	8000a90 <MX_USB_OTG_FS_USB_Init>
  MX_DAC_Init();
 8000518:	f000 f914 	bl	8000744 <MX_DAC_Init>
  MX_TIM1_Init();
 800051c:	f000 f986 	bl	800082c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000520:	f000 fa08 	bl	8000934 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x38>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fe12 	bl	8004160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xd0>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000598:	2316      	movs	r3, #22
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 295;
 800059c:	f240 1327 	movw	r3, #295	; 0x127
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f99c 	bl	80028ec <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ba:	f000 fb4d 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2105      	movs	r1, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fbf5 	bl	8002dcc <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e8:	f000 fb36 	bl	8000c58 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0x98>)
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0x98>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_ADC1_Init+0x98>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_ADC1_Init+0xa0>)
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ADC1_Init+0x98>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_ADC1_Init+0x98>)
 800065e:	f000 fef3 	bl	8001448 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 faf6 	bl	8000c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0x98>)
 800067e:	f000 ff27 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 fae6 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000164 	.word	0x20000164
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC2_Init+0x98>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_ADC2_Init+0x9c>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ADC2_Init+0x98>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC2_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_ADC2_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ADC2_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_ADC2_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_ADC2_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ADC2_Init+0x98>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_ADC2_Init+0xa0>)
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC2_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_ADC2_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_ADC2_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_ADC2_Init+0x98>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_ADC2_Init+0x98>)
 8000702:	f000 fea1 	bl	8001448 <HAL_ADC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 faa4 	bl	8000c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000710:	2301      	movs	r3, #1
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_ADC2_Init+0x98>)
 8000722:	f000 fed5 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800072c:	f000 fa94 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000028 	.word	0x20000028
 800073c:	40012100 	.word	0x40012100
 8000740:	0f000001 	.word	0x0f000001

08000744 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_DAC_Init+0x60>)
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <MX_DAC_Init+0x64>)
 8000756:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_DAC_Init+0x60>)
 800075a:	f001 f9f8 	bl	8001b4e <HAL_DAC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000764:	f000 fa78 	bl	8000c58 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	4619      	mov	r1, r3
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_DAC_Init+0x60>)
 8000778:	f001 fa0b 	bl	8001b92 <HAL_DAC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000782:	f000 fa69 	bl	8000c58 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	2210      	movs	r2, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_DAC_Init+0x60>)
 800078e:	f001 fa00 	bl	8001b92 <HAL_DAC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000798:	f000 fa5e 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001ec 	.word	0x200001ec
 80007a8:	40007400 	.word	0x40007400

080007ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_I2C1_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_I2C1_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_I2C1_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <MX_I2C1_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_I2C1_Init+0x74>)
 80007ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <MX_I2C1_Init+0x74>)
 80007ea:	f001 fecb 	bl	8002584 <HAL_I2C_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f4:	f000 fa30 	bl	8000c58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_I2C1_Init+0x74>)
 80007fc:	f001 fffa 	bl	80027f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 fa27 	bl	8000c58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C1_Init+0x74>)
 800080e:	f002 f82d 	bl	800286c <HAL_I2CEx_ConfigDigitalFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 fa1e 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000070 	.word	0x20000070
 8000824:	40005400 	.word	0x40005400
 8000828:	000186a0 	.word	0x000186a0

0800082c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b092      	sub	sp, #72	; 0x48
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fc82 	bl	8004160 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085c:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_TIM1_Init+0x100>)
 800085e:	4a34      	ldr	r2, [pc, #208]	; (8000930 <MX_TIM1_Init+0x104>)
 8000860:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <MX_TIM1_Init+0x100>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_TIM1_Init+0x100>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_TIM1_Init+0x100>)
 8000870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_TIM1_Init+0x100>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_TIM1_Init+0x100>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_TIM1_Init+0x100>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000888:	4828      	ldr	r0, [pc, #160]	; (800092c <MX_TIM1_Init+0x100>)
 800088a:	f002 fc6b 	bl	8003164 <HAL_TIM_PWM_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000894:	f000 f9e0 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008a4:	4619      	mov	r1, r3
 80008a6:	4821      	ldr	r0, [pc, #132]	; (800092c <MX_TIM1_Init+0x100>)
 80008a8:	f002 ff9e 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008b2:	f000 f9d1 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b6:	2360      	movs	r3, #96	; 0x60
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	2200      	movs	r2, #0
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_TIM1_Init+0x100>)
 80008dc:	f002 fc6e 	bl	80031bc <HAL_TIM_PWM_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80008e6:	f000 f9b7 	bl	8000c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000902:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM1_Init+0x100>)
 800090e:	f002 ffe7 	bl	80038e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000918:	f000 f99e 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM1_Init+0x100>)
 800091e:	f000 fb85 	bl	800102c <HAL_TIM_MspPostInit>

}
 8000922:	bf00      	nop
 8000924:	3748      	adds	r7, #72	; 0x48
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000200 	.word	0x20000200
 8000930:	40010000 	.word	0x40010000

08000934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_TIM3_Init+0xac>)
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <MX_TIM3_Init+0xb0>)
 800095a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_TIM3_Init+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_TIM3_Init+0xac>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM3_Init+0xac>)
 800096a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_TIM3_Init+0xac>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM3_Init+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_TIM3_Init+0xac>)
 800097e:	f002 fbf1 	bl	8003164 <HAL_TIM_PWM_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f966 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4619      	mov	r1, r3
 800099a:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_TIM3_Init+0xac>)
 800099c:	f002 ff24 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009a6:	f000 f957 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009aa:	2360      	movs	r3, #96	; 0x60
 80009ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <MX_TIM3_Init+0xac>)
 80009c2:	f002 fbfb 	bl	80031bc <HAL_TIM_PWM_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009cc:	f000 f944 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM3_Init+0xac>)
 80009d2:	f000 fb2b 	bl	800102c <HAL_TIM_MspPostInit>

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000c4 	.word	0x200000c4
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART1_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a20:	f002 ffb0 	bl	8003984 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f915 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001ac 	.word	0x200001ac
 8000a38:	40011000 	.word	0x40011000

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a6c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a76:	f002 ff85 	bl	8003984 <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000a80:	f000 f8ea 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000240 	.word	0x20000240
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_DMA_Init+0x4c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <MX_DMA_Init+0x4c>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <MX_DMA_Init+0x4c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2010      	movs	r0, #16
 8000ac8:	f001 f80b 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000acc:	2010      	movs	r0, #16
 8000ace:	f001 f824 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2011      	movs	r0, #17
 8000ad8:	f001 f803 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000adc:	2011      	movs	r0, #17
 8000ade:	f001 f81c 	bl	8001b1a <HAL_NVIC_EnableIRQ>

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	4b4e      	ldr	r3, [pc, #312]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a4d      	ldr	r2, [pc, #308]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b4b      	ldr	r3, [pc, #300]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a46      	ldr	r2, [pc, #280]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b40      	ldr	r3, [pc, #256]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <MX_GPIO_Init+0x154>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_PWR_GPIO_Port, MAX485_PWR_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4825      	ldr	r0, [pc, #148]	; (8000c48 <MX_GPIO_Init+0x158>)
 8000bb4:	f001 fccc 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000bbe:	4823      	ldr	r0, [pc, #140]	; (8000c4c <MX_GPIO_Init+0x15c>)
 8000bc0:	f001 fcc6 	bl	8002550 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MAX485_PWR_Pin */
  GPIO_InitStruct.Pin = MAX485_PWR_Pin;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MAX485_PWR_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481b      	ldr	r0, [pc, #108]	; (8000c48 <MX_GPIO_Init+0x158>)
 8000bdc:	f001 fb0e 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000be0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000be4:	61fb      	str	r3, [r7, #28]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4814      	ldr	r0, [pc, #80]	; (8000c4c <MX_GPIO_Init+0x15c>)
 8000bfa:	f001 faff 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN2_Pin|BTN1_Pin;
 8000bfe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_GPIO_Init+0x160>)
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_GPIO_Init+0x158>)
 8000c14:	f001 faf2 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000c36:	f001 fae1 	bl	80021fc <HAL_GPIO_Init>

}
 8000c3a:	bf00      	nop
 8000c3c:	3730      	adds	r7, #48	; 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	10110000 	.word	0x10110000
 8000c54:	40020000 	.word	0x40020000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <Error_Handler+0x6>

08000c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_MspInit+0x4c>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a3b      	ldr	r2, [pc, #236]	; (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d142      	bne.n	8000d58 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a39      	ldr	r2, [pc, #228]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d26:	2304      	movs	r3, #4
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <HAL_ADC_MspInit+0x114>)
 8000d3a:	f001 fa5f 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <HAL_ADC_MspInit+0x118>)
 8000d52:	f001 fa53 	bl	80021fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d56:	e02c      	b.n	8000db2 <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <HAL_ADC_MspInit+0x11c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d127      	bne.n	8000db2 <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <HAL_ADC_MspInit+0x118>)
 8000dae:	f001 fa25 	bl	80021fc <HAL_GPIO_Init>
}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40012000 	.word	0x40012000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40012100 	.word	0x40012100

08000dd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <HAL_DAC_MspInit+0x140>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	f040 808a 	bne.w	8000f08 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <HAL_DAC_MspInit+0x144>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <HAL_DAC_MspInit+0x144>)
 8000dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <HAL_DAC_MspInit+0x144>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <HAL_DAC_MspInit+0x144>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a3e      	ldr	r2, [pc, #248]	; (8000f14 <HAL_DAC_MspInit+0x144>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <HAL_DAC_MspInit+0x144>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e2c:	2330      	movs	r3, #48	; 0x30
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4836      	ldr	r0, [pc, #216]	; (8000f18 <HAL_DAC_MspInit+0x148>)
 8000e40:	f001 f9dc 	bl	80021fc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000e44:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e46:	4a36      	ldr	r2, [pc, #216]	; (8000f20 <HAL_DAC_MspInit+0x150>)
 8000e48:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e4c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000e50:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e54:	2240      	movs	r2, #64	; 0x40
 8000e56:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e58:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e64:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6c:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000e8a:	4824      	ldr	r0, [pc, #144]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e8c:	f000 fece 	bl	8001c2c <HAL_DMA_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000e96:	f7ff fedf 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_DAC_MspInit+0x14c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_DAC_MspInit+0x158>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000eae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000eb6:	2240      	movs	r2, #64	; 0x40
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ede:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000eee:	f000 fe9d 	bl	8001c2c <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8000ef8:	f7ff feae 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_DAC_MspInit+0x154>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40007400 	.word	0x40007400
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	20000104 	.word	0x20000104
 8000f20:	40026088 	.word	0x40026088
 8000f24:	20000280 	.word	0x20000280
 8000f28:	400260a0 	.word	0x400260a0

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_I2C_MspInit+0x84>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d12c      	bne.n	8000fa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <HAL_I2C_MspInit+0x8c>)
 8000f88:	f001 f938 	bl	80021fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400

08000fbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <HAL_TIM_PWM_MspInit+0x64>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10e      	bne.n	8000fec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_TIM_PWM_MspInit+0x68>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_TIM_PWM_MspInit+0x68>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_TIM_PWM_MspInit+0x68>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fea:	e012      	b.n	8001012 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_TIM_PWM_MspInit+0x6c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10d      	bne.n	8001012 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_PWM_MspInit+0x68>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_TIM_PWM_MspInit+0x68>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_TIM_PWM_MspInit+0x68>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40010000 	.word	0x40010000
 8001024:	40023800 	.word	0x40023800
 8001028:	40000400 	.word	0x40000400

0800102c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a24      	ldr	r2, [pc, #144]	; (80010dc <HAL_TIM_MspPostInit+0xb0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d11f      	bne.n	800108e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 8001058:	f043 0310 	orr.w	r3, r3, #16
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800106a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4817      	ldr	r0, [pc, #92]	; (80010e4 <HAL_TIM_MspPostInit+0xb8>)
 8001088:	f001 f8b8 	bl	80021fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800108c:	e022      	b.n	80010d4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <HAL_TIM_MspPostInit+0xbc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d11d      	bne.n	80010d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c4:	2302      	movs	r3, #2
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <HAL_TIM_MspPostInit+0xc0>)
 80010d0:	f001 f894 	bl	80021fc <HAL_GPIO_Init>
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010000 	.word	0x40010000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40000400 	.word	0x40000400
 80010ec:	40020000 	.word	0x40020000

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08e      	sub	sp, #56	; 0x38
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a50      	ldr	r2, [pc, #320]	; (8001250 <HAL_UART_MspInit+0x160>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d14b      	bne.n	80011aa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <HAL_UART_MspInit+0x164>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_UART_MspInit+0x164>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <HAL_UART_MspInit+0x164>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	623b      	str	r3, [r7, #32]
 800112c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <HAL_UART_MspInit+0x164>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a47      	ldr	r2, [pc, #284]	; (8001254 <HAL_UART_MspInit+0x164>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b45      	ldr	r3, [pc, #276]	; (8001254 <HAL_UART_MspInit+0x164>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_UART_MspInit+0x164>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a40      	ldr	r2, [pc, #256]	; (8001254 <HAL_UART_MspInit+0x164>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <HAL_UART_MspInit+0x164>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001178:	2307      	movs	r3, #7
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4835      	ldr	r0, [pc, #212]	; (8001258 <HAL_UART_MspInit+0x168>)
 8001184:	f001 f83a 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001198:	2307      	movs	r3, #7
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	482e      	ldr	r0, [pc, #184]	; (800125c <HAL_UART_MspInit+0x16c>)
 80011a4:	f001 f82a 	bl	80021fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a8:	e04e      	b.n	8001248 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <HAL_UART_MspInit+0x170>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d149      	bne.n	8001248 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a25      	ldr	r2, [pc, #148]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_MspInit+0x164>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001208:	230c      	movs	r3, #12
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001218:	2307      	movs	r3, #7
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <HAL_UART_MspInit+0x168>)
 8001224:	f000 ffea 	bl	80021fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001228:	2310      	movs	r3, #16
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001238:	2307      	movs	r3, #7
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <HAL_UART_MspInit+0x174>)
 8001244:	f000 ffda 	bl	80021fc <HAL_GPIO_Init>
}
 8001248:	bf00      	nop
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40011000 	.word	0x40011000
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000
 800125c:	40020400 	.word	0x40020400
 8001260:	40004400 	.word	0x40004400
 8001264:	40020c00 	.word	0x40020c00

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f8a8 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <DMA1_Stream5_IRQHandler+0x10>)
 80012c2:	f000 fd61 	bl	8001d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000104 	.word	0x20000104

080012d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <DMA1_Stream6_IRQHandler+0x10>)
 80012d6:	f000 fd57 	bl	8001d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000280 	.word	0x20000280

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <SystemInit+0x28>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <SystemInit+0x28>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <SystemInit+0x28>)
 80012fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001316:	e003      	b.n	8001320 <LoopCopyDataInit>

08001318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800131a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800131c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800131e:	3104      	adds	r1, #4

08001320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001328:	d3f6      	bcc.n	8001318 <CopyDataInit>
  ldr  r2, =_sbss
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800132c:	e002      	b.n	8001334 <LoopFillZerobss>

0800132e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800132e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001330:	f842 3b04 	str.w	r3, [r2], #4

08001334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001338:	d3f9      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800133a:	f7ff ffd3 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f002 feeb 	bl	8004118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001342:	f7ff f8d3 	bl	80004ec <main>
  bx  lr    
 8001346:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001348:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800134c:	080041b8 	.word	0x080041b8
  ldr  r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001354:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001358:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800135c:	200002e4 	.word	0x200002e4

08001360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC_IRQHandler>
	...

08001364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_Init+0x40>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_Init+0x40>)
 800137a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x40>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 fb9d 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fc62 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fbb5 	bl	8001b36 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 fb7d 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	200002e0 	.word	0x200002e0

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200002e0 	.word	0x200002e0

08001448 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e033      	b.n	80014c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fc22 	bl	8000cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800148e:	f023 0302 	bic.w	r3, r3, #2
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f94a 	bl	8001734 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
 80014b6:	e001      	b.n	80014bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1c>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e113      	b.n	8001714 <HAL_ADC_ConfigChannel+0x244>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	d925      	bls.n	8001548 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68d9      	ldr	r1, [r3, #12]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	3b1e      	subs	r3, #30
 8001512:	2207      	movs	r2, #7
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43da      	mvns	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	400a      	ands	r2, r1
 8001520:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68d9      	ldr	r1, [r3, #12]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	4603      	mov	r3, r0
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4403      	add	r3, r0
 800153a:	3b1e      	subs	r3, #30
 800153c:	409a      	lsls	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	e022      	b.n	800158e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6919      	ldr	r1, [r3, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	2207      	movs	r2, #7
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	400a      	ands	r2, r1
 800156a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	4603      	mov	r3, r0
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4403      	add	r3, r0
 8001584:	409a      	lsls	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b06      	cmp	r3, #6
 8001594:	d824      	bhi.n	80015e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b05      	subs	r3, #5
 80015a8:	221f      	movs	r2, #31
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	400a      	ands	r2, r1
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b05      	subs	r3, #5
 80015d2:	fa00 f203 	lsl.w	r2, r0, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
 80015de:	e04c      	b.n	800167a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	d824      	bhi.n	8001632 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3b23      	subs	r3, #35	; 0x23
 80015fa:	221f      	movs	r2, #31
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43da      	mvns	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b23      	subs	r3, #35	; 0x23
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
 8001630:	e023      	b.n	800167a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b41      	subs	r3, #65	; 0x41
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b41      	subs	r3, #65	; 0x41
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800167a:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_ADC_ConfigChannel+0x250>)
 800167c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <HAL_ADC_ConfigChannel+0x254>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d10f      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1d8>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b12      	cmp	r3, #18
 800168e:	d10b      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_ADC_ConfigChannel+0x254>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12b      	bne.n	800170a <HAL_ADC_ConfigChannel+0x23a>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_ADC_ConfigChannel+0x258>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d003      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x1f4>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b11      	cmp	r3, #17
 80016c2:	d122      	bne.n	800170a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_ADC_ConfigChannel+0x258>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d111      	bne.n	800170a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_ADC_ConfigChannel+0x25c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a11      	ldr	r2, [pc, #68]	; (8001730 <HAL_ADC_ConfigChannel+0x260>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9a      	lsrs	r2, r3, #18
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3b01      	subs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40012300 	.word	0x40012300
 8001724:	40012000 	.word	0x40012000
 8001728:	10000012 	.word	0x10000012
 800172c:	20000000 	.word	0x20000000
 8001730:	431bde83 	.word	0x431bde83

08001734 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800173c:	4b79      	ldr	r3, [pc, #484]	; (8001924 <ADC_Init+0x1f0>)
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	431a      	orrs	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	021a      	lsls	r2, r3, #8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800178c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	4a58      	ldr	r2, [pc, #352]	; (8001928 <ADC_Init+0x1f4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d022      	beq.n	8001812 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	e00f      	b.n	8001832 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001830:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0202 	bic.w	r2, r2, #2
 8001840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6899      	ldr	r1, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7e1b      	ldrb	r3, [r3, #24]
 800184c:	005a      	lsls	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01b      	beq.n	8001898 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800187e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	3b01      	subs	r3, #1
 800188c:	035a      	lsls	r2, r3, #13
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e007      	b.n	80018a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	051a      	lsls	r2, r3, #20
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ea:	025a      	lsls	r2, r3, #9
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	029a      	lsls	r2, r3, #10
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40012300 	.word	0x40012300
 8001928:	0f000001 	.word	0x0f000001

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <__NVIC_EnableIRQ+0x38>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff29 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff3e 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff31 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa2 	bl	8001a88 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e014      	b.n	8001b8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	791b      	ldrb	r3, [r3, #4]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff f92d 	bl	8000dd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	795b      	ldrb	r3, [r3, #5]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_DAC_ConfigChannel+0x20>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e036      	b.n	8001c20 <HAL_DAC_ConfigChannel+0x8e>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001bc6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6819      	ldr	r1, [r3, #0]
 8001c00:	22c0      	movs	r2, #192	; 0xc0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff fbfa 	bl	8001430 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e099      	b.n	8001d7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c68:	e00f      	b.n	8001c8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c6a:	f7ff fbe1 	bl	8001430 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d908      	bls.n	8001c8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e078      	b.n	8001d7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e8      	bne.n	8001c6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_DMA_Init+0x158>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d107      	bne.n	8001cf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	4313      	orrs	r3, r2
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f023 0307 	bic.w	r3, r3, #7
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d117      	bne.n	8001d4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f9e9 	bl	8002108 <DMA_CheckFifoParam>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e016      	b.n	8001d7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f9a0 	bl	800209c <DMA_CalcBaseAndBitshift>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	223f      	movs	r2, #63	; 0x3f
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	f010803f 	.word	0xf010803f

08001d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <HAL_DMA_IRQHandler+0x258>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a92      	ldr	r2, [pc, #584]	; (8001fe4 <HAL_DMA_IRQHandler+0x25c>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2208      	movs	r2, #8
 8001db4:	409a      	lsls	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01a      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0204 	bic.w	r2, r2, #4
 8001dda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2208      	movs	r2, #8
 8001de2:	409a      	lsls	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2201      	movs	r2, #1
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2204      	movs	r2, #4
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00b      	beq.n	8001e60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f043 0204 	orr.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2210      	movs	r2, #16
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d043      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03c      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2210      	movs	r2, #16
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d018      	beq.n	8001eca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d108      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d024      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
 8001eb6:	e01f      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
 8001ec8:	e016      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0208 	bic.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2220      	movs	r2, #32
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 808e 	beq.w	8002026 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8086 	beq.w	8002026 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2220      	movs	r2, #32
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d136      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0216 	bic.w	r2, r2, #22
 8001f40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <HAL_DMA_IRQHandler+0x1da>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	223f      	movs	r2, #63	; 0x3f
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d07d      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
        }
        return;
 8001f9e:	e078      	b.n	8002092 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01c      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d030      	beq.n	8002026 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e02b      	b.n	8002026 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
 8001fde:	e022      	b.n	8002026 <HAL_DMA_IRQHandler+0x29e>
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0210 	bic.w	r2, r2, #16
 8002004:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	2b00      	cmp	r3, #0
 800202c:	d032      	beq.n	8002094 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d022      	beq.n	8002080 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2205      	movs	r2, #5
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	3301      	adds	r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	429a      	cmp	r2, r3
 800205c:	d307      	bcc.n	800206e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f2      	bne.n	8002052 <HAL_DMA_IRQHandler+0x2ca>
 800206c:	e000      	b.n	8002070 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800206e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
 8002090:	e000      	b.n	8002094 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002092:	bf00      	nop
    }
  }
}
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop

0800209c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b10      	subs	r3, #16
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <DMA_CalcBaseAndBitshift+0x64>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <DMA_CalcBaseAndBitshift+0x68>)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d909      	bls.n	80020de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	659a      	str	r2, [r3, #88]	; 0x58
 80020dc:	e007      	b.n	80020ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	aaaaaaab 	.word	0xaaaaaaab
 8002104:	080041a0 	.word	0x080041a0

08002108 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11f      	bne.n	8002162 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d855      	bhi.n	80021d4 <DMA_CheckFifoParam+0xcc>
 8002128:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <DMA_CheckFifoParam+0x28>)
 800212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	08002141 	.word	0x08002141
 8002134:	08002153 	.word	0x08002153
 8002138:	08002141 	.word	0x08002141
 800213c:	080021d5 	.word	0x080021d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d045      	beq.n	80021d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002150:	e042      	b.n	80021d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800215a:	d13f      	bne.n	80021dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002160:	e03c      	b.n	80021dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216a:	d121      	bne.n	80021b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d836      	bhi.n	80021e0 <DMA_CheckFifoParam+0xd8>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <DMA_CheckFifoParam+0x70>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	0800218f 	.word	0x0800218f
 8002180:	08002189 	.word	0x08002189
 8002184:	080021a1 	.word	0x080021a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      break;
 800218c:	e02f      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d024      	beq.n	80021e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219e:	e021      	b.n	80021e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021a8:	d11e      	bne.n	80021e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ae:	e01b      	b.n	80021e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d902      	bls.n	80021bc <DMA_CheckFifoParam+0xb4>
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d003      	beq.n	80021c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ba:	e018      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      break;
 80021c0:	e015      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      break;
 80021d2:	e00b      	b.n	80021ec <DMA_CheckFifoParam+0xe4>
      break;
 80021d4:	bf00      	nop
 80021d6:	e00a      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;
 80021d8:	bf00      	nop
 80021da:	e008      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;
 80021dc:	bf00      	nop
 80021de:	e006      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;
 80021e0:	bf00      	nop
 80021e2:	e004      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;
 80021e4:	bf00      	nop
 80021e6:	e002      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;   
 80021e8:	bf00      	nop
 80021ea:	e000      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;
 80021ec:	bf00      	nop
    }
  } 
  
  return status; 
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e177      	b.n	8002508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8166 	bne.w	8002502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d00b      	beq.n	8002256 <HAL_GPIO_Init+0x5a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224a:	2b11      	cmp	r3, #17
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b12      	cmp	r3, #18
 8002254:	d130      	bne.n	80022b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0xfc>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80c0 	beq.w	8002502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_GPIO_Init+0x320>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a64      	ldr	r2, [pc, #400]	; (800251c <HAL_GPIO_Init+0x320>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_GPIO_Init+0x320>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a60      	ldr	r2, [pc, #384]	; (8002520 <HAL_GPIO_Init+0x324>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_GPIO_Init+0x328>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d037      	beq.n	800243a <HAL_GPIO_Init+0x23e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a56      	ldr	r2, [pc, #344]	; (8002528 <HAL_GPIO_Init+0x32c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d031      	beq.n	8002436 <HAL_GPIO_Init+0x23a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a55      	ldr	r2, [pc, #340]	; (800252c <HAL_GPIO_Init+0x330>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <HAL_GPIO_Init+0x236>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a54      	ldr	r2, [pc, #336]	; (8002530 <HAL_GPIO_Init+0x334>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d025      	beq.n	800242e <HAL_GPIO_Init+0x232>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a53      	ldr	r2, [pc, #332]	; (8002534 <HAL_GPIO_Init+0x338>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01f      	beq.n	800242a <HAL_GPIO_Init+0x22e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x33c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x22a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_GPIO_Init+0x340>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x226>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x344>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x222>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x348>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x21e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_GPIO_Init+0x34c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x21a>
 8002412:	2309      	movs	r3, #9
 8002414:	e012      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002416:	230a      	movs	r3, #10
 8002418:	e010      	b.n	800243c <HAL_GPIO_Init+0x240>
 800241a:	2308      	movs	r3, #8
 800241c:	e00e      	b.n	800243c <HAL_GPIO_Init+0x240>
 800241e:	2307      	movs	r3, #7
 8002420:	e00c      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002422:	2306      	movs	r3, #6
 8002424:	e00a      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002426:	2305      	movs	r3, #5
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x240>
 800242a:	2304      	movs	r3, #4
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x240>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x240>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_GPIO_Init+0x324>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <HAL_GPIO_Init+0x350>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247e:	4a33      	ldr	r2, [pc, #204]	; (800254c <HAL_GPIO_Init+0x350>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_GPIO_Init+0x350>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a8:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_GPIO_Init+0x350>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_GPIO_Init+0x350>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_GPIO_Init+0x350>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_GPIO_Init+0x350>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <HAL_GPIO_Init+0x350>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f ae84 	bls.w	8002218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	3724      	adds	r7, #36	; 0x24
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40023800 	.word	0x40023800
 8002520:	40013800 	.word	0x40013800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40021400 	.word	0x40021400
 800253c:	40021800 	.word	0x40021800
 8002540:	40021c00 	.word	0x40021c00
 8002544:	40022000 	.word	0x40022000
 8002548:	40022400 	.word	0x40022400
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e11f      	b.n	80027d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fcbe 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e8:	f000 fd94 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a7b      	ldr	r2, [pc, #492]	; (80027e0 <HAL_I2C_Init+0x25c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d807      	bhi.n	8002608 <HAL_I2C_Init+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_I2C_Init+0x260>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e006      	b.n	8002616 <HAL_I2C_Init+0x92>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a77      	ldr	r2, [pc, #476]	; (80027e8 <HAL_I2C_Init+0x264>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0db      	b.n	80027d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a72      	ldr	r2, [pc, #456]	; (80027ec <HAL_I2C_Init+0x268>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a64      	ldr	r2, [pc, #400]	; (80027e0 <HAL_I2C_Init+0x25c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d802      	bhi.n	8002658 <HAL_I2C_Init+0xd4>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3301      	adds	r3, #1
 8002656:	e009      	b.n	800266c <HAL_I2C_Init+0xe8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	4a63      	ldr	r2, [pc, #396]	; (80027f0 <HAL_I2C_Init+0x26c>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	3301      	adds	r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800267e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4956      	ldr	r1, [pc, #344]	; (80027e0 <HAL_I2C_Init+0x25c>)
 8002688:	428b      	cmp	r3, r1
 800268a:	d80d      	bhi.n	80026a8 <HAL_I2C_Init+0x124>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e59      	subs	r1, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fbb1 f3f3 	udiv	r3, r1, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	bf38      	it	cc
 80026a4:	2304      	movcc	r3, #4
 80026a6:	e04f      	b.n	8002748 <HAL_I2C_Init+0x1c4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d111      	bne.n	80026d4 <HAL_I2C_Init+0x150>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e012      	b.n	80026fa <HAL_I2C_Init+0x176>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e58      	subs	r0, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	0099      	lsls	r1, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Init+0x17e>
 80026fe:	2301      	movs	r3, #1
 8002700:	e022      	b.n	8002748 <HAL_I2C_Init+0x1c4>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10e      	bne.n	8002728 <HAL_I2C_Init+0x1a4>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1e58      	subs	r0, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6859      	ldr	r1, [r3, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	440b      	add	r3, r1
 8002718:	fbb0 f3f3 	udiv	r3, r0, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002726:	e00f      	b.n	8002748 <HAL_I2C_Init+0x1c4>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	0099      	lsls	r1, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	6809      	ldr	r1, [r1, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6911      	ldr	r1, [r2, #16]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	4311      	orrs	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	430b      	orrs	r3, r1
 800278a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	000186a0 	.word	0x000186a0
 80027e4:	001e847f 	.word	0x001e847f
 80027e8:	003d08ff 	.word	0x003d08ff
 80027ec:	431bde83 	.word	0x431bde83
 80027f0:	10624dd3 	.word	0x10624dd3

080027f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	d129      	bne.n	800285e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2224      	movs	r2, #36	; 0x24
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0210 	bic.w	r2, r2, #16
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b20      	cmp	r3, #32
 8002884:	d12a      	bne.n	80028dc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2224      	movs	r2, #36	; 0x24
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	f023 030f 	bic.w	r3, r3, #15
 80028ac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	89fa      	ldrh	r2, [r7, #14]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e25b      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d075      	beq.n	80029f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290a:	4ba3      	ldr	r3, [pc, #652]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d00c      	beq.n	8002930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002916:	4ba0      	ldr	r3, [pc, #640]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291e:	2b08      	cmp	r3, #8
 8002920:	d112      	bne.n	8002948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002922:	4b9d      	ldr	r3, [pc, #628]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292e:	d10b      	bne.n	8002948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	4b99      	ldr	r3, [pc, #612]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d05b      	beq.n	80029f4 <HAL_RCC_OscConfig+0x108>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d157      	bne.n	80029f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e236      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d106      	bne.n	8002960 <HAL_RCC_OscConfig+0x74>
 8002952:	4b91      	ldr	r3, [pc, #580]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a90      	ldr	r2, [pc, #576]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e01d      	b.n	800299c <HAL_RCC_OscConfig+0xb0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x98>
 800296a:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a8a      	ldr	r2, [pc, #552]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0xb0>
 8002984:	4b84      	ldr	r3, [pc, #528]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b81      	ldr	r3, [pc, #516]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a80      	ldr	r2, [pc, #512]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe fd44 	bl	8001430 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe fd40 	bl	8001430 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1fb      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0xc0>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fd30 	bl	8001430 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fd2c 	bl	8001430 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1e7      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0xe8>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d063      	beq.n	8002aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0e:	4b62      	ldr	r3, [pc, #392]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d116      	bne.n	8002a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	4b5c      	ldr	r3, [pc, #368]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x152>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1bb      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4952      	ldr	r1, [pc, #328]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a52:	e03a      	b.n	8002aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5c:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <HAL_RCC_OscConfig+0x2b0>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe fce5 	bl	8001430 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fce1 	bl	8001430 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e19c      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4940      	ldr	r1, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_RCC_OscConfig+0x2b0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fcc4 	bl	8001430 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aac:	f7fe fcc0 	bl	8001430 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e17b      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d030      	beq.n	8002b38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_RCC_OscConfig+0x2b4>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fca4 	bl	8001430 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aec:	f7fe fca0 	bl	8001430 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e15b      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x200>
 8002b0a:	e015      	b.n	8002b38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_OscConfig+0x2b4>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fc8d 	bl	8001430 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fc89 	bl	8001430 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e144      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a0 	beq.w	8002c86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x2b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d121      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_RCC_OscConfig+0x2b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <HAL_RCC_OscConfig+0x2b8>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fc4f 	bl	8001430 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	e011      	b.n	8002bba <HAL_RCC_OscConfig+0x2ce>
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	42470000 	.word	0x42470000
 8002ba0:	42470e80 	.word	0x42470e80
 8002ba4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe fc42 	bl	8001430 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0fd      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x4d4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2f0>
 8002bce:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a7c      	ldr	r2, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	e01c      	b.n	8002c16 <HAL_RCC_OscConfig+0x32a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b05      	cmp	r3, #5
 8002be2:	d10c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x312>
 8002be4:	4b77      	ldr	r3, [pc, #476]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a76      	ldr	r2, [pc, #472]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	4b74      	ldr	r3, [pc, #464]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	4a73      	ldr	r2, [pc, #460]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfc:	e00b      	b.n	8002c16 <HAL_RCC_OscConfig+0x32a>
 8002bfe:	4b71      	ldr	r3, [pc, #452]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a70      	ldr	r2, [pc, #448]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a6d      	ldr	r2, [pc, #436]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fc07 	bl	8001430 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fc03 	bl	8001430 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0bc      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ee      	beq.n	8002c26 <HAL_RCC_OscConfig+0x33a>
 8002c48:	e014      	b.n	8002c74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fbf1 	bl	8001430 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe fbed 	bl	8001430 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0a6      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ee      	bne.n	8002c52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7a:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8092 	beq.w	8002db4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c90:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d05c      	beq.n	8002d56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d141      	bne.n	8002d28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca4:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <HAL_RCC_OscConfig+0x4dc>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fe fbc1 	bl	8001430 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe fbbd 	bl	8001430 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e078      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	019b      	lsls	r3, r3, #6
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	061b      	lsls	r3, r3, #24
 8002cf4:	4933      	ldr	r1, [pc, #204]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfa:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCC_OscConfig+0x4dc>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fb96 	bl	8001430 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fb92 	bl	8001430 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e04d      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x41c>
 8002d26:	e045      	b.n	8002db4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x4dc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fb7f 	bl	8001430 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fb7b 	bl	8001430 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e036      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x44a>
 8002d54:	e02e      	b.n	8002db4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e029      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d62:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_RCC_OscConfig+0x4d8>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d11c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d115      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	42470060 	.word	0x42470060

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0cc      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90c      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d044      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e067      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4934      	ldr	r1, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fab8 	bl	8001430 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fe fab4 	bl	8001430 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d20c      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4601      	mov	r1, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
 8002f66:	fa21 f303 	lsr.w	r3, r1, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fa18 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08004188 	.word	0x08004188
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fae:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d007      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x32>
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d008      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x38>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 808d 	bne.w	80030de <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b4b      	ldr	r3, [pc, #300]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fc6:	60bb      	str	r3, [r7, #8]
       break;
 8002fc8:	e08c      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fcc:	60bb      	str	r3, [r7, #8]
      break;
 8002fce:	e089      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fda:	4b45      	ldr	r3, [pc, #276]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d023      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	f04f 0400 	mov.w	r4, #0
 8002ff0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	ea03 0501 	and.w	r5, r3, r1
 8002ffc:	ea04 0602 	and.w	r6, r4, r2
 8003000:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003002:	fb02 f106 	mul.w	r1, r2, r6
 8003006:	2200      	movs	r2, #0
 8003008:	fb02 f205 	mul.w	r2, r2, r5
 800300c:	440a      	add	r2, r1
 800300e:	493a      	ldr	r1, [pc, #232]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003010:	fba5 0101 	umull	r0, r1, r5, r1
 8003014:	1853      	adds	r3, r2, r1
 8003016:	4619      	mov	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f04f 0400 	mov.w	r4, #0
 800301e:	461a      	mov	r2, r3
 8003020:	4623      	mov	r3, r4
 8003022:	f7fd f8e3 	bl	80001ec <__aeabi_uldivmod>
 8003026:	4603      	mov	r3, r0
 8003028:	460c      	mov	r4, r1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e049      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	f04f 0400 	mov.w	r4, #0
 8003038:	f240 11ff 	movw	r1, #511	; 0x1ff
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	ea03 0501 	and.w	r5, r3, r1
 8003044:	ea04 0602 	and.w	r6, r4, r2
 8003048:	4629      	mov	r1, r5
 800304a:	4632      	mov	r2, r6
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f04f 0400 	mov.w	r4, #0
 8003054:	0154      	lsls	r4, r2, #5
 8003056:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800305a:	014b      	lsls	r3, r1, #5
 800305c:	4619      	mov	r1, r3
 800305e:	4622      	mov	r2, r4
 8003060:	1b49      	subs	r1, r1, r5
 8003062:	eb62 0206 	sbc.w	r2, r2, r6
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	f04f 0400 	mov.w	r4, #0
 800306e:	0194      	lsls	r4, r2, #6
 8003070:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003074:	018b      	lsls	r3, r1, #6
 8003076:	1a5b      	subs	r3, r3, r1
 8003078:	eb64 0402 	sbc.w	r4, r4, r2
 800307c:	f04f 0100 	mov.w	r1, #0
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	00e2      	lsls	r2, r4, #3
 8003086:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800308a:	00d9      	lsls	r1, r3, #3
 800308c:	460b      	mov	r3, r1
 800308e:	4614      	mov	r4, r2
 8003090:	195b      	adds	r3, r3, r5
 8003092:	eb44 0406 	adc.w	r4, r4, r6
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	02a2      	lsls	r2, r4, #10
 80030a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030a4:	0299      	lsls	r1, r3, #10
 80030a6:	460b      	mov	r3, r1
 80030a8:	4614      	mov	r4, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	4621      	mov	r1, r4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f04f 0400 	mov.w	r4, #0
 80030b4:	461a      	mov	r2, r3
 80030b6:	4623      	mov	r3, r4
 80030b8:	f7fd f898 	bl	80001ec <__aeabi_uldivmod>
 80030bc:	4603      	mov	r3, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	3301      	adds	r3, #1
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	60bb      	str	r3, [r7, #8]
      break;
 80030dc:	e002      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030e0:	60bb      	str	r3, [r7, #8]
      break;
 80030e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e4:	68bb      	ldr	r3, [r7, #8]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	017d7840 	.word	0x017d7840

080030fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCC_GetHCLKFreq+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003118:	f7ff fff0 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 800311c:	4601      	mov	r1, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0a9b      	lsrs	r3, r3, #10
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4a03      	ldr	r2, [pc, #12]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08004198 	.word	0x08004198

0800313c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003140:	f7ff ffdc 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003144:	4601      	mov	r1, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0b5b      	lsrs	r3, r3, #13
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4a03      	ldr	r2, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	08004198 	.word	0x08004198

08003164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e01d      	b.n	80031b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd ff16 	bl	8000fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 f8d0 	bl	8003348 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0b4      	b.n	8003340 <HAL_TIM_PWM_ConfigChannel+0x184>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	f200 809f 	bhi.w	800332c <HAL_TIM_PWM_ConfigChannel+0x170>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003229 	.word	0x08003229
 80031f8:	0800332d 	.word	0x0800332d
 80031fc:	0800332d 	.word	0x0800332d
 8003200:	0800332d 	.word	0x0800332d
 8003204:	08003269 	.word	0x08003269
 8003208:	0800332d 	.word	0x0800332d
 800320c:	0800332d 	.word	0x0800332d
 8003210:	0800332d 	.word	0x0800332d
 8003214:	080032ab 	.word	0x080032ab
 8003218:	0800332d 	.word	0x0800332d
 800321c:	0800332d 	.word	0x0800332d
 8003220:	0800332d 	.word	0x0800332d
 8003224:	080032eb 	.word	0x080032eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f92a 	bl	8003488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0208 	orr.w	r2, r2, #8
 8003242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0204 	bic.w	r2, r2, #4
 8003252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	619a      	str	r2, [r3, #24]
      break;
 8003266:	e062      	b.n	800332e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f97a 	bl	8003568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6999      	ldr	r1, [r3, #24]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	619a      	str	r2, [r3, #24]
      break;
 80032a8:	e041      	b.n	800332e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f9cf 	bl	8003654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0208 	orr.w	r2, r2, #8
 80032c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0204 	bic.w	r2, r2, #4
 80032d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	61da      	str	r2, [r3, #28]
      break;
 80032e8:	e021      	b.n	800332e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fa23 	bl	800373c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69d9      	ldr	r1, [r3, #28]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	021a      	lsls	r2, r3, #8
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	61da      	str	r2, [r3, #28]
      break;
 800332a:	e000      	b.n	800332e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800332c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a40      	ldr	r2, [pc, #256]	; (800345c <TIM_Base_SetConfig+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d00f      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3d      	ldr	r2, [pc, #244]	; (8003460 <TIM_Base_SetConfig+0x118>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3c      	ldr	r2, [pc, #240]	; (8003464 <TIM_Base_SetConfig+0x11c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <TIM_Base_SetConfig+0x120>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3a      	ldr	r2, [pc, #232]	; (800346c <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2f      	ldr	r2, [pc, #188]	; (800345c <TIM_Base_SetConfig+0x114>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d027      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <TIM_Base_SetConfig+0x118>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d023      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <TIM_Base_SetConfig+0x11c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <TIM_Base_SetConfig+0x120>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a29      	ldr	r2, [pc, #164]	; (800346c <TIM_Base_SetConfig+0x124>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d017      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a28      	ldr	r2, [pc, #160]	; (8003470 <TIM_Base_SetConfig+0x128>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <TIM_Base_SetConfig+0x12c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <TIM_Base_SetConfig+0x130>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a25      	ldr	r2, [pc, #148]	; (800347c <TIM_Base_SetConfig+0x134>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <TIM_Base_SetConfig+0x138>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <TIM_Base_SetConfig+0x13c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <TIM_Base_SetConfig+0x114>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0xf8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <TIM_Base_SetConfig+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40010400 	.word	0x40010400
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	40001800 	.word	0x40001800
 8003480:	40001c00 	.word	0x40001c00
 8003484:	40002000 	.word	0x40002000

08003488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 0302 	bic.w	r3, r3, #2
 80034d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a20      	ldr	r2, [pc, #128]	; (8003560 <TIM_OC1_SetConfig+0xd8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_OC1_SetConfig+0x64>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <TIM_OC1_SetConfig+0xdc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10c      	bne.n	8003506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0308 	bic.w	r3, r3, #8
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <TIM_OC1_SetConfig+0xd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_OC1_SetConfig+0x8e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <TIM_OC1_SetConfig+0xdc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d111      	bne.n	800353a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800351c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	621a      	str	r2, [r3, #32]
}
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40010000 	.word	0x40010000
 8003564:	40010400 	.word	0x40010400

08003568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0210 	bic.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0320 	bic.w	r3, r3, #32
 80035b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <TIM_OC2_SetConfig+0xe4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_OC2_SetConfig+0x68>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <TIM_OC2_SetConfig+0xe8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10d      	bne.n	80035ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <TIM_OC2_SetConfig+0xe4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_OC2_SetConfig+0x94>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a16      	ldr	r2, [pc, #88]	; (8003650 <TIM_OC2_SetConfig+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d113      	bne.n	8003624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40010400 	.word	0x40010400

08003654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800369c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a21      	ldr	r2, [pc, #132]	; (8003734 <TIM_OC3_SetConfig+0xe0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_OC3_SetConfig+0x66>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a20      	ldr	r2, [pc, #128]	; (8003738 <TIM_OC3_SetConfig+0xe4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10d      	bne.n	80036d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a16      	ldr	r2, [pc, #88]	; (8003734 <TIM_OC3_SetConfig+0xe0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC3_SetConfig+0x92>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a15      	ldr	r2, [pc, #84]	; (8003738 <TIM_OC3_SetConfig+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d113      	bne.n	800370e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40010000 	.word	0x40010000
 8003738:	40010400 	.word	0x40010400

0800373c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <TIM_OC4_SetConfig+0xa4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_OC4_SetConfig+0x68>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <TIM_OC4_SetConfig+0xa8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d109      	bne.n	80037b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e05a      	b.n	80038b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d01d      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10c      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	4313      	orrs	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40001800 	.word	0x40001800

080038e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e03d      	b.n	8003978 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e03f      	b.n	8003a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fba0 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f829 	bl	8003a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a62:	f023 030c 	bic.w	r3, r3, #12
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8e:	f040 818b 	bne.w	8003da8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4ac1      	ldr	r2, [pc, #772]	; (8003d9c <UART_SetConfig+0x37c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d005      	beq.n	8003aa8 <UART_SetConfig+0x88>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4abf      	ldr	r2, [pc, #764]	; (8003da0 <UART_SetConfig+0x380>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	f040 80bd 	bne.w	8003c22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa8:	f7ff fb48 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8003aac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	461d      	mov	r5, r3
 8003ab2:	f04f 0600 	mov.w	r6, #0
 8003ab6:	46a8      	mov	r8, r5
 8003ab8:	46b1      	mov	r9, r6
 8003aba:	eb18 0308 	adds.w	r3, r8, r8
 8003abe:	eb49 0409 	adc.w	r4, r9, r9
 8003ac2:	4698      	mov	r8, r3
 8003ac4:	46a1      	mov	r9, r4
 8003ac6:	eb18 0805 	adds.w	r8, r8, r5
 8003aca:	eb49 0906 	adc.w	r9, r9, r6
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ada:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ade:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ae2:	4688      	mov	r8, r1
 8003ae4:	4691      	mov	r9, r2
 8003ae6:	eb18 0005 	adds.w	r0, r8, r5
 8003aea:	eb49 0106 	adc.w	r1, r9, r6
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	461d      	mov	r5, r3
 8003af4:	f04f 0600 	mov.w	r6, #0
 8003af8:	196b      	adds	r3, r5, r5
 8003afa:	eb46 0406 	adc.w	r4, r6, r6
 8003afe:	461a      	mov	r2, r3
 8003b00:	4623      	mov	r3, r4
 8003b02:	f7fc fb73 	bl	80001ec <__aeabi_uldivmod>
 8003b06:	4603      	mov	r3, r0
 8003b08:	460c      	mov	r4, r1
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4ba5      	ldr	r3, [pc, #660]	; (8003da4 <UART_SetConfig+0x384>)
 8003b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	f04f 0600 	mov.w	r6, #0
 8003b20:	46a9      	mov	r9, r5
 8003b22:	46b2      	mov	sl, r6
 8003b24:	eb19 0309 	adds.w	r3, r9, r9
 8003b28:	eb4a 040a 	adc.w	r4, sl, sl
 8003b2c:	4699      	mov	r9, r3
 8003b2e:	46a2      	mov	sl, r4
 8003b30:	eb19 0905 	adds.w	r9, r9, r5
 8003b34:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b4c:	4689      	mov	r9, r1
 8003b4e:	4692      	mov	sl, r2
 8003b50:	eb19 0005 	adds.w	r0, r9, r5
 8003b54:	eb4a 0106 	adc.w	r1, sl, r6
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	461d      	mov	r5, r3
 8003b5e:	f04f 0600 	mov.w	r6, #0
 8003b62:	196b      	adds	r3, r5, r5
 8003b64:	eb46 0406 	adc.w	r4, r6, r6
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	f7fc fb3e 	bl	80001ec <__aeabi_uldivmod>
 8003b70:	4603      	mov	r3, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b8b      	ldr	r3, [pc, #556]	; (8003da4 <UART_SetConfig+0x384>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2164      	movs	r1, #100	; 0x64
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	4a86      	ldr	r2, [pc, #536]	; (8003da4 <UART_SetConfig+0x384>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b98:	4498      	add	r8, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	461d      	mov	r5, r3
 8003b9e:	f04f 0600 	mov.w	r6, #0
 8003ba2:	46a9      	mov	r9, r5
 8003ba4:	46b2      	mov	sl, r6
 8003ba6:	eb19 0309 	adds.w	r3, r9, r9
 8003baa:	eb4a 040a 	adc.w	r4, sl, sl
 8003bae:	4699      	mov	r9, r3
 8003bb0:	46a2      	mov	sl, r4
 8003bb2:	eb19 0905 	adds.w	r9, r9, r5
 8003bb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bce:	4689      	mov	r9, r1
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	eb19 0005 	adds.w	r0, r9, r5
 8003bd6:	eb4a 0106 	adc.w	r1, sl, r6
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	461d      	mov	r5, r3
 8003be0:	f04f 0600 	mov.w	r6, #0
 8003be4:	196b      	adds	r3, r5, r5
 8003be6:	eb46 0406 	adc.w	r4, r6, r6
 8003bea:	461a      	mov	r2, r3
 8003bec:	4623      	mov	r3, r4
 8003bee:	f7fc fafd 	bl	80001ec <__aeabi_uldivmod>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <UART_SetConfig+0x384>)
 8003bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2164      	movs	r1, #100	; 0x64
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	3332      	adds	r3, #50	; 0x32
 8003c0c:	4a65      	ldr	r2, [pc, #404]	; (8003da4 <UART_SetConfig+0x384>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	f003 0207 	and.w	r2, r3, #7
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4442      	add	r2, r8
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e26f      	b.n	8004102 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c22:	f7ff fa77 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8003c26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	f04f 0600 	mov.w	r6, #0
 8003c30:	46a8      	mov	r8, r5
 8003c32:	46b1      	mov	r9, r6
 8003c34:	eb18 0308 	adds.w	r3, r8, r8
 8003c38:	eb49 0409 	adc.w	r4, r9, r9
 8003c3c:	4698      	mov	r8, r3
 8003c3e:	46a1      	mov	r9, r4
 8003c40:	eb18 0805 	adds.w	r8, r8, r5
 8003c44:	eb49 0906 	adc.w	r9, r9, r6
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c5c:	4688      	mov	r8, r1
 8003c5e:	4691      	mov	r9, r2
 8003c60:	eb18 0005 	adds.w	r0, r8, r5
 8003c64:	eb49 0106 	adc.w	r1, r9, r6
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	f04f 0600 	mov.w	r6, #0
 8003c72:	196b      	adds	r3, r5, r5
 8003c74:	eb46 0406 	adc.w	r4, r6, r6
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	f7fc fab6 	bl	80001ec <__aeabi_uldivmod>
 8003c80:	4603      	mov	r3, r0
 8003c82:	460c      	mov	r4, r1
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <UART_SetConfig+0x384>)
 8003c88:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	461d      	mov	r5, r3
 8003c96:	f04f 0600 	mov.w	r6, #0
 8003c9a:	46a9      	mov	r9, r5
 8003c9c:	46b2      	mov	sl, r6
 8003c9e:	eb19 0309 	adds.w	r3, r9, r9
 8003ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	46a2      	mov	sl, r4
 8003caa:	eb19 0905 	adds.w	r9, r9, r5
 8003cae:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc6:	4689      	mov	r9, r1
 8003cc8:	4692      	mov	sl, r2
 8003cca:	eb19 0005 	adds.w	r0, r9, r5
 8003cce:	eb4a 0106 	adc.w	r1, sl, r6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	f04f 0600 	mov.w	r6, #0
 8003cdc:	196b      	adds	r3, r5, r5
 8003cde:	eb46 0406 	adc.w	r4, r6, r6
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	f7fc fa81 	bl	80001ec <__aeabi_uldivmod>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b2c      	ldr	r3, [pc, #176]	; (8003da4 <UART_SetConfig+0x384>)
 8003cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <UART_SetConfig+0x384>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d12:	4498      	add	r8, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	461d      	mov	r5, r3
 8003d18:	f04f 0600 	mov.w	r6, #0
 8003d1c:	46a9      	mov	r9, r5
 8003d1e:	46b2      	mov	sl, r6
 8003d20:	eb19 0309 	adds.w	r3, r9, r9
 8003d24:	eb4a 040a 	adc.w	r4, sl, sl
 8003d28:	4699      	mov	r9, r3
 8003d2a:	46a2      	mov	sl, r4
 8003d2c:	eb19 0905 	adds.w	r9, r9, r5
 8003d30:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d48:	4689      	mov	r9, r1
 8003d4a:	4692      	mov	sl, r2
 8003d4c:	eb19 0005 	adds.w	r0, r9, r5
 8003d50:	eb4a 0106 	adc.w	r1, sl, r6
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	461d      	mov	r5, r3
 8003d5a:	f04f 0600 	mov.w	r6, #0
 8003d5e:	196b      	adds	r3, r5, r5
 8003d60:	eb46 0406 	adc.w	r4, r6, r6
 8003d64:	461a      	mov	r2, r3
 8003d66:	4623      	mov	r3, r4
 8003d68:	f7fc fa40 	bl	80001ec <__aeabi_uldivmod>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <UART_SetConfig+0x384>)
 8003d74:	fba3 1302 	umull	r1, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	2164      	movs	r1, #100	; 0x64
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	3332      	adds	r3, #50	; 0x32
 8003d86:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <UART_SetConfig+0x384>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	f003 0207 	and.w	r2, r3, #7
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4442      	add	r2, r8
 8003d98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d9a:	e1b2      	b.n	8004102 <UART_SetConfig+0x6e2>
 8003d9c:	40011000 	.word	0x40011000
 8003da0:	40011400 	.word	0x40011400
 8003da4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4ad7      	ldr	r2, [pc, #860]	; (800410c <UART_SetConfig+0x6ec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d005      	beq.n	8003dbe <UART_SetConfig+0x39e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4ad6      	ldr	r2, [pc, #856]	; (8004110 <UART_SetConfig+0x6f0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	f040 80d1 	bne.w	8003f60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dbe:	f7ff f9bd 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8003dc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	469a      	mov	sl, r3
 8003dc8:	f04f 0b00 	mov.w	fp, #0
 8003dcc:	46d0      	mov	r8, sl
 8003dce:	46d9      	mov	r9, fp
 8003dd0:	eb18 0308 	adds.w	r3, r8, r8
 8003dd4:	eb49 0409 	adc.w	r4, r9, r9
 8003dd8:	4698      	mov	r8, r3
 8003dda:	46a1      	mov	r9, r4
 8003ddc:	eb18 080a 	adds.w	r8, r8, sl
 8003de0:	eb49 090b 	adc.w	r9, r9, fp
 8003de4:	f04f 0100 	mov.w	r1, #0
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003df0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003df4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003df8:	4688      	mov	r8, r1
 8003dfa:	4691      	mov	r9, r2
 8003dfc:	eb1a 0508 	adds.w	r5, sl, r8
 8003e00:	eb4b 0609 	adc.w	r6, fp, r9
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	f04f 0400 	mov.w	r4, #0
 8003e16:	0094      	lsls	r4, r2, #2
 8003e18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e1c:	008b      	lsls	r3, r1, #2
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4623      	mov	r3, r4
 8003e22:	4628      	mov	r0, r5
 8003e24:	4631      	mov	r1, r6
 8003e26:	f7fc f9e1 	bl	80001ec <__aeabi_uldivmod>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4bb8      	ldr	r3, [pc, #736]	; (8004114 <UART_SetConfig+0x6f4>)
 8003e32:	fba3 2302 	umull	r2, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	469b      	mov	fp, r3
 8003e40:	f04f 0c00 	mov.w	ip, #0
 8003e44:	46d9      	mov	r9, fp
 8003e46:	46e2      	mov	sl, ip
 8003e48:	eb19 0309 	adds.w	r3, r9, r9
 8003e4c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e50:	4699      	mov	r9, r3
 8003e52:	46a2      	mov	sl, r4
 8003e54:	eb19 090b 	adds.w	r9, r9, fp
 8003e58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e5c:	f04f 0100 	mov.w	r1, #0
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e70:	4689      	mov	r9, r1
 8003e72:	4692      	mov	sl, r2
 8003e74:	eb1b 0509 	adds.w	r5, fp, r9
 8003e78:	eb4c 060a 	adc.w	r6, ip, sl
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4619      	mov	r1, r3
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	f04f 0400 	mov.w	r4, #0
 8003e8e:	0094      	lsls	r4, r2, #2
 8003e90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e94:	008b      	lsls	r3, r1, #2
 8003e96:	461a      	mov	r2, r3
 8003e98:	4623      	mov	r3, r4
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	f7fc f9a5 	bl	80001ec <__aeabi_uldivmod>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b9a      	ldr	r3, [pc, #616]	; (8004114 <UART_SetConfig+0x6f4>)
 8003eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2164      	movs	r1, #100	; 0x64
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3332      	adds	r3, #50	; 0x32
 8003ebc:	4a95      	ldr	r2, [pc, #596]	; (8004114 <UART_SetConfig+0x6f4>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec8:	4498      	add	r8, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	469b      	mov	fp, r3
 8003ece:	f04f 0c00 	mov.w	ip, #0
 8003ed2:	46d9      	mov	r9, fp
 8003ed4:	46e2      	mov	sl, ip
 8003ed6:	eb19 0309 	adds.w	r3, r9, r9
 8003eda:	eb4a 040a 	adc.w	r4, sl, sl
 8003ede:	4699      	mov	r9, r3
 8003ee0:	46a2      	mov	sl, r4
 8003ee2:	eb19 090b 	adds.w	r9, r9, fp
 8003ee6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003efa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003efe:	4689      	mov	r9, r1
 8003f00:	4692      	mov	sl, r2
 8003f02:	eb1b 0509 	adds.w	r5, fp, r9
 8003f06:	eb4c 060a 	adc.w	r6, ip, sl
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f04f 0400 	mov.w	r4, #0
 8003f1c:	0094      	lsls	r4, r2, #2
 8003f1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f22:	008b      	lsls	r3, r1, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	f7fc f95e 	bl	80001ec <__aeabi_uldivmod>
 8003f30:	4603      	mov	r3, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b77      	ldr	r3, [pc, #476]	; (8004114 <UART_SetConfig+0x6f4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	; 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a72      	ldr	r2, [pc, #456]	; (8004114 <UART_SetConfig+0x6f4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4442      	add	r2, r8
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	e0d0      	b.n	8004102 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7ff f8d8 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8003f64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	469a      	mov	sl, r3
 8003f6a:	f04f 0b00 	mov.w	fp, #0
 8003f6e:	46d0      	mov	r8, sl
 8003f70:	46d9      	mov	r9, fp
 8003f72:	eb18 0308 	adds.w	r3, r8, r8
 8003f76:	eb49 0409 	adc.w	r4, r9, r9
 8003f7a:	4698      	mov	r8, r3
 8003f7c:	46a1      	mov	r9, r4
 8003f7e:	eb18 080a 	adds.w	r8, r8, sl
 8003f82:	eb49 090b 	adc.w	r9, r9, fp
 8003f86:	f04f 0100 	mov.w	r1, #0
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f9a:	4688      	mov	r8, r1
 8003f9c:	4691      	mov	r9, r2
 8003f9e:	eb1a 0508 	adds.w	r5, sl, r8
 8003fa2:	eb4b 0609 	adc.w	r6, fp, r9
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4619      	mov	r1, r3
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	0094      	lsls	r4, r2, #2
 8003fba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fbe:	008b      	lsls	r3, r1, #2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	f7fc f910 	bl	80001ec <__aeabi_uldivmod>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b50      	ldr	r3, [pc, #320]	; (8004114 <UART_SetConfig+0x6f4>)
 8003fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	469b      	mov	fp, r3
 8003fe2:	f04f 0c00 	mov.w	ip, #0
 8003fe6:	46d9      	mov	r9, fp
 8003fe8:	46e2      	mov	sl, ip
 8003fea:	eb19 0309 	adds.w	r3, r9, r9
 8003fee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ff2:	4699      	mov	r9, r3
 8003ff4:	46a2      	mov	sl, r4
 8003ff6:	eb19 090b 	adds.w	r9, r9, fp
 8003ffa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800400e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004012:	4689      	mov	r9, r1
 8004014:	4692      	mov	sl, r2
 8004016:	eb1b 0509 	adds.w	r5, fp, r9
 800401a:	eb4c 060a 	adc.w	r6, ip, sl
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4619      	mov	r1, r3
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	f04f 0400 	mov.w	r4, #0
 8004030:	0094      	lsls	r4, r2, #2
 8004032:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004036:	008b      	lsls	r3, r1, #2
 8004038:	461a      	mov	r2, r3
 800403a:	4623      	mov	r3, r4
 800403c:	4628      	mov	r0, r5
 800403e:	4631      	mov	r1, r6
 8004040:	f7fc f8d4 	bl	80001ec <__aeabi_uldivmod>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	461a      	mov	r2, r3
 800404a:	4b32      	ldr	r3, [pc, #200]	; (8004114 <UART_SetConfig+0x6f4>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	; 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	3332      	adds	r3, #50	; 0x32
 800405e:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <UART_SetConfig+0x6f4>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406a:	4498      	add	r8, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	469b      	mov	fp, r3
 8004070:	f04f 0c00 	mov.w	ip, #0
 8004074:	46d9      	mov	r9, fp
 8004076:	46e2      	mov	sl, ip
 8004078:	eb19 0309 	adds.w	r3, r9, r9
 800407c:	eb4a 040a 	adc.w	r4, sl, sl
 8004080:	4699      	mov	r9, r3
 8004082:	46a2      	mov	sl, r4
 8004084:	eb19 090b 	adds.w	r9, r9, fp
 8004088:	eb4a 0a0c 	adc.w	sl, sl, ip
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004098:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800409c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040a0:	4689      	mov	r9, r1
 80040a2:	4692      	mov	sl, r2
 80040a4:	eb1b 0509 	adds.w	r5, fp, r9
 80040a8:	eb4c 060a 	adc.w	r6, ip, sl
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4619      	mov	r1, r3
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	f04f 0400 	mov.w	r4, #0
 80040be:	0094      	lsls	r4, r2, #2
 80040c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040c4:	008b      	lsls	r3, r1, #2
 80040c6:	461a      	mov	r2, r3
 80040c8:	4623      	mov	r3, r4
 80040ca:	4628      	mov	r0, r5
 80040cc:	4631      	mov	r1, r6
 80040ce:	f7fc f88d 	bl	80001ec <__aeabi_uldivmod>
 80040d2:	4603      	mov	r3, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <UART_SetConfig+0x6f4>)
 80040da:	fba3 1302 	umull	r1, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2164      	movs	r1, #100	; 0x64
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a09      	ldr	r2, [pc, #36]	; (8004114 <UART_SetConfig+0x6f4>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4442      	add	r2, r8
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	e7ff      	b.n	8004102 <UART_SetConfig+0x6e2>
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410c:	40011000 	.word	0x40011000
 8004110:	40011400 	.word	0x40011400
 8004114:	51eb851f 	.word	0x51eb851f

08004118 <__libc_init_array>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4e0d      	ldr	r6, [pc, #52]	; (8004150 <__libc_init_array+0x38>)
 800411c:	4c0d      	ldr	r4, [pc, #52]	; (8004154 <__libc_init_array+0x3c>)
 800411e:	1ba4      	subs	r4, r4, r6
 8004120:	10a4      	asrs	r4, r4, #2
 8004122:	2500      	movs	r5, #0
 8004124:	42a5      	cmp	r5, r4
 8004126:	d109      	bne.n	800413c <__libc_init_array+0x24>
 8004128:	4e0b      	ldr	r6, [pc, #44]	; (8004158 <__libc_init_array+0x40>)
 800412a:	4c0c      	ldr	r4, [pc, #48]	; (800415c <__libc_init_array+0x44>)
 800412c:	f000 f820 	bl	8004170 <_init>
 8004130:	1ba4      	subs	r4, r4, r6
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	2500      	movs	r5, #0
 8004136:	42a5      	cmp	r5, r4
 8004138:	d105      	bne.n	8004146 <__libc_init_array+0x2e>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004140:	4798      	blx	r3
 8004142:	3501      	adds	r5, #1
 8004144:	e7ee      	b.n	8004124 <__libc_init_array+0xc>
 8004146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800414a:	4798      	blx	r3
 800414c:	3501      	adds	r5, #1
 800414e:	e7f2      	b.n	8004136 <__libc_init_array+0x1e>
 8004150:	080041b0 	.word	0x080041b0
 8004154:	080041b0 	.word	0x080041b0
 8004158:	080041b0 	.word	0x080041b0
 800415c:	080041b4 	.word	0x080041b4

08004160 <memset>:
 8004160:	4402      	add	r2, r0
 8004162:	4603      	mov	r3, r0
 8004164:	4293      	cmp	r3, r2
 8004166:	d100      	bne.n	800416a <memset+0xa>
 8004168:	4770      	bx	lr
 800416a:	f803 1b01 	strb.w	r1, [r3], #1
 800416e:	e7f9      	b.n	8004164 <memset+0x4>

08004170 <_init>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	bf00      	nop
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr

0800417c <_fini>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr
