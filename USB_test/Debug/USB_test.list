
USB_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000834c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080084dc  080084dc  000184dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008580  08008580  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008588  08008588  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a60  200001e4  08008774  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  08008774  00021c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad2d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cfc  00000000  00000000  0003af41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  0003ec40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  00040060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002574d  00000000  00000000  00041298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c56  00000000  00000000  000669e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0160  00000000  00000000  0007a63b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a79b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b8  00000000  00000000  0014a818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084c4 	.word	0x080084c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080084c4 	.word	0x080084c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_DAC_Init+0x4c>)
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DAC_Init+0x50>)
 8000592:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <MX_DAC_Init+0x4c>)
 8000596:	f000 fdbc 	bl	8001112 <HAL_DAC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80005a0:	f000 f9c4 	bl	800092c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_DAC_Init+0x4c>)
 80005b4:	f000 fdcf 	bl	8001156 <HAL_DAC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80005be:	f000 f9b5 	bl	800092c <Error_Handler>
  }

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000210 	.word	0x20000210
 80005d0:	40007400 	.word	0x40007400

080005d4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <HAL_DAC_MspInit+0x7c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d127      	bne.n	8000646 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_DAC_MspInit+0x80>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <HAL_DAC_MspInit+0x80>)
 8000600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <HAL_DAC_MspInit+0x80>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_DAC_MspInit+0x80>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_DAC_MspInit+0x80>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_DAC_MspInit+0x80>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800062e:	2310      	movs	r3, #16
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_DAC_MspInit+0x84>)
 8000642:	f001 f8bd 	bl	80017c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	; 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40007400 	.word	0x40007400
 8000654:	40023800 	.word	0x40023800
 8000658:	40020000 	.word	0x40020000

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_DMA_Init+0x4c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_DMA_Init+0x4c>)
 800066c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_DMA_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	203a      	movs	r0, #58	; 0x3a
 8000684:	f000 fd0f 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000688:	203a      	movs	r0, #58	; 0x3a
 800068a:	f000 fd28 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2046      	movs	r0, #70	; 0x46
 8000694:	f000 fd07 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000698:	2046      	movs	r0, #70	; 0x46
 800069a:	f000 fd20 	bl	80010de <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <MX_GPIO_Init+0x12c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <MX_GPIO_Init+0x12c>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <MX_GPIO_Init+0x12c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <MX_GPIO_Init+0x12c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a3c      	ldr	r2, [pc, #240]	; (80007d8 <MX_GPIO_Init+0x12c>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_GPIO_Init+0x12c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_GPIO_Init+0x12c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a35      	ldr	r2, [pc, #212]	; (80007d8 <MX_GPIO_Init+0x12c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <MX_GPIO_Init+0x12c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_GPIO_Init+0x12c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a2e      	ldr	r2, [pc, #184]	; (80007d8 <MX_GPIO_Init+0x12c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_GPIO_Init+0x12c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_GPIO_Init+0x12c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <MX_GPIO_Init+0x12c>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <MX_GPIO_Init+0x12c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2101      	movs	r1, #1
 8000752:	4822      	ldr	r0, [pc, #136]	; (80007dc <MX_GPIO_Init+0x130>)
 8000754:	f001 f9ce 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <MX_GPIO_Init+0x134>)
 8000760:	f001 f9c8 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <MX_GPIO_Init+0x130>)
 800077c:	f001 f820 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000780:	2301      	movs	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0x138>)
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <MX_GPIO_Init+0x13c>)
 8000794:	f001 f814 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000798:	2304      	movs	r3, #4
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4810      	ldr	r0, [pc, #64]	; (80007ec <MX_GPIO_Init+0x140>)
 80007ac:	f001 f808 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80007b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_GPIO_Init+0x134>)
 80007ca:	f000 fff9 	bl	80017c0 <HAL_GPIO_Init>

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	10120000 	.word	0x10120000
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020400 	.word	0x40020400

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fae7 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f82d 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f7ff ff55 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000802:	f7ff ff2b 	bl	800065c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000806:	f006 fd07 	bl	8007218 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 800080a:	f7ff feb9 	bl	8000580 <MX_DAC_Init>
  MX_USART1_UART_Init();
 800080e:	f000 f9b9 	bl	8000b84 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000812:	f000 f94b 	bl	8000aac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  char txBuf[8];
  uint8_t count = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */
	  //	  HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
	  //	  HAL_UART_Transmit_DMA(&huart1, tx_buff, uartSize);
	  		sprintf(txBuf, "%u\r\n", count);
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <main+0x64>)
 8000820:	4618      	mov	r0, r3
 8000822:	f007 fb01 	bl	8007e28 <siprintf>
	  		count++;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3301      	adds	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]

	  		if (count>100){
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b64      	cmp	r3, #100	; 0x64
 8000830:	d901      	bls.n	8000836 <main+0x46>
	  			count = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
	  		}

	  		CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fcc9 	bl	80001d0 <strlen>
 800083e:	4603      	mov	r3, r0
 8000840:	b29a      	uxth	r2, r3
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fda4 	bl	8007394 <CDC_Transmit_FS>
	  		HAL_Delay(100);
 800084c:	2064      	movs	r0, #100	; 0x64
 800084e:	f000 fb2d 	bl	8000eac <HAL_Delay>
	  		sprintf(txBuf, "%u\r\n", count);
 8000852:	e7e2      	b.n	800081a <main+0x2a>
 8000854:	080084dc 	.word	0x080084dc

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f007 fa1e 	bl	8007ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d6:	2307      	movs	r3, #7
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 faa4 	bl	8002e2c <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ea:	f000 f81f 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2105      	movs	r1, #5
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fcfd 	bl	800330c <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000918:	f000 f808 	bl	800092c <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	; 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x6>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fb8c 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 fa4c 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <DMA2_Stream2_IRQHandler+0x10>)
 80009de:	f000 fcb5 	bl	800134c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200002c4 	.word	0x200002c4

080009ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <OTG_FS_IRQHandler+0x10>)
 80009f2:	f001 f9e8 	bl	8001dc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20001838 	.word	0x20001838

08000a00 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <DMA2_Stream7_IRQHandler+0x10>)
 8000a06:	f000 fca1 	bl	800134c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000264 	.word	0x20000264

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f007 f8f6 	bl	8007c34 <__errno>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20020000 	.word	0x20020000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	20000200 	.word	0x20000200
 8000a7c:	20001c48 	.word	0x20001c48

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SystemInit+0x28>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <SystemInit+0x28>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SystemInit+0x28>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aee:	4814      	ldr	r0, [pc, #80]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000af0:	f002 fdfe 	bl	80036f0 <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000afa:	f7ff ff17 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b0c:	f002 fe1b 	bl	8003746 <HAL_TIM_ConfigClockSource>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f7ff ff09 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b28:	f002 fffe 	bl	8003b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000b32:	f7ff fefb 	bl	800092c <Error_Handler>
  }

}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000224 	.word	0x20000224

08000b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b54:	d10d      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_TIM_Base_MspInit+0x3c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_TIM_Base_MspInit+0x3c>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_TIM_Base_MspInit+0x3c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART1_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	f003 f830 	bl	8003c20 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f7ff feb1 	bl	800092c <Error_Handler>
  }

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000324 	.word	0x20000324
 8000bd4:	40011000 	.word	0x40011000

08000bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a57      	ldr	r2, [pc, #348]	; (8000d54 <HAL_UART_MspInit+0x17c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	f040 80a7 	bne.w	8000d4a <HAL_UART_MspInit+0x172>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	4b55      	ldr	r3, [pc, #340]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	4a54      	ldr	r2, [pc, #336]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0c:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	4b4e      	ldr	r3, [pc, #312]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a4d      	ldr	r2, [pc, #308]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b4b      	ldr	r3, [pc, #300]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a46      	ldr	r2, [pc, #280]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <HAL_UART_MspInit+0x180>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	483b      	ldr	r0, [pc, #236]	; (8000d5c <HAL_UART_MspInit+0x184>)
 8000c6e:	f000 fda7 	bl	80017c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c82:	2307      	movs	r3, #7
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4834      	ldr	r0, [pc, #208]	; (8000d60 <HAL_UART_MspInit+0x188>)
 8000c8e:	f000 fd97 	bl	80017c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000c94:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <HAL_UART_MspInit+0x190>)
 8000c96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca0:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ccc:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cd2:	4824      	ldr	r0, [pc, #144]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cd4:	f000 fa8c 	bl	80011f0 <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000cde:	f7ff fe25 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <HAL_UART_MspInit+0x18c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_UART_MspInit+0x198>)
 8000cf2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d2e:	480f      	ldr	r0, [pc, #60]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d30:	f000 fa5e 	bl	80011f0 <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8000d3a:	f7ff fdf7 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_UART_MspInit+0x194>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40011000 	.word	0x40011000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020400 	.word	0x40020400
 8000d64:	200002c4 	.word	0x200002c4
 8000d68:	40026440 	.word	0x40026440
 8000d6c:	20000264 	.word	0x20000264
 8000d70:	400264b8 	.word	0x400264b8

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d7a:	e003      	b.n	8000d84 <LoopCopyDataInit>

08000d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d82:	3104      	adds	r1, #4

08000d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d8c:	d3f6      	bcc.n	8000d7c <CopyDataInit>
  ldr  r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d90:	e002      	b.n	8000d98 <LoopFillZerobss>

08000d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d94:	f842 3b04 	str.w	r3, [r2], #4

08000d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d9c:	d3f9      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff fe6f 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f006 ff4d 	bl	8007c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fd23 	bl	80007f0 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000db0:	08008590 	.word	0x08008590
  ldr  r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000dbc:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000dc0:	20001c44 	.word	0x20001c44

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f94d 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fd9a 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f965 	bl	80010fa <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f92d 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000364 	.word	0x20000364

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000364 	.word	0x20000364

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_Delay+0x40>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e014      	b.n	800114e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	791b      	ldrb	r3, [r3, #4]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d105      	bne.n	800113a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fa4d 	bl	80005d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2202      	movs	r2, #2
 800113e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001156:	b480      	push	{r7}
 8001158:	b087      	sub	sp, #28
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	795b      	ldrb	r3, [r3, #5]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_DAC_ConfigChannel+0x20>
 8001172:	2302      	movs	r3, #2
 8001174:	e036      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x8e>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2202      	movs	r2, #2
 8001180:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800118a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	22c0      	movs	r2, #192	; 0xc0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43da      	mvns	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	400a      	ands	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff fe4a 	bl	8000e94 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e099      	b.n	8001340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122c:	e00f      	b.n	800124e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122e:	f7ff fe31 	bl	8000e94 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b05      	cmp	r3, #5
 800123a:	d908      	bls.n	800124e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2220      	movs	r2, #32
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e078      	b.n	8001340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e8      	bne.n	800122e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_DMA_Init+0x158>)
 8001268:	4013      	ands	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d107      	bne.n	80012b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4313      	orrs	r3, r2
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f023 0307 	bic.w	r3, r3, #7
 80012ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d117      	bne.n	8001312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f9e9 	bl	80016cc <DMA_CheckFifoParam>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2240      	movs	r2, #64	; 0x40
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800130e:	2301      	movs	r3, #1
 8001310:	e016      	b.n	8001340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f9a0 	bl	8001660 <DMA_CalcBaseAndBitshift>
 8001320:	4603      	mov	r3, r0
 8001322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001328:	223f      	movs	r2, #63	; 0x3f
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	f010803f 	.word	0xf010803f

0800134c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001358:	4b92      	ldr	r3, [pc, #584]	; (80015a4 <HAL_DMA_IRQHandler+0x258>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a92      	ldr	r2, [pc, #584]	; (80015a8 <HAL_DMA_IRQHandler+0x25c>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0a9b      	lsrs	r3, r3, #10
 8001364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	2208      	movs	r2, #8
 8001378:	409a      	lsls	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01a      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0204 	bic.w	r2, r2, #4
 800139e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a4:	2208      	movs	r2, #8
 80013a6:	409a      	lsls	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013bc:	2201      	movs	r2, #1
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d012      	beq.n	80013ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013da:	2201      	movs	r2, #1
 80013dc:	409a      	lsls	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e6:	f043 0202 	orr.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	2204      	movs	r2, #4
 80013f4:	409a      	lsls	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d012      	beq.n	8001424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00b      	beq.n	8001424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	2204      	movs	r2, #4
 8001412:	409a      	lsls	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	f043 0204 	orr.w	r2, r3, #4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	2210      	movs	r2, #16
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d043      	beq.n	80014bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d03c      	beq.n	80014bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	2210      	movs	r2, #16
 8001448:	409a      	lsls	r2, r3
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d018      	beq.n	800148e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	2b00      	cmp	r3, #0
 8001470:	d024      	beq.n	80014bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	4798      	blx	r3
 800147a:	e01f      	b.n	80014bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01b      	beq.n	80014bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	4798      	blx	r3
 800148c:	e016      	b.n	80014bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d107      	bne.n	80014ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0208 	bic.w	r2, r2, #8
 80014aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	2220      	movs	r2, #32
 80014c2:	409a      	lsls	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 808e 	beq.w	80015ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 8086 	beq.w	80015ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e2:	2220      	movs	r2, #32
 80014e4:	409a      	lsls	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d136      	bne.n	8001564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0216 	bic.w	r2, r2, #22
 8001504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <HAL_DMA_IRQHandler+0x1da>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0208 	bic.w	r2, r2, #8
 8001534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	223f      	movs	r2, #63	; 0x3f
 800153c:	409a      	lsls	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001556:	2b00      	cmp	r3, #0
 8001558:	d07d      	beq.n	8001656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
        }
        return;
 8001562:	e078      	b.n	8001656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01c      	beq.n	80015ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d108      	bne.n	8001592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	2b00      	cmp	r3, #0
 8001586:	d030      	beq.n	80015ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	4798      	blx	r3
 8001590:	e02b      	b.n	80015ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d027      	beq.n	80015ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
 80015a2:	e022      	b.n	80015ea <HAL_DMA_IRQHandler+0x29e>
 80015a4:	20000000 	.word	0x20000000
 80015a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0210 	bic.w	r2, r2, #16
 80015c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d032      	beq.n	8001658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d022      	beq.n	8001644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2205      	movs	r2, #5
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	429a      	cmp	r2, r3
 8001620:	d307      	bcc.n	8001632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f2      	bne.n	8001616 <HAL_DMA_IRQHandler+0x2ca>
 8001630:	e000      	b.n	8001634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001632:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
 8001654:	e000      	b.n	8001658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001656:	bf00      	nop
    }
  }
}
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop

08001660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	3b10      	subs	r3, #16
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800167a:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <DMA_CalcBaseAndBitshift+0x68>)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d909      	bls.n	80016a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	1d1a      	adds	r2, r3, #4
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	659a      	str	r2, [r3, #88]	; 0x58
 80016a0:	e007      	b.n	80016b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016aa:	f023 0303 	bic.w	r3, r3, #3
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	aaaaaaab 	.word	0xaaaaaaab
 80016c8:	08008544 	.word	0x08008544

080016cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11f      	bne.n	8001726 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d855      	bhi.n	8001798 <DMA_CheckFifoParam+0xcc>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <DMA_CheckFifoParam+0x28>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001705 	.word	0x08001705
 80016f8:	08001717 	.word	0x08001717
 80016fc:	08001705 	.word	0x08001705
 8001700:	08001799 	.word	0x08001799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d045      	beq.n	800179c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001714:	e042      	b.n	800179c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800171e:	d13f      	bne.n	80017a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001724:	e03c      	b.n	80017a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800172e:	d121      	bne.n	8001774 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d836      	bhi.n	80017a4 <DMA_CheckFifoParam+0xd8>
 8001736:	a201      	add	r2, pc, #4	; (adr r2, 800173c <DMA_CheckFifoParam+0x70>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	0800174d 	.word	0x0800174d
 8001740:	08001753 	.word	0x08001753
 8001744:	0800174d 	.word	0x0800174d
 8001748:	08001765 	.word	0x08001765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
      break;
 8001750:	e02f      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d024      	beq.n	80017a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001762:	e021      	b.n	80017a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800176c:	d11e      	bne.n	80017ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001772:	e01b      	b.n	80017ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d902      	bls.n	8001780 <DMA_CheckFifoParam+0xb4>
 800177a:	2b03      	cmp	r3, #3
 800177c:	d003      	beq.n	8001786 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800177e:	e018      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      break;
 8001784:	e015      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00e      	beq.n	80017b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
      break;
 8001796:	e00b      	b.n	80017b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001798:	bf00      	nop
 800179a:	e00a      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      break;
 800179c:	bf00      	nop
 800179e:	e008      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      break;
 80017a0:	bf00      	nop
 80017a2:	e006      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      break;
 80017a4:	bf00      	nop
 80017a6:	e004      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      break;
 80017a8:	bf00      	nop
 80017aa:	e002      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <DMA_CheckFifoParam+0xe6>
      break;
 80017b0:	bf00      	nop
    }
  } 
  
  return status; 
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	e16b      	b.n	8001ab4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f040 815a 	bne.w	8001aae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d00b      	beq.n	800181a <HAL_GPIO_Init+0x5a>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180e:	2b11      	cmp	r3, #17
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b12      	cmp	r3, #18
 8001818:	d130      	bne.n	800187c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 0201 	and.w	r2, r3, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0xfc>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b12      	cmp	r3, #18
 80018ba:	d123      	bne.n	8001904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0203 	and.w	r2, r3, #3
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80b4 	beq.w	8001aae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <HAL_GPIO_Init+0x308>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a5e      	ldr	r2, [pc, #376]	; (8001ac8 <HAL_GPIO_Init+0x308>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <HAL_GPIO_Init+0x308>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001962:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_GPIO_Init+0x30c>)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a51      	ldr	r2, [pc, #324]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d02b      	beq.n	80019e6 <HAL_GPIO_Init+0x226>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a50      	ldr	r2, [pc, #320]	; (8001ad4 <HAL_GPIO_Init+0x314>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d025      	beq.n	80019e2 <HAL_GPIO_Init+0x222>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4f      	ldr	r2, [pc, #316]	; (8001ad8 <HAL_GPIO_Init+0x318>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01f      	beq.n	80019de <HAL_GPIO_Init+0x21e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4e      	ldr	r2, [pc, #312]	; (8001adc <HAL_GPIO_Init+0x31c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x21a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4d      	ldr	r2, [pc, #308]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x216>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4c      	ldr	r2, [pc, #304]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x212>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	; (8001ae8 <HAL_GPIO_Init+0x328>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x20e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x32c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x20a>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e00e      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019ca:	2308      	movs	r3, #8
 80019cc:	e00c      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019ce:	2306      	movs	r3, #6
 80019d0:	e00a      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019d2:	2305      	movs	r3, #5
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019d6:	2304      	movs	r3, #4
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019e6:	2300      	movs	r3, #0
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f002 0203 	and.w	r2, r2, #3
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f8:	4934      	ldr	r1, [pc, #208]	; (8001acc <HAL_GPIO_Init+0x30c>)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a06:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a2a:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a54:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa8:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	f67f ae90 	bls.w	80017dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001abc:	bf00      	nop
 8001abe:	3724      	adds	r7, #36	; 0x24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40021400 	.word	0x40021400
 8001ae8:	40021800 	.word	0x40021800
 8001aec:	40021c00 	.word	0x40021c00
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b10:	e003      	b.n	8001b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b12:	887b      	ldrh	r3, [r7, #2]
 8001b14:	041a      	lsls	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	619a      	str	r2, [r3, #24]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b28:	b08f      	sub	sp, #60	; 0x3c
 8001b2a:	af0a      	add	r7, sp, #40	; 0x28
 8001b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e10f      	b.n	8001d58 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 fd64 	bl	8007620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fd31 	bl	80045de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	687e      	ldr	r6, [r7, #4]
 8001b84:	466d      	mov	r5, sp
 8001b86:	f106 0410 	add.w	r4, r6, #16
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9a:	1d33      	adds	r3, r6, #4
 8001b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f002 fc08 	bl	80043b4 <USB_CoreInit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0d0      	b.n	8001d58 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fd1f 	bl	8004600 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e04a      	b.n	8001c5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	333d      	adds	r3, #61	; 0x3d
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	333c      	adds	r3, #60	; 0x3c
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	b298      	uxth	r0, r3
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	4602      	mov	r2, r0
 8001c06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	333f      	adds	r3, #63	; 0x3f
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3344      	adds	r3, #68	; 0x44
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3348      	adds	r3, #72	; 0x48
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3350      	adds	r3, #80	; 0x50
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3af      	bcc.n	8001bc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e044      	b.n	8001cf8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3b5      	bcc.n	8001c6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	687e      	ldr	r6, [r7, #4]
 8001d0a:	466d      	mov	r5, sp
 8001d0c:	f106 0410 	add.w	r4, r6, #16
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d20:	1d33      	adds	r3, r6, #4
 8001d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	f002 fc95 	bl	8004654 <USB_DevInit>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e00d      	b.n	8001d58 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fcdd 	bl	8005710 <USB_DevDisconnect>

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_PCD_Start+0x1c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e020      	b.n	8001dbe <HAL_PCD_Start+0x5e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d109      	bne.n	8001da0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d005      	beq.n	8001da0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fc09 	bl	80045bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fc8d 	bl	80056ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b08d      	sub	sp, #52	; 0x34
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fd4b 	bl	8005878 <USB_GetMode>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 839d 	bne.w	8002524 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fcaf 	bl	8005752 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8393 	beq.w	8002522 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fca6 	bl	8005752 <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d107      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f002 0202 	and.w	r2, r2, #2
 8001e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fc94 	bl	8005752 <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d161      	bne.n	8001ef8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0210 	bic.w	r2, r2, #16
 8001e42:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	0c5b      	lsrs	r3, r3, #17
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d124      	bne.n	8001eba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d035      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6a38      	ldr	r0, [r7, #32]
 8001e90:	f003 fafa 	bl	8005488 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ea0:	441a      	add	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb2:	441a      	add	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	619a      	str	r2, [r3, #24]
 8001eb8:	e016      	b.n	8001ee8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	0c5b      	lsrs	r3, r3, #17
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d110      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6a38      	ldr	r0, [r7, #32]
 8001ed2:	f003 fad9 	bl	8005488 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee2:	441a      	add	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0210 	orr.w	r2, r2, #16
 8001ef6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fc28 	bl	8005752 <USB_ReadInterrupts>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f0c:	d16e      	bne.n	8001fec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fc2e 	bl	8005778 <USB_ReadDevAllOutEpInterrupt>
 8001f1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f1e:	e062      	b.n	8001fe6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d057      	beq.n	8001fda <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fc53 	bl	80057e0 <USB_ReadDevOutEPInterrupt>
 8001f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2301      	movs	r3, #1
 8001f56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fdb0 	bl	8002ac0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f76:	461a      	mov	r2, r3
 8001f78:	2308      	movs	r3, #8
 8001f7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 feaa 	bl	8002cd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2320      	movs	r3, #32
 8001fba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3301      	adds	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d199      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fbae 	bl	8005752 <USB_ReadInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002000:	f040 80c0 	bne.w	8002184 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fbcf 	bl	80057ac <USB_ReadDevAllInEpInterrupt>
 800200e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002014:	e0b2      	b.n	800217c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a7 	beq.w	8002170 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fbf5 	bl	800581c <USB_ReadDevInEPInterrupt>
 8002032:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d057      	beq.n	80020ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	2201      	movs	r2, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	69f9      	ldr	r1, [r7, #28]
 800205a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800205e:	4013      	ands	r3, r2
 8002060:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206e:	461a      	mov	r2, r3
 8002070:	2301      	movs	r3, #1
 8002072:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d132      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3348      	adds	r3, #72	; 0x48
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4403      	add	r3, r0
 800209c:	3344      	adds	r3, #68	; 0x44
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4419      	add	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4403      	add	r3, r0
 80020b0:	3348      	adds	r3, #72	; 0x48
 80020b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x31c>
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3350      	adds	r3, #80	; 0x50
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020da:	461a      	mov	r2, r3
 80020dc:	2101      	movs	r1, #1
 80020de:	f003 fbfd 	bl	80058dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f005 fb28 	bl	800773e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002104:	461a      	mov	r2, r3
 8002106:	2308      	movs	r3, #8
 8002108:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002120:	461a      	mov	r2, r3
 8002122:	2310      	movs	r3, #16
 8002124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213c:	461a      	mov	r2, r3
 800213e:	2340      	movs	r3, #64	; 0x40
 8002140:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002158:	461a      	mov	r2, r3
 800215a:	2302      	movs	r3, #2
 800215c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fc1b 	bl	80029a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3301      	adds	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	f47f af49 	bne.w	8002016 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fae2 	bl	8005752 <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002198:	d122      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021c0:	2100      	movs	r1, #0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fe26 	bl	8002e14 <HAL_PCDEx_LPM_Callback>
 80021c8:	e002      	b.n	80021d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f005 fb2e 	bl	800782c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 fab4 	bl	8005752 <USB_ReadInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f4:	d112      	bne.n	800221c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f005 faea 	bl	80077e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800221a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fa96 	bl	8005752 <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	f040 80c7 	bne.w	80023c2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2110      	movs	r1, #16
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fb64 	bl	800491c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002258:	e056      	b.n	8002308 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800226c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227e:	0151      	lsls	r1, r2, #5
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	440a      	add	r2, r1
 8002284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800228c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800229e:	0151      	lsls	r1, r2, #5
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	440a      	add	r2, r1
 80022a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f2:	0151      	lsls	r1, r2, #5
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	440a      	add	r2, r1
 80022f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002300:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	3301      	adds	r3, #1
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230e:	429a      	cmp	r2, r3
 8002310:	d3a3      	bcc.n	800225a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002320:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002324:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800233e:	f043 030b 	orr.w	r3, r3, #11
 8002342:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002354:	f043 030b 	orr.w	r3, r3, #11
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	e015      	b.n	8002388 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800236e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002372:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002382:	f043 030b 	orr.w	r3, r3, #11
 8002386:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002396:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800239a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023ac:	461a      	mov	r2, r3
 80023ae:	f003 fa95 	bl	80058dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 f9c3 	bl	8005752 <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d6:	d124      	bne.n	8002422 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fa59 	bl	8005894 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 faf9 	bl	80049de <USB_GetDevSpeed>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681c      	ldr	r4, [r3, #0]
 80023f8:	f001 f946 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80023fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4620      	mov	r0, r4
 8002408:	f002 f836 	bl	8004478 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f005 f9be 	bl	800778e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002420:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 f993 	bl	8005752 <USB_ReadInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b08      	cmp	r3, #8
 8002434:	d10a      	bne.n	800244c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f005 f99b 	bl	8007772 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f002 0208 	and.w	r2, r2, #8
 800244a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 f97e 	bl	8005752 <USB_ReadInterrupts>
 8002456:	4603      	mov	r3, r0
 8002458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002460:	d10f      	bne.n	8002482 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f005 f9fd 	bl	800786c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 f963 	bl	8005752 <USB_ReadInterrupts>
 800248c:	4603      	mov	r3, r0
 800248e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002496:	d10f      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f005 f9d0 	bl	8007848 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 f948 	bl	8005752 <USB_ReadInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024cc:	d10a      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f005 f9de 	bl	8007890 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 f932 	bl	8005752 <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d115      	bne.n	8002524 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f005 f9ce 	bl	80078ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	430a      	orrs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	e000      	b.n	8002524 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002522:	bf00      	nop
    }
  }
}
 8002524:	3734      	adds	r7, #52	; 0x34
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}

0800252a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_PCD_SetAddress+0x1a>
 8002540:	2302      	movs	r3, #2
 8002542:	e013      	b.n	800256c <HAL_PCD_SetAddress+0x42>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f003 f890 	bl	8005682 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	70fb      	strb	r3, [r7, #3]
 8002586:	460b      	mov	r3, r1
 8002588:	803b      	strh	r3, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da0f      	bge.n	80025ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 020f 	and.w	r2, r3, #15
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	3338      	adds	r3, #56	; 0x38
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	705a      	strb	r2, [r3, #1]
 80025b8:	e00f      	b.n	80025da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025e6:	883a      	ldrh	r2, [r7, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	78ba      	ldrb	r2, [r7, #2]
 80025f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002604:	78bb      	ldrb	r3, [r7, #2]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d102      	bne.n	8002610 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_PCD_EP_Open+0xaa>
 800261a:	2302      	movs	r3, #2
 800261c:	e00e      	b.n	800263c <HAL_PCD_EP_Open+0xc8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f002 f9fb 	bl	8004a28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800263a:	7afb      	ldrb	r3, [r7, #11]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da0f      	bge.n	8002678 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	3338      	adds	r3, #56	; 0x38
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	3304      	adds	r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	705a      	strb	r2, [r3, #1]
 8002676:	e00f      	b.n	8002698 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 020f 	and.w	r2, r3, #15
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_EP_Close+0x6e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e00e      	b.n	80026d0 <HAL_PCD_EP_Close+0x8c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 fa39 	bl	8004b38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	b2da      	uxtb	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6979      	ldr	r1, [r7, #20]
 800274c:	f002 fd14 	bl	8005178 <USB_EP0StartXfer>
 8002750:	e008      	b.n	8002764 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	f002 fac6 	bl	8004cf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	f003 020f 	and.w	r2, r3, #15
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002790:	681b      	ldr	r3, [r3, #0]
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	460b      	mov	r3, r1
 80027ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ae:	7afb      	ldrb	r3, [r7, #11]
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	3338      	adds	r3, #56	; 0x38
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4413      	add	r3, r2
 80027c2:	3304      	adds	r3, #4
 80027c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2201      	movs	r2, #1
 80027dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027de:	7afb      	ldrb	r3, [r7, #11]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d102      	bne.n	80027f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027f8:	7afb      	ldrb	r3, [r7, #11]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	6979      	ldr	r1, [r7, #20]
 8002810:	f002 fcb2 	bl	8005178 <USB_EP0StartXfer>
 8002814:	e008      	b.n	8002828 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	6979      	ldr	r1, [r7, #20]
 8002824:	f002 fa64 	bl	8004cf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d901      	bls.n	8002850 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e050      	b.n	80028f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002854:	2b00      	cmp	r3, #0
 8002856:	da0f      	bge.n	8002878 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	f003 020f 	and.w	r2, r3, #15
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	3338      	adds	r3, #56	; 0x38
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	705a      	strb	r2, [r3, #1]
 8002876:	e00d      	b.n	8002894 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_PCD_EP_SetStall+0x82>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e01e      	b.n	80028f2 <HAL_PCD_EP_SetStall+0xc0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fe09 	bl	80054da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	b2d9      	uxtb	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028e2:	461a      	mov	r2, r3
 80028e4:	f002 fffa 	bl	80058dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 020f 	and.w	r2, r3, #15
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	d901      	bls.n	8002918 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e042      	b.n	800299e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291c:	2b00      	cmp	r3, #0
 800291e:	da0f      	bge.n	8002940 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	f003 020f 	and.w	r2, r3, #15
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	3338      	adds	r3, #56	; 0x38
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	3304      	adds	r3, #4
 8002936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	705a      	strb	r2, [r3, #1]
 800293e:	e00f      	b.n	8002960 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 020f 	and.w	r2, r3, #15
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	3304      	adds	r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_PCD_EP_ClrStall+0x86>
 800297c:	2302      	movs	r3, #2
 800297e:	e00e      	b.n	800299e <HAL_PCD_EP_ClrStall+0xa4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f002 fe11 	bl	80055b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08a      	sub	sp, #40	; 0x28
 80029aa:	af02      	add	r7, sp, #8
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d901      	bls.n	80029de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06c      	b.n	8002ab8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d902      	bls.n	80029fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3303      	adds	r3, #3
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a02:	e02b      	b.n	8002a5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d902      	bls.n	8002a20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3303      	adds	r3, #3
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f002 fced 	bl	800541e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	441a      	add	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	441a      	add	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d809      	bhi.n	8002a86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d203      	bcs.n	8002a86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1be      	bne.n	8002a04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d811      	bhi.n	8002ab6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	2201      	movs	r2, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	6939      	ldr	r1, [r7, #16]
 8002aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	333c      	adds	r3, #60	; 0x3c
 8002ad8:	3304      	adds	r3, #4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	f040 80a0 	bne.w	8002c38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d015      	beq.n	8002b2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a72      	ldr	r2, [pc, #456]	; (8002cd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f240 80dd 	bls.w	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80d7 	beq.w	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b24:	461a      	mov	r2, r3
 8002b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2a:	6093      	str	r3, [r2, #8]
 8002b2c:	e0cb      	b.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b44:	461a      	mov	r2, r3
 8002b46:	2320      	movs	r3, #32
 8002b48:	6093      	str	r3, [r2, #8]
 8002b4a:	e0bc      	b.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 80b7 	bne.w	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a5d      	ldr	r2, [pc, #372]	; (8002cd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d90f      	bls.n	8002b80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b76:	461a      	mov	r2, r3
 8002b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7c:	6093      	str	r3, [r2, #8]
 8002b7e:	e0a2      	b.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002ba6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4403      	add	r3, r0
 8002bb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002bba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4419      	add	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4403      	add	r3, r0
 8002bf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d114      	bne.n	8002c2a <PCD_EP_OutXfrComplete_int+0x16a>
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d108      	bne.n	8002c2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c22:	461a      	mov	r2, r3
 8002c24:	2101      	movs	r1, #1
 8002c26:	f002 fe59 	bl	80058dc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f004 fd69 	bl	8007708 <HAL_PCD_DataOutStageCallback>
 8002c36:	e046      	b.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <PCD_EP_OutXfrComplete_int+0x214>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d124      	bne.n	8002c8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	461a      	mov	r2, r3
 8002c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c5c:	6093      	str	r3, [r2, #8]
 8002c5e:	e032      	b.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c76:	461a      	mov	r2, r3
 8002c78:	2320      	movs	r3, #32
 8002c7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f004 fd40 	bl	8007708 <HAL_PCD_DataOutStageCallback>
 8002c88:	e01d      	b.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d114      	bne.n	8002cba <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	f002 fe11 	bl	80058dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f004 fd21 	bl	8007708 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	4f54300a 	.word	0x4f54300a
 8002cd4:	4f54310a 	.word	0x4f54310a

08002cd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	333c      	adds	r3, #60	; 0x3c
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d90e      	bls.n	8002d2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d24:	461a      	mov	r2, r3
 8002d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f004 fcd9 	bl	80076e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d90c      	bls.n	8002d54 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d108      	bne.n	8002d54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2101      	movs	r1, #1
 8002d50:	f002 fdc4 	bl	80058dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	4f54300a 	.word	0x4f54300a

08002d64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
 8002d70:	4613      	mov	r3, r2
 8002d72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d82:	883b      	ldrh	r3, [r7, #0]
 8002d84:	0419      	lsls	r1, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d90:	e028      	b.n	8002de4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
 8002da4:	e00d      	b.n	8002dc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3340      	adds	r3, #64	; 0x40
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4413      	add	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d3ec      	bcc.n	8002da6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002dcc:	883b      	ldrh	r3, [r7, #0]
 8002dce:	0418      	lsls	r0, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	4302      	orrs	r2, r0
 8002ddc:	3340      	adds	r3, #64	; 0x40
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e25b      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d075      	beq.n	8002f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e4a:	4ba3      	ldr	r3, [pc, #652]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d00c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e56:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d112      	bne.n	8002e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e62:	4b9d      	ldr	r3, [pc, #628]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6e:	d10b      	bne.n	8002e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	4b99      	ldr	r3, [pc, #612]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d05b      	beq.n	8002f34 <HAL_RCC_OscConfig+0x108>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d157      	bne.n	8002f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e236      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x74>
 8002e92:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a90      	ldr	r2, [pc, #576]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e01d      	b.n	8002edc <HAL_RCC_OscConfig+0xb0>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x98>
 8002eaa:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a8a      	ldr	r2, [pc, #552]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a87      	ldr	r2, [pc, #540]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0xb0>
 8002ec4:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a83      	ldr	r2, [pc, #524]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b81      	ldr	r3, [pc, #516]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a80      	ldr	r2, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fd ffd6 	bl	8000e94 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fd ffd2 	bl	8000e94 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e1fb      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0xc0>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd ffc2 	bl	8000e94 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fd ffbe 	bl	8000e94 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1e7      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0xe8>
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d063      	beq.n	800300a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f42:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d11c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5a:	4b5f      	ldr	r3, [pc, #380]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	4b5c      	ldr	r3, [pc, #368]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x152>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e1bb      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4952      	ldr	r1, [pc, #328]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	e03a      	b.n	800300a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9c:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_OscConfig+0x2b0>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fd ff77 	bl	8000e94 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fd ff73 	bl	8000e94 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e19c      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4940      	ldr	r1, [pc, #256]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_RCC_OscConfig+0x2b0>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fd ff56 	bl	8000e94 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fec:	f7fd ff52 	bl	8000e94 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e17b      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d030      	beq.n	8003078 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_RCC_OscConfig+0x2b4>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fd ff36 	bl	8000e94 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302c:	f7fd ff32 	bl	8000e94 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e15b      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x200>
 800304a:	e015      	b.n	8003078 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x2b4>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fd ff1f 	bl	8000e94 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305a:	f7fd ff1b 	bl	8000e94 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e144      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a0 	beq.w	80031c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x2b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d121      	bne.n	8003106 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_RCC_OscConfig+0x2b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_RCC_OscConfig+0x2b8>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fd fee1 	bl	8000e94 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e011      	b.n	80030fa <HAL_RCC_OscConfig+0x2ce>
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	42470000 	.word	0x42470000
 80030e0:	42470e80 	.word	0x42470e80
 80030e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e8:	f7fd fed4 	bl	8000e94 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0fd      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b81      	ldr	r3, [pc, #516]	; (8003300 <HAL_RCC_OscConfig+0x4d4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x2f0>
 800310e:	4b7d      	ldr	r3, [pc, #500]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a7c      	ldr	r2, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	e01c      	b.n	8003156 <HAL_RCC_OscConfig+0x32a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d10c      	bne.n	800313e <HAL_RCC_OscConfig+0x312>
 8003124:	4b77      	ldr	r3, [pc, #476]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4a76      	ldr	r2, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6713      	str	r3, [r2, #112]	; 0x70
 8003130:	4b74      	ldr	r3, [pc, #464]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a73      	ldr	r2, [pc, #460]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	e00b      	b.n	8003156 <HAL_RCC_OscConfig+0x32a>
 800313e:	4b71      	ldr	r3, [pc, #452]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a70      	ldr	r2, [pc, #448]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	4b6e      	ldr	r3, [pc, #440]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a6d      	ldr	r2, [pc, #436]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fd fe99 	bl	8000e94 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fd fe95 	bl	8000e94 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0bc      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	4b61      	ldr	r3, [pc, #388]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ee      	beq.n	8003166 <HAL_RCC_OscConfig+0x33a>
 8003188:	e014      	b.n	80031b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fd fe83 	bl	8000e94 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fd fe7f 	bl	8000e94 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0a6      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ee      	bne.n	8003192 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b52      	ldr	r3, [pc, #328]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8092 	beq.w	80032f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d0:	4b4c      	ldr	r3, [pc, #304]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d05c      	beq.n	8003296 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d141      	bne.n	8003268 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b48      	ldr	r3, [pc, #288]	; (8003308 <HAL_RCC_OscConfig+0x4dc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fe53 	bl	8000e94 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd fe4f 	bl	8000e94 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e078      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003204:	4b3f      	ldr	r3, [pc, #252]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	019b      	lsls	r3, r3, #6
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	3b01      	subs	r3, #1
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	4933      	ldr	r1, [pc, #204]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323a:	4b33      	ldr	r3, [pc, #204]	; (8003308 <HAL_RCC_OscConfig+0x4dc>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fd fe28 	bl	8000e94 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fd fe24 	bl	8000e94 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e04d      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x41c>
 8003266:	e045      	b.n	80032f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x4dc>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fd fe11 	bl	8000e94 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7fd fe0d 	bl	8000e94 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e036      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x44a>
 8003294:	e02e      	b.n	80032f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e029      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_RCC_OscConfig+0x4d8>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ca:	4013      	ands	r3, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d106      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40007000 	.word	0x40007000
 8003304:	40023800 	.word	0x40023800
 8003308:	42470060 	.word	0x42470060

0800330c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0cc      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b68      	ldr	r3, [pc, #416]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d90c      	bls.n	8003348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800336a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d044      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d119      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e067      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4934      	ldr	r1, [pc, #208]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fd fd4a 	bl	8000e94 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fd fd46 	bl	8000e94 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e04f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d20c      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4601      	mov	r1, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	5cd3      	ldrb	r3, [r2, r3]
 80034a6:	fa21 f303 	lsr.w	r3, r1, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fcaa 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	0800852c 	.word	0x0800852c
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000004 	.word	0x20000004

080034d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	2300      	movs	r3, #0
 80034e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d007      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x32>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d008      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x38>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 80b4 	bne.w	800366c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b5e      	ldr	r3, [pc, #376]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003506:	60bb      	str	r3, [r7, #8]
       break;
 8003508:	e0b3      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800350a:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800350c:	60bb      	str	r3, [r7, #8]
      break;
 800350e:	e0b0      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003510:	4b5a      	ldr	r3, [pc, #360]	; (800367c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003518:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800351a:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d04a      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003526:	4b55      	ldr	r3, [pc, #340]	; (800367c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	ea03 0501 	and.w	r5, r3, r1
 800353c:	ea04 0602 	and.w	r6, r4, r2
 8003540:	4629      	mov	r1, r5
 8003542:	4632      	mov	r2, r6
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f04f 0400 	mov.w	r4, #0
 800354c:	0154      	lsls	r4, r2, #5
 800354e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003552:	014b      	lsls	r3, r1, #5
 8003554:	4619      	mov	r1, r3
 8003556:	4622      	mov	r2, r4
 8003558:	1b49      	subs	r1, r1, r5
 800355a:	eb62 0206 	sbc.w	r2, r2, r6
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	f04f 0400 	mov.w	r4, #0
 8003566:	0194      	lsls	r4, r2, #6
 8003568:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800356c:	018b      	lsls	r3, r1, #6
 800356e:	1a5b      	subs	r3, r3, r1
 8003570:	eb64 0402 	sbc.w	r4, r4, r2
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	00e2      	lsls	r2, r4, #3
 800357e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003582:	00d9      	lsls	r1, r3, #3
 8003584:	460b      	mov	r3, r1
 8003586:	4614      	mov	r4, r2
 8003588:	195b      	adds	r3, r3, r5
 800358a:	eb44 0406 	adc.w	r4, r4, r6
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	0262      	lsls	r2, r4, #9
 8003598:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800359c:	0259      	lsls	r1, r3, #9
 800359e:	460b      	mov	r3, r1
 80035a0:	4614      	mov	r4, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	4621      	mov	r1, r4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	461a      	mov	r2, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	f7fc fe66 	bl	8000280 <__aeabi_uldivmod>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e049      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035bc:	4b2f      	ldr	r3, [pc, #188]	; (800367c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	f04f 0400 	mov.w	r4, #0
 80035c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	ea03 0501 	and.w	r5, r3, r1
 80035d2:	ea04 0602 	and.w	r6, r4, r2
 80035d6:	4629      	mov	r1, r5
 80035d8:	4632      	mov	r2, r6
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	0154      	lsls	r4, r2, #5
 80035e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035e8:	014b      	lsls	r3, r1, #5
 80035ea:	4619      	mov	r1, r3
 80035ec:	4622      	mov	r2, r4
 80035ee:	1b49      	subs	r1, r1, r5
 80035f0:	eb62 0206 	sbc.w	r2, r2, r6
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	f04f 0400 	mov.w	r4, #0
 80035fc:	0194      	lsls	r4, r2, #6
 80035fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003602:	018b      	lsls	r3, r1, #6
 8003604:	1a5b      	subs	r3, r3, r1
 8003606:	eb64 0402 	sbc.w	r4, r4, r2
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	00e2      	lsls	r2, r4, #3
 8003614:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003618:	00d9      	lsls	r1, r3, #3
 800361a:	460b      	mov	r3, r1
 800361c:	4614      	mov	r4, r2
 800361e:	195b      	adds	r3, r3, r5
 8003620:	eb44 0406 	adc.w	r4, r4, r6
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	02a2      	lsls	r2, r4, #10
 800362e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003632:	0299      	lsls	r1, r3, #10
 8003634:	460b      	mov	r3, r1
 8003636:	4614      	mov	r4, r2
 8003638:	4618      	mov	r0, r3
 800363a:	4621      	mov	r1, r4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f04f 0400 	mov.w	r4, #0
 8003642:	461a      	mov	r2, r3
 8003644:	4623      	mov	r3, r4
 8003646:	f7fc fe1b 	bl	8000280 <__aeabi_uldivmod>
 800364a:	4603      	mov	r3, r0
 800364c:	460c      	mov	r4, r1
 800364e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	3301      	adds	r3, #1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	60bb      	str	r3, [r7, #8]
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800366e:	60bb      	str	r3, [r7, #8]
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	68bb      	ldr	r3, [r7, #8]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400
 8003684:	007a1200 	.word	0x007a1200

08003688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <HAL_RCC_GetHCLKFreq+0x14>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000000 	.word	0x20000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a4:	f7ff fff0 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036a8:	4601      	mov	r1, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0a9b      	lsrs	r3, r3, #10
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	0800853c 	.word	0x0800853c

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036cc:	f7ff ffdc 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036d0:	4601      	mov	r1, r0
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0b5b      	lsrs	r3, r3, #13
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4a03      	ldr	r2, [pc, #12]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40023800 	.word	0x40023800
 80036ec:	0800853c 	.word	0x0800853c

080036f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e01d      	b.n	800373e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fa14 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f000 f8c0 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_TIM_ConfigClockSource+0x18>
 800375a:	2302      	movs	r3, #2
 800375c:	e0a6      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x166>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800377c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003784:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d067      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x120>
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d80b      	bhi.n	80037b2 <HAL_TIM_ConfigClockSource+0x6c>
 800379a:	2b10      	cmp	r3, #16
 800379c:	d073      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x140>
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d802      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x62>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d06f      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037a6:	e078      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d06c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x140>
 80037ac:	2b30      	cmp	r3, #48	; 0x30
 80037ae:	d06a      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037b0:	e073      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037b2:	2b70      	cmp	r3, #112	; 0x70
 80037b4:	d00d      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x8c>
 80037b6:	2b70      	cmp	r3, #112	; 0x70
 80037b8:	d804      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x7e>
 80037ba:	2b50      	cmp	r3, #80	; 0x50
 80037bc:	d033      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xe0>
 80037be:	2b60      	cmp	r3, #96	; 0x60
 80037c0:	d041      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037c2:	e06a      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c8:	d066      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0x152>
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	d017      	beq.n	8003800 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037d0:	e063      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f000 f981 	bl	8003ae8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
      break;
 80037fe:	e04c      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f000 f96a 	bl	8003ae8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003822:	609a      	str	r2, [r3, #8]
      break;
 8003824:	e039      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	461a      	mov	r2, r3
 8003834:	f000 f8de 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2150      	movs	r1, #80	; 0x50
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f937 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 8003844:	e029      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	461a      	mov	r2, r3
 8003854:	f000 f8fd 	bl	8003a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2160      	movs	r1, #96	; 0x60
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f927 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 8003864:	e019      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	461a      	mov	r2, r3
 8003874:	f000 f8be 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f917 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 8003884:	e009      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f000 f90e 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 8003896:	e000      	b.n	800389a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003898:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d00f      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3d      	ldr	r2, [pc, #244]	; (80039cc <TIM_Base_SetConfig+0x118>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00b      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <TIM_Base_SetConfig+0x11c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <TIM_Base_SetConfig+0x120>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d108      	bne.n	8003906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d027      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <TIM_Base_SetConfig+0x118>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d023      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <TIM_Base_SetConfig+0x11c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <TIM_Base_SetConfig+0x120>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d017      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a28      	ldr	r2, [pc, #160]	; (80039dc <TIM_Base_SetConfig+0x128>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <TIM_Base_SetConfig+0x12c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <TIM_Base_SetConfig+0x130>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <TIM_Base_SetConfig+0x134>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <TIM_Base_SetConfig+0x138>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <TIM_Base_SetConfig+0x13c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_Base_SetConfig+0xf8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d103      	bne.n	80039b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	615a      	str	r2, [r3, #20]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40014400 	.word	0x40014400
 80039e4:	40014800 	.word	0x40014800
 80039e8:	40001800 	.word	0x40001800
 80039ec:	40001c00 	.word	0x40001c00
 80039f0:	40002000 	.word	0x40002000

080039f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 030a 	bic.w	r3, r3, #10
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0210 	bic.w	r2, r3, #16
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	031b      	lsls	r3, r3, #12
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f043 0307 	orr.w	r3, r3, #7
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e05a      	b.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8c:	d01d      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40000c00 	.word	0x40000c00
 8003c14:	40010400 	.word	0x40010400
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40001800 	.word	0x40001800

08003c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e03f      	b.n	8003cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fc ffc6 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f829 	bl	8003cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cfe:	f023 030c 	bic.w	r3, r3, #12
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2a:	f040 818b 	bne.w	8004044 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4ac1      	ldr	r2, [pc, #772]	; (8004038 <UART_SetConfig+0x37c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d005      	beq.n	8003d44 <UART_SetConfig+0x88>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4abf      	ldr	r2, [pc, #764]	; (800403c <UART_SetConfig+0x380>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	f040 80bd 	bne.w	8003ebe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7ff fcc0 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8003d48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	f04f 0600 	mov.w	r6, #0
 8003d52:	46a8      	mov	r8, r5
 8003d54:	46b1      	mov	r9, r6
 8003d56:	eb18 0308 	adds.w	r3, r8, r8
 8003d5a:	eb49 0409 	adc.w	r4, r9, r9
 8003d5e:	4698      	mov	r8, r3
 8003d60:	46a1      	mov	r9, r4
 8003d62:	eb18 0805 	adds.w	r8, r8, r5
 8003d66:	eb49 0906 	adc.w	r9, r9, r6
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d7e:	4688      	mov	r8, r1
 8003d80:	4691      	mov	r9, r2
 8003d82:	eb18 0005 	adds.w	r0, r8, r5
 8003d86:	eb49 0106 	adc.w	r1, r9, r6
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	461d      	mov	r5, r3
 8003d90:	f04f 0600 	mov.w	r6, #0
 8003d94:	196b      	adds	r3, r5, r5
 8003d96:	eb46 0406 	adc.w	r4, r6, r6
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4623      	mov	r3, r4
 8003d9e:	f7fc fa6f 	bl	8000280 <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4ba5      	ldr	r3, [pc, #660]	; (8004040 <UART_SetConfig+0x384>)
 8003daa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	461d      	mov	r5, r3
 8003db8:	f04f 0600 	mov.w	r6, #0
 8003dbc:	46a9      	mov	r9, r5
 8003dbe:	46b2      	mov	sl, r6
 8003dc0:	eb19 0309 	adds.w	r3, r9, r9
 8003dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8003dc8:	4699      	mov	r9, r3
 8003dca:	46a2      	mov	sl, r4
 8003dcc:	eb19 0905 	adds.w	r9, r9, r5
 8003dd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003de8:	4689      	mov	r9, r1
 8003dea:	4692      	mov	sl, r2
 8003dec:	eb19 0005 	adds.w	r0, r9, r5
 8003df0:	eb4a 0106 	adc.w	r1, sl, r6
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	461d      	mov	r5, r3
 8003dfa:	f04f 0600 	mov.w	r6, #0
 8003dfe:	196b      	adds	r3, r5, r5
 8003e00:	eb46 0406 	adc.w	r4, r6, r6
 8003e04:	461a      	mov	r2, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	f7fc fa3a 	bl	8000280 <__aeabi_uldivmod>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <UART_SetConfig+0x384>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a86      	ldr	r2, [pc, #536]	; (8004040 <UART_SetConfig+0x384>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e34:	4498      	add	r8, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	461d      	mov	r5, r3
 8003e3a:	f04f 0600 	mov.w	r6, #0
 8003e3e:	46a9      	mov	r9, r5
 8003e40:	46b2      	mov	sl, r6
 8003e42:	eb19 0309 	adds.w	r3, r9, r9
 8003e46:	eb4a 040a 	adc.w	r4, sl, sl
 8003e4a:	4699      	mov	r9, r3
 8003e4c:	46a2      	mov	sl, r4
 8003e4e:	eb19 0905 	adds.w	r9, r9, r5
 8003e52:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e6a:	4689      	mov	r9, r1
 8003e6c:	4692      	mov	sl, r2
 8003e6e:	eb19 0005 	adds.w	r0, r9, r5
 8003e72:	eb4a 0106 	adc.w	r1, sl, r6
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	f04f 0600 	mov.w	r6, #0
 8003e80:	196b      	adds	r3, r5, r5
 8003e82:	eb46 0406 	adc.w	r4, r6, r6
 8003e86:	461a      	mov	r2, r3
 8003e88:	4623      	mov	r3, r4
 8003e8a:	f7fc f9f9 	bl	8000280 <__aeabi_uldivmod>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b6a      	ldr	r3, [pc, #424]	; (8004040 <UART_SetConfig+0x384>)
 8003e96:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2164      	movs	r1, #100	; 0x64
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	3332      	adds	r3, #50	; 0x32
 8003ea8:	4a65      	ldr	r2, [pc, #404]	; (8004040 <UART_SetConfig+0x384>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	f003 0207 	and.w	r2, r3, #7
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4442      	add	r2, r8
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	e26f      	b.n	800439e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ebe:	f7ff fbef 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8003ec2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	461d      	mov	r5, r3
 8003ec8:	f04f 0600 	mov.w	r6, #0
 8003ecc:	46a8      	mov	r8, r5
 8003ece:	46b1      	mov	r9, r6
 8003ed0:	eb18 0308 	adds.w	r3, r8, r8
 8003ed4:	eb49 0409 	adc.w	r4, r9, r9
 8003ed8:	4698      	mov	r8, r3
 8003eda:	46a1      	mov	r9, r4
 8003edc:	eb18 0805 	adds.w	r8, r8, r5
 8003ee0:	eb49 0906 	adc.w	r9, r9, r6
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ef0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ef4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef8:	4688      	mov	r8, r1
 8003efa:	4691      	mov	r9, r2
 8003efc:	eb18 0005 	adds.w	r0, r8, r5
 8003f00:	eb49 0106 	adc.w	r1, r9, r6
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	461d      	mov	r5, r3
 8003f0a:	f04f 0600 	mov.w	r6, #0
 8003f0e:	196b      	adds	r3, r5, r5
 8003f10:	eb46 0406 	adc.w	r4, r6, r6
 8003f14:	461a      	mov	r2, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	f7fc f9b2 	bl	8000280 <__aeabi_uldivmod>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <UART_SetConfig+0x384>)
 8003f24:	fba3 2302 	umull	r2, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	461d      	mov	r5, r3
 8003f32:	f04f 0600 	mov.w	r6, #0
 8003f36:	46a9      	mov	r9, r5
 8003f38:	46b2      	mov	sl, r6
 8003f3a:	eb19 0309 	adds.w	r3, r9, r9
 8003f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f42:	4699      	mov	r9, r3
 8003f44:	46a2      	mov	sl, r4
 8003f46:	eb19 0905 	adds.w	r9, r9, r5
 8003f4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f62:	4689      	mov	r9, r1
 8003f64:	4692      	mov	sl, r2
 8003f66:	eb19 0005 	adds.w	r0, r9, r5
 8003f6a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	461d      	mov	r5, r3
 8003f74:	f04f 0600 	mov.w	r6, #0
 8003f78:	196b      	adds	r3, r5, r5
 8003f7a:	eb46 0406 	adc.w	r4, r6, r6
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	f7fc f97d 	bl	8000280 <__aeabi_uldivmod>
 8003f86:	4603      	mov	r3, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <UART_SetConfig+0x384>)
 8003f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2164      	movs	r1, #100	; 0x64
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	3332      	adds	r3, #50	; 0x32
 8003fa0:	4a27      	ldr	r2, [pc, #156]	; (8004040 <UART_SetConfig+0x384>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fae:	4498      	add	r8, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	f04f 0600 	mov.w	r6, #0
 8003fb8:	46a9      	mov	r9, r5
 8003fba:	46b2      	mov	sl, r6
 8003fbc:	eb19 0309 	adds.w	r3, r9, r9
 8003fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	46a2      	mov	sl, r4
 8003fc8:	eb19 0905 	adds.w	r9, r9, r5
 8003fcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe4:	4689      	mov	r9, r1
 8003fe6:	4692      	mov	sl, r2
 8003fe8:	eb19 0005 	adds.w	r0, r9, r5
 8003fec:	eb4a 0106 	adc.w	r1, sl, r6
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	461d      	mov	r5, r3
 8003ff6:	f04f 0600 	mov.w	r6, #0
 8003ffa:	196b      	adds	r3, r5, r5
 8003ffc:	eb46 0406 	adc.w	r4, r6, r6
 8004000:	461a      	mov	r2, r3
 8004002:	4623      	mov	r3, r4
 8004004:	f7fc f93c 	bl	8000280 <__aeabi_uldivmod>
 8004008:	4603      	mov	r3, r0
 800400a:	460c      	mov	r4, r1
 800400c:	461a      	mov	r2, r3
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <UART_SetConfig+0x384>)
 8004010:	fba3 1302 	umull	r1, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	2164      	movs	r1, #100	; 0x64
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	3332      	adds	r3, #50	; 0x32
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <UART_SetConfig+0x384>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 0207 	and.w	r2, r3, #7
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4442      	add	r2, r8
 8004034:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004036:	e1b2      	b.n	800439e <UART_SetConfig+0x6e2>
 8004038:	40011000 	.word	0x40011000
 800403c:	40011400 	.word	0x40011400
 8004040:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4ad7      	ldr	r2, [pc, #860]	; (80043a8 <UART_SetConfig+0x6ec>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d005      	beq.n	800405a <UART_SetConfig+0x39e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4ad6      	ldr	r2, [pc, #856]	; (80043ac <UART_SetConfig+0x6f0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f040 80d1 	bne.w	80041fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800405a:	f7ff fb35 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 800405e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	469a      	mov	sl, r3
 8004064:	f04f 0b00 	mov.w	fp, #0
 8004068:	46d0      	mov	r8, sl
 800406a:	46d9      	mov	r9, fp
 800406c:	eb18 0308 	adds.w	r3, r8, r8
 8004070:	eb49 0409 	adc.w	r4, r9, r9
 8004074:	4698      	mov	r8, r3
 8004076:	46a1      	mov	r9, r4
 8004078:	eb18 080a 	adds.w	r8, r8, sl
 800407c:	eb49 090b 	adc.w	r9, r9, fp
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800408c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004090:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004094:	4688      	mov	r8, r1
 8004096:	4691      	mov	r9, r2
 8004098:	eb1a 0508 	adds.w	r5, sl, r8
 800409c:	eb4b 0609 	adc.w	r6, fp, r9
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	f04f 0400 	mov.w	r4, #0
 80040b2:	0094      	lsls	r4, r2, #2
 80040b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b8:	008b      	lsls	r3, r1, #2
 80040ba:	461a      	mov	r2, r3
 80040bc:	4623      	mov	r3, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	4631      	mov	r1, r6
 80040c2:	f7fc f8dd 	bl	8000280 <__aeabi_uldivmod>
 80040c6:	4603      	mov	r3, r0
 80040c8:	460c      	mov	r4, r1
 80040ca:	461a      	mov	r2, r3
 80040cc:	4bb8      	ldr	r3, [pc, #736]	; (80043b0 <UART_SetConfig+0x6f4>)
 80040ce:	fba3 2302 	umull	r2, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	469b      	mov	fp, r3
 80040dc:	f04f 0c00 	mov.w	ip, #0
 80040e0:	46d9      	mov	r9, fp
 80040e2:	46e2      	mov	sl, ip
 80040e4:	eb19 0309 	adds.w	r3, r9, r9
 80040e8:	eb4a 040a 	adc.w	r4, sl, sl
 80040ec:	4699      	mov	r9, r3
 80040ee:	46a2      	mov	sl, r4
 80040f0:	eb19 090b 	adds.w	r9, r9, fp
 80040f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800410c:	4689      	mov	r9, r1
 800410e:	4692      	mov	sl, r2
 8004110:	eb1b 0509 	adds.w	r5, fp, r9
 8004114:	eb4c 060a 	adc.w	r6, ip, sl
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4619      	mov	r1, r3
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f04f 0400 	mov.w	r4, #0
 800412a:	0094      	lsls	r4, r2, #2
 800412c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004130:	008b      	lsls	r3, r1, #2
 8004132:	461a      	mov	r2, r3
 8004134:	4623      	mov	r3, r4
 8004136:	4628      	mov	r0, r5
 8004138:	4631      	mov	r1, r6
 800413a:	f7fc f8a1 	bl	8000280 <__aeabi_uldivmod>
 800413e:	4603      	mov	r3, r0
 8004140:	460c      	mov	r4, r1
 8004142:	461a      	mov	r2, r3
 8004144:	4b9a      	ldr	r3, [pc, #616]	; (80043b0 <UART_SetConfig+0x6f4>)
 8004146:	fba3 1302 	umull	r1, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2164      	movs	r1, #100	; 0x64
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	; 0x32
 8004158:	4a95      	ldr	r2, [pc, #596]	; (80043b0 <UART_SetConfig+0x6f4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004164:	4498      	add	r8, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	469b      	mov	fp, r3
 800416a:	f04f 0c00 	mov.w	ip, #0
 800416e:	46d9      	mov	r9, fp
 8004170:	46e2      	mov	sl, ip
 8004172:	eb19 0309 	adds.w	r3, r9, r9
 8004176:	eb4a 040a 	adc.w	r4, sl, sl
 800417a:	4699      	mov	r9, r3
 800417c:	46a2      	mov	sl, r4
 800417e:	eb19 090b 	adds.w	r9, r9, fp
 8004182:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800419a:	4689      	mov	r9, r1
 800419c:	4692      	mov	sl, r2
 800419e:	eb1b 0509 	adds.w	r5, fp, r9
 80041a2:	eb4c 060a 	adc.w	r6, ip, sl
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4619      	mov	r1, r3
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	f04f 0400 	mov.w	r4, #0
 80041b8:	0094      	lsls	r4, r2, #2
 80041ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041be:	008b      	lsls	r3, r1, #2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	4631      	mov	r1, r6
 80041c8:	f7fc f85a 	bl	8000280 <__aeabi_uldivmod>
 80041cc:	4603      	mov	r3, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b77      	ldr	r3, [pc, #476]	; (80043b0 <UART_SetConfig+0x6f4>)
 80041d4:	fba3 1302 	umull	r1, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	2164      	movs	r1, #100	; 0x64
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	3332      	adds	r3, #50	; 0x32
 80041e6:	4a72      	ldr	r2, [pc, #456]	; (80043b0 <UART_SetConfig+0x6f4>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	f003 020f 	and.w	r2, r3, #15
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4442      	add	r2, r8
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	e0d0      	b.n	800439e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7ff fa50 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8004200:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	469a      	mov	sl, r3
 8004206:	f04f 0b00 	mov.w	fp, #0
 800420a:	46d0      	mov	r8, sl
 800420c:	46d9      	mov	r9, fp
 800420e:	eb18 0308 	adds.w	r3, r8, r8
 8004212:	eb49 0409 	adc.w	r4, r9, r9
 8004216:	4698      	mov	r8, r3
 8004218:	46a1      	mov	r9, r4
 800421a:	eb18 080a 	adds.w	r8, r8, sl
 800421e:	eb49 090b 	adc.w	r9, r9, fp
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800422e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004232:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004236:	4688      	mov	r8, r1
 8004238:	4691      	mov	r9, r2
 800423a:	eb1a 0508 	adds.w	r5, sl, r8
 800423e:	eb4b 0609 	adc.w	r6, fp, r9
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4619      	mov	r1, r3
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	0094      	lsls	r4, r2, #2
 8004256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800425a:	008b      	lsls	r3, r1, #2
 800425c:	461a      	mov	r2, r3
 800425e:	4623      	mov	r3, r4
 8004260:	4628      	mov	r0, r5
 8004262:	4631      	mov	r1, r6
 8004264:	f7fc f80c 	bl	8000280 <__aeabi_uldivmod>
 8004268:	4603      	mov	r3, r0
 800426a:	460c      	mov	r4, r1
 800426c:	461a      	mov	r2, r3
 800426e:	4b50      	ldr	r3, [pc, #320]	; (80043b0 <UART_SetConfig+0x6f4>)
 8004270:	fba3 2302 	umull	r2, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	469b      	mov	fp, r3
 800427e:	f04f 0c00 	mov.w	ip, #0
 8004282:	46d9      	mov	r9, fp
 8004284:	46e2      	mov	sl, ip
 8004286:	eb19 0309 	adds.w	r3, r9, r9
 800428a:	eb4a 040a 	adc.w	r4, sl, sl
 800428e:	4699      	mov	r9, r3
 8004290:	46a2      	mov	sl, r4
 8004292:	eb19 090b 	adds.w	r9, r9, fp
 8004296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ae:	4689      	mov	r9, r1
 80042b0:	4692      	mov	sl, r2
 80042b2:	eb1b 0509 	adds.w	r5, fp, r9
 80042b6:	eb4c 060a 	adc.w	r6, ip, sl
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f04f 0400 	mov.w	r4, #0
 80042cc:	0094      	lsls	r4, r2, #2
 80042ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d2:	008b      	lsls	r3, r1, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	4628      	mov	r0, r5
 80042da:	4631      	mov	r1, r6
 80042dc:	f7fb ffd0 	bl	8000280 <__aeabi_uldivmod>
 80042e0:	4603      	mov	r3, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <UART_SetConfig+0x6f4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	3332      	adds	r3, #50	; 0x32
 80042fa:	4a2d      	ldr	r2, [pc, #180]	; (80043b0 <UART_SetConfig+0x6f4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004306:	4498      	add	r8, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	469b      	mov	fp, r3
 800430c:	f04f 0c00 	mov.w	ip, #0
 8004310:	46d9      	mov	r9, fp
 8004312:	46e2      	mov	sl, ip
 8004314:	eb19 0309 	adds.w	r3, r9, r9
 8004318:	eb4a 040a 	adc.w	r4, sl, sl
 800431c:	4699      	mov	r9, r3
 800431e:	46a2      	mov	sl, r4
 8004320:	eb19 090b 	adds.w	r9, r9, fp
 8004324:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433c:	4689      	mov	r9, r1
 800433e:	4692      	mov	sl, r2
 8004340:	eb1b 0509 	adds.w	r5, fp, r9
 8004344:	eb4c 060a 	adc.w	r6, ip, sl
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4619      	mov	r1, r3
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f04f 0400 	mov.w	r4, #0
 800435a:	0094      	lsls	r4, r2, #2
 800435c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	461a      	mov	r2, r3
 8004364:	4623      	mov	r3, r4
 8004366:	4628      	mov	r0, r5
 8004368:	4631      	mov	r1, r6
 800436a:	f7fb ff89 	bl	8000280 <__aeabi_uldivmod>
 800436e:	4603      	mov	r3, r0
 8004370:	460c      	mov	r4, r1
 8004372:	461a      	mov	r2, r3
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <UART_SetConfig+0x6f4>)
 8004376:	fba3 1302 	umull	r1, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2164      	movs	r1, #100	; 0x64
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	3332      	adds	r3, #50	; 0x32
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <UART_SetConfig+0x6f4>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4442      	add	r2, r8
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	e7ff      	b.n	800439e <UART_SetConfig+0x6e2>
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	51eb851f 	.word	0x51eb851f

080043b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043b4:	b084      	sub	sp, #16
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	f107 001c 	add.w	r0, r7, #28
 80043c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d122      	bne.n	8004412 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f001 fac6 	bl	8005998 <USB_CoreReset>
 800440c:	4603      	mov	r3, r0
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e01a      	b.n	8004448 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f001 faba 	bl	8005998 <USB_CoreReset>
 8004424:	4603      	mov	r3, r0
 8004426:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	639a      	str	r2, [r3, #56]	; 0x38
 800443a:	e005      	b.n	8004448 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10b      	bne.n	8004466 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f043 0206 	orr.w	r2, r3, #6
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004472:	b004      	add	sp, #16
 8004474:	4770      	bx	lr
	...

08004478 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d165      	bne.n	8004558 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4a41      	ldr	r2, [pc, #260]	; (8004594 <USB_SetTurnaroundTime+0x11c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d906      	bls.n	80044a2 <USB_SetTurnaroundTime+0x2a>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a40      	ldr	r2, [pc, #256]	; (8004598 <USB_SetTurnaroundTime+0x120>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d802      	bhi.n	80044a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800449c:	230f      	movs	r3, #15
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e062      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <USB_SetTurnaroundTime+0x120>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d906      	bls.n	80044b8 <USB_SetTurnaroundTime+0x40>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a3b      	ldr	r2, [pc, #236]	; (800459c <USB_SetTurnaroundTime+0x124>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d802      	bhi.n	80044b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044b2:	230e      	movs	r3, #14
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e057      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a38      	ldr	r2, [pc, #224]	; (800459c <USB_SetTurnaroundTime+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d906      	bls.n	80044ce <USB_SetTurnaroundTime+0x56>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a37      	ldr	r2, [pc, #220]	; (80045a0 <USB_SetTurnaroundTime+0x128>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d802      	bhi.n	80044ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044c8:	230d      	movs	r3, #13
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e04c      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a33      	ldr	r2, [pc, #204]	; (80045a0 <USB_SetTurnaroundTime+0x128>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d906      	bls.n	80044e4 <USB_SetTurnaroundTime+0x6c>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4a32      	ldr	r2, [pc, #200]	; (80045a4 <USB_SetTurnaroundTime+0x12c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d802      	bhi.n	80044e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044de:	230c      	movs	r3, #12
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e041      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a2f      	ldr	r2, [pc, #188]	; (80045a4 <USB_SetTurnaroundTime+0x12c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d906      	bls.n	80044fa <USB_SetTurnaroundTime+0x82>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a2e      	ldr	r2, [pc, #184]	; (80045a8 <USB_SetTurnaroundTime+0x130>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d802      	bhi.n	80044fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044f4:	230b      	movs	r3, #11
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e036      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <USB_SetTurnaroundTime+0x130>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d906      	bls.n	8004510 <USB_SetTurnaroundTime+0x98>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4a29      	ldr	r2, [pc, #164]	; (80045ac <USB_SetTurnaroundTime+0x134>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d802      	bhi.n	8004510 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800450a:	230a      	movs	r3, #10
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e02b      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4a26      	ldr	r2, [pc, #152]	; (80045ac <USB_SetTurnaroundTime+0x134>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d906      	bls.n	8004526 <USB_SetTurnaroundTime+0xae>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4a25      	ldr	r2, [pc, #148]	; (80045b0 <USB_SetTurnaroundTime+0x138>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d802      	bhi.n	8004526 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004520:	2309      	movs	r3, #9
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e020      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <USB_SetTurnaroundTime+0x138>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d906      	bls.n	800453c <USB_SetTurnaroundTime+0xc4>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <USB_SetTurnaroundTime+0x13c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d802      	bhi.n	800453c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004536:	2308      	movs	r3, #8
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e015      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <USB_SetTurnaroundTime+0x13c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d906      	bls.n	8004552 <USB_SetTurnaroundTime+0xda>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <USB_SetTurnaroundTime+0x140>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d802      	bhi.n	8004552 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800454c:	2307      	movs	r3, #7
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e00a      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004552:	2306      	movs	r3, #6
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e007      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800455e:	2309      	movs	r3, #9
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e001      	b.n	8004568 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004564:	2309      	movs	r3, #9
 8004566:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	00d8acbf 	.word	0x00d8acbf
 8004598:	00e4e1bf 	.word	0x00e4e1bf
 800459c:	00f423ff 	.word	0x00f423ff
 80045a0:	0106737f 	.word	0x0106737f
 80045a4:	011a499f 	.word	0x011a499f
 80045a8:	01312cff 	.word	0x01312cff
 80045ac:	014ca43f 	.word	0x014ca43f
 80045b0:	016e35ff 	.word	0x016e35ff
 80045b4:	01a6ab1f 	.word	0x01a6ab1f
 80045b8:	01e847ff 	.word	0x01e847ff

080045bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f043 0201 	orr.w	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d106      	bne.n	800462c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	e00b      	b.n	8004644 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	e001      	b.n	8004644 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e003      	b.n	800464c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004644:	2032      	movs	r0, #50	; 0x32
 8004646:	f7fc fc31 	bl	8000eac <HAL_Delay>

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004654:	b084      	sub	sp, #16
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e009      	b.n	8004688 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3340      	adds	r3, #64	; 0x40
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	2200      	movs	r2, #0
 8004680:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b0e      	cmp	r3, #14
 800468c:	d9f2      	bls.n	8004674 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d11c      	bne.n	80046ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
 80046cc:	e00b      	b.n	80046e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046ec:	461a      	mov	r2, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	4619      	mov	r1, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004700:	461a      	mov	r2, r3
 8004702:	680b      	ldr	r3, [r1, #0]
 8004704:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10c      	bne.n	8004726 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d104      	bne.n	800471c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004712:	2100      	movs	r1, #0
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f949 	bl	80049ac <USB_SetDevSpeed>
 800471a:	e008      	b.n	800472e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800471c:	2101      	movs	r1, #1
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f944 	bl	80049ac <USB_SetDevSpeed>
 8004724:	e003      	b.n	800472e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004726:	2103      	movs	r1, #3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f93f 	bl	80049ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800472e:	2110      	movs	r1, #16
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8f3 	bl	800491c <USB_FlushTxFifo>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f911 	bl	8004968 <USB_FlushRxFifo>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004756:	461a      	mov	r2, r3
 8004758:	2300      	movs	r3, #0
 800475a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	461a      	mov	r2, r3
 8004764:	2300      	movs	r3, #0
 8004766:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	461a      	mov	r2, r3
 8004770:	2300      	movs	r3, #0
 8004772:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e043      	b.n	8004802 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800478c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004790:	d118      	bne.n	80047c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	461a      	mov	r2, r3
 80047a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e013      	b.n	80047d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	461a      	mov	r2, r3
 80047bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e008      	b.n	80047d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	461a      	mov	r2, r3
 80047d2:	2300      	movs	r3, #0
 80047d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	461a      	mov	r2, r3
 80047e4:	2300      	movs	r3, #0
 80047e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	461a      	mov	r2, r3
 80047f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	3301      	adds	r3, #1
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	429a      	cmp	r2, r3
 8004808:	d3b7      	bcc.n	800477a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e043      	b.n	8004898 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004826:	d118      	bne.n	800485a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	461a      	mov	r2, r3
 800483c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e013      	b.n	800486c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004850:	461a      	mov	r2, r3
 8004852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	e008      	b.n	800486c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	461a      	mov	r2, r3
 8004868:	2300      	movs	r3, #0
 800486a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004890:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3301      	adds	r3, #1
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d3b7      	bcc.n	8004810 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f043 0210 	orr.w	r2, r3, #16
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <USB_DevInit+0x2c4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f043 0208 	orr.w	r2, r3, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004900:	f043 0304 	orr.w	r3, r3, #4
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004914:	b004      	add	sp, #16
 8004916:	4770      	bx	lr
 8004918:	803c3800 	.word	0x803c3800

0800491c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	019b      	lsls	r3, r3, #6
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3301      	adds	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a09      	ldr	r2, [pc, #36]	; (8004964 <USB_FlushTxFifo+0x48>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e006      	b.n	8004956 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b20      	cmp	r3, #32
 8004952:	d0f0      	beq.n	8004936 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	00030d40 	.word	0x00030d40

08004968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2210      	movs	r2, #16
 8004978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3301      	adds	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <USB_FlushRxFifo+0x40>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e006      	b.n	800499a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b10      	cmp	r3, #16
 8004996:	d0f0      	beq.n	800497a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	00030d40 	.word	0x00030d40

080049ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0306 	and.w	r3, r3, #6
 80049f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
 8004a02:	e00a      	b.n	8004a1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d002      	beq.n	8004a10 <USB_GetDevSpeed+0x32>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b06      	cmp	r3, #6
 8004a0e:	d102      	bne.n	8004a16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a10:	2302      	movs	r3, #2
 8004a12:	75fb      	strb	r3, [r7, #23]
 8004a14:	e001      	b.n	8004a1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a16:	230f      	movs	r3, #15
 8004a18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d13a      	bne.n	8004aba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d155      	bne.n	8004b28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	78db      	ldrb	r3, [r3, #3]
 8004a96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	059b      	lsls	r3, r3, #22
 8004a9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e036      	b.n	8004b28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	2101      	movs	r1, #1
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11a      	bne.n	8004b28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	78db      	ldrb	r3, [r3, #3]
 8004b0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	4313      	orrs	r3, r2
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d161      	bne.n	8004c18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6a:	d11f      	bne.n	8004bac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004baa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bcc:	4013      	ands	r3, r2
 8004bce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	2101      	movs	r1, #1
 8004be2:	fa01 f303 	lsl.w	r3, r1, r3
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	0159      	lsls	r1, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	440b      	add	r3, r1
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <USB_DeactivateEndpoint+0x1b0>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
 8004c16:	e060      	b.n	8004cda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c2e:	d11f      	bne.n	8004c70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c90:	4013      	ands	r3, r2
 8004c92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	43db      	mvns	r3, r3
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	0159      	lsls	r1, r3, #5
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <USB_DeactivateEndpoint+0x1b4>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	ec337800 	.word	0xec337800
 8004cec:	eff37800 	.word	0xeff37800

08004cf0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 815c 	bne.w	8004fca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d132      	bne.n	8004d80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d78:	0cdb      	lsrs	r3, r3, #19
 8004d7a:	04db      	lsls	r3, r3, #19
 8004d7c:	6113      	str	r3, [r2, #16]
 8004d7e:	e074      	b.n	8004e6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9a:	0cdb      	lsrs	r3, r3, #19
 8004d9c:	04db      	lsls	r3, r3, #19
 8004d9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6959      	ldr	r1, [r3, #20]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	440b      	add	r3, r1
 8004ddc:	1e59      	subs	r1, r3, #1
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004de6:	04d9      	lsls	r1, r3, #19
 8004de8:	4b9d      	ldr	r3, [pc, #628]	; (8005060 <USB_EPStartXfer+0x370>)
 8004dea:	400b      	ands	r3, r1
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	0148      	lsls	r0, r1, #5
 8004df0:	69f9      	ldr	r1, [r7, #28]
 8004df2:	4401      	add	r1, r0
 8004df4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e12:	69b9      	ldr	r1, [r7, #24]
 8004e14:	0148      	lsls	r0, r1, #5
 8004e16:	69f9      	ldr	r1, [r7, #28]
 8004e18:	4401      	add	r1, r0
 8004e1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	78db      	ldrb	r3, [r3, #3]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d11f      	bne.n	8004e6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d14b      	bne.n	8004f08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	461a      	mov	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	78db      	ldrb	r3, [r3, #3]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d128      	bne.n	8004ee6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d110      	bne.n	8004ec6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e00f      	b.n	8004ee6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e12f      	b.n	8005168 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	78db      	ldrb	r3, [r3, #3]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d015      	beq.n	8004f5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8117 	beq.w	8005168 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	69f9      	ldr	r1, [r7, #28]
 8004f52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f56:	4313      	orrs	r3, r2
 8004f58:	634b      	str	r3, [r1, #52]	; 0x34
 8004f5a:	e105      	b.n	8005168 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d110      	bne.n	8004f8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	e00f      	b.n	8004fae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	68d9      	ldr	r1, [r3, #12]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	b298      	uxth	r0, r3
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fa2b 	bl	800541e <USB_WritePacket>
 8004fc8:	e0ce      	b.n	8005168 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe4:	0cdb      	lsrs	r3, r3, #19
 8004fe6:	04db      	lsls	r3, r3, #19
 8004fe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005004:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005008:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800500c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d126      	bne.n	8005064 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502c:	69b9      	ldr	r1, [r7, #24]
 800502e:	0148      	lsls	r0, r1, #5
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	4401      	add	r1, r0
 8005034:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005038:	4313      	orrs	r3, r2
 800503a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505a:	6113      	str	r3, [r2, #16]
 800505c:	e036      	b.n	80050cc <USB_EPStartXfer+0x3dc>
 800505e:	bf00      	nop
 8005060:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4413      	add	r3, r2
 800506e:	1e5a      	subs	r2, r3, #1
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	8afb      	ldrh	r3, [r7, #22]
 800508a:	04d9      	lsls	r1, r3, #19
 800508c:	4b39      	ldr	r3, [pc, #228]	; (8005174 <USB_EPStartXfer+0x484>)
 800508e:	400b      	ands	r3, r1
 8005090:	69b9      	ldr	r1, [r7, #24]
 8005092:	0148      	lsls	r0, r1, #5
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	4401      	add	r1, r0
 8005098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800509c:	4313      	orrs	r3, r2
 800509e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	8af9      	ldrh	r1, [r7, #22]
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050bc:	69b9      	ldr	r1, [r7, #24]
 80050be:	0148      	lsls	r0, r1, #5
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	4401      	add	r1, r0
 80050c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050c8:	4313      	orrs	r3, r2
 80050ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10d      	bne.n	80050ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	68d9      	ldr	r1, [r3, #12]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	460a      	mov	r2, r1
 80050ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	78db      	ldrb	r3, [r3, #3]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d128      	bne.n	8005148 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d110      	bne.n	8005128 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005120:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e00f      	b.n	8005148 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	1ff80000 	.word	0x1ff80000

08005178 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 80cd 	bne.w	8005334 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d132      	bne.n	8005208 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005200:	0cdb      	lsrs	r3, r3, #19
 8005202:	04db      	lsls	r3, r3, #19
 8005204:	6113      	str	r3, [r2, #16]
 8005206:	e04e      	b.n	80052a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	0cdb      	lsrs	r3, r3, #19
 8005224:	04db      	lsls	r3, r3, #19
 8005226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	440a      	add	r2, r1
 800523e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005242:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005246:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800524a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	429a      	cmp	r2, r3
 8005256:	d903      	bls.n	8005260 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800527e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	0148      	lsls	r0, r1, #5
 800529a:	6979      	ldr	r1, [r7, #20]
 800529c:	4401      	add	r1, r0
 800529e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052a2:	4313      	orrs	r3, r2
 80052a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d11e      	bne.n	80052ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	461a      	mov	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e092      	b.n	8005410 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005304:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005308:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d07e      	beq.n	8005410 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	2101      	movs	r1, #1
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	6979      	ldr	r1, [r7, #20]
 800532a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800532e:	4313      	orrs	r3, r2
 8005330:	634b      	str	r3, [r1, #52]	; 0x34
 8005332:	e06d      	b.n	8005410 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	0cdb      	lsrs	r3, r3, #19
 8005350:	04db      	lsls	r3, r3, #19
 8005352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005376:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053be:	6939      	ldr	r1, [r7, #16]
 80053c0:	0148      	lsls	r0, r1, #5
 80053c2:	6979      	ldr	r1, [r7, #20]
 80053c4:	4401      	add	r1, r0
 80053c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ca:	4313      	orrs	r3, r2
 80053cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d10d      	bne.n	80053f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	68d9      	ldr	r1, [r3, #12]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	460a      	mov	r2, r1
 80053ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800540e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800541e:	b480      	push	{r7}
 8005420:	b089      	sub	sp, #36	; 0x24
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	4611      	mov	r1, r2
 800542a:	461a      	mov	r2, r3
 800542c:	460b      	mov	r3, r1
 800542e:	71fb      	strb	r3, [r7, #7]
 8005430:	4613      	mov	r3, r2
 8005432:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800543c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d11a      	bne.n	800547a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005444:	88bb      	ldrh	r3, [r7, #4]
 8005446:	3303      	adds	r3, #3
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	e00f      	b.n	8005472 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	031a      	lsls	r2, r3, #12
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545e:	461a      	mov	r2, r3
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3304      	adds	r3, #4
 800546a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	3301      	adds	r3, #1
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d3eb      	bcc.n	8005452 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3724      	adds	r7, #36	; 0x24
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005488:	b480      	push	{r7}
 800548a:	b089      	sub	sp, #36	; 0x24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	3303      	adds	r3, #3
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e00b      	b.n	80054c4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3304      	adds	r3, #4
 80054bc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	3301      	adds	r3, #1
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3ef      	bcc.n	80054ac <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80054cc:	69fb      	ldr	r3, [r7, #28]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3724      	adds	r7, #36	; 0x24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d12c      	bne.n	8005550 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	db12      	blt.n	800552e <USB_EPSetStall+0x54>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00f      	beq.n	800552e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005528:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800552c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e02b      	b.n	80055a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	db12      	blt.n	8005588 <USB_EPSetStall+0xae>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00f      	beq.n	8005588 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005586:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d128      	bne.n	8005624 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	78db      	ldrb	r3, [r3, #3]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d003      	beq.n	8005602 <USB_EPClearStall+0x4c>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	78db      	ldrb	r3, [r3, #3]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d138      	bne.n	8005674 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e027      	b.n	8005674 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005642:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	78db      	ldrb	r3, [r3, #3]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d003      	beq.n	8005654 <USB_EPClearStall+0x9e>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	78db      	ldrb	r3, [r3, #3]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d10f      	bne.n	8005674 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056a4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056e8:	f023 0303 	bic.w	r3, r3, #3
 80056ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fc:	f023 0302 	bic.w	r3, r3, #2
 8005700:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573e:	f043 0302 	orr.w	r3, r3, #2
 8005742:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4013      	ands	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	0c1b      	lsrs	r3, r3, #16
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	b29b      	uxth	r3, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	4013      	ands	r3, r2
 800580c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800580e:	68bb      	ldr	r3, [r7, #8]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	01db      	lsls	r3, r3, #7
 800584e:	b2db      	uxtb	r3, r3
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4013      	ands	r3, r2
 8005868:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800586a:	68bb      	ldr	r3, [r7, #8]
}
 800586c:	4618      	mov	r0, r3
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0301 	and.w	r3, r3, #1
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	460b      	mov	r3, r1
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	333c      	adds	r3, #60	; 0x3c
 80058f2:	3304      	adds	r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4a26      	ldr	r2, [pc, #152]	; (8005994 <USB_EP0_OutStart+0xb8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d90a      	bls.n	8005916 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800590c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005910:	d101      	bne.n	8005916 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	e037      	b.n	8005986 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005944:	f043 0318 	orr.w	r3, r3, #24
 8005948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005958:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800595c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d10f      	bne.n	8005984 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	4f54300a 	.word	0x4f54300a

08005998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4a13      	ldr	r2, [pc, #76]	; (80059fc <USB_CoreReset+0x64>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e01b      	b.n	80059ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	daf2      	bge.n	80059a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f043 0201 	orr.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a09      	ldr	r2, [pc, #36]	; (80059fc <USB_CoreReset+0x64>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e006      	b.n	80059ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d0f0      	beq.n	80059ce <USB_CoreReset+0x36>

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	00030d40 	.word	0x00030d40

08005a00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a10:	f002 f93a 	bl	8007c88 <malloc>
 8005a14:	4603      	mov	r3, r0
 8005a16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a26:	2302      	movs	r3, #2
 8005a28:	e066      	b.n	8005af8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7c1b      	ldrb	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d119      	bne.n	8005a6e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a3e:	2202      	movs	r2, #2
 8005a40:	2181      	movs	r1, #129	; 0x81
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 ffa7 	bl	8007996 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a52:	2202      	movs	r2, #2
 8005a54:	2101      	movs	r1, #1
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 ff9d 	bl	8007996 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2210      	movs	r2, #16
 8005a68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a6c:	e016      	b.n	8005a9c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	2202      	movs	r2, #2
 8005a72:	2181      	movs	r1, #129	; 0x81
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 ff8e 	bl	8007996 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a80:	2340      	movs	r3, #64	; 0x40
 8005a82:	2202      	movs	r2, #2
 8005a84:	2101      	movs	r1, #1
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f001 ff85 	bl	8007996 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2210      	movs	r2, #16
 8005a98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	2182      	movs	r1, #130	; 0x82
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 ff77 	bl	8007996 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7c1b      	ldrb	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005adc:	2101      	movs	r1, #1
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f002 f848 	bl	8007b74 <USBD_LL_PrepareReceive>
 8005ae4:	e007      	b.n	8005af6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aec:	2340      	movs	r3, #64	; 0x40
 8005aee:	2101      	movs	r1, #1
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f002 f83f 	bl	8007b74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b10:	2181      	movs	r1, #129	; 0x81
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 ff65 	bl	80079e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b1e:	2101      	movs	r1, #1
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 ff5e 	bl	80079e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b2e:	2182      	movs	r1, #130	; 0x82
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 ff56 	bl	80079e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00e      	beq.n	8005b6e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b60:	4618      	mov	r0, r3
 8005b62:	f002 f899 	bl	8007c98 <free>
    pdev->pClassData = NULL;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b88:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d03a      	beq.n	8005c18 <USBD_CDC_Setup+0xa0>
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	f040 8097 	bne.w	8005cd6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	88db      	ldrh	r3, [r3, #6]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d029      	beq.n	8005c04 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	b25b      	sxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	da11      	bge.n	8005bde <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005bc6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	88d2      	ldrh	r2, [r2, #6]
 8005bcc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005bce:	6939      	ldr	r1, [r7, #16]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	88db      	ldrh	r3, [r3, #6]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 fa9d 	bl	8007116 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005bdc:	e082      	b.n	8005ce4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	785a      	ldrb	r2, [r3, #1]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	88db      	ldrh	r3, [r3, #6]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005bf4:	6939      	ldr	r1, [r7, #16]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	88db      	ldrh	r3, [r3, #6]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 fab6 	bl	800716e <USBD_CtlPrepareRx>
    break;
 8005c02:	e06f      	b.n	8005ce4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	7850      	ldrb	r0, [r2, #1]
 8005c10:	2200      	movs	r2, #0
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	4798      	blx	r3
    break;
 8005c16:	e065      	b.n	8005ce4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b0b      	cmp	r3, #11
 8005c1e:	d84f      	bhi.n	8005cc0 <USBD_CDC_Setup+0x148>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <USBD_CDC_Setup+0xb0>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c59 	.word	0x08005c59
 8005c2c:	08005ccf 	.word	0x08005ccf
 8005c30:	08005cc1 	.word	0x08005cc1
 8005c34:	08005cc1 	.word	0x08005cc1
 8005c38:	08005cc1 	.word	0x08005cc1
 8005c3c:	08005cc1 	.word	0x08005cc1
 8005c40:	08005cc1 	.word	0x08005cc1
 8005c44:	08005cc1 	.word	0x08005cc1
 8005c48:	08005cc1 	.word	0x08005cc1
 8005c4c:	08005cc1 	.word	0x08005cc1
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005ca9 	.word	0x08005ca9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d107      	bne.n	8005c72 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	2202      	movs	r2, #2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fa53 	bl	8007116 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c70:	e030      	b.n	8005cd4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f9dd 	bl	8007034 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7e:	e029      	b.n	8005cd4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d107      	bne.n	8005c9a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c8a:	f107 030f 	add.w	r3, r7, #15
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 fa3f 	bl	8007116 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c98:	e01c      	b.n	8005cd4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f9c9 	bl	8007034 <USBD_CtlError>
        ret = USBD_FAIL;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca6:	e015      	b.n	8005cd4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d00f      	beq.n	8005cd2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 f9bd 	bl	8007034 <USBD_CtlError>
        ret = USBD_FAIL;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cbe:	e008      	b.n	8005cd2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 f9b6 	bl	8007034 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ccc:	e002      	b.n	8005cd4 <USBD_CDC_Setup+0x15c>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e008      	b.n	8005ce4 <USBD_CDC_Setup+0x16c>
      break;
 8005cd2:	bf00      	nop
    }
    break;
 8005cd4:	e006      	b.n	8005ce4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 f9ab 	bl	8007034 <USBD_CtlError>
    ret = USBD_FAIL;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	75fb      	strb	r3, [r7, #23]
    break;
 8005ce2:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop

08005cf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e049      	b.n	8005da6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3318      	adds	r3, #24
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d029      	beq.n	8005d84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	3318      	adds	r3, #24
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	78f9      	ldrb	r1, [r7, #3]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	460b      	mov	r3, r1
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	1a5b      	subs	r3, r3, r1
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4403      	add	r3, r0
 8005d50:	3344      	adds	r3, #68	; 0x44
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d58:	fb03 f301 	mul.w	r3, r3, r1
 8005d5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d110      	bne.n	8005d84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3318      	adds	r3, #24
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d76:	78f9      	ldrb	r1, [r7, #3]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fed8 	bl	8007b32 <USBD_LL_Transmit>
 8005d82:	e00f      	b.n	8005da4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e015      	b.n	8005dfc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 feee 	bl	8007bb6 <USBD_LL_GetRxDataSize>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005df6:	4611      	mov	r1, r2
 8005df8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e12:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d015      	beq.n	8005e4a <USBD_CDC_EP0_RxReady+0x46>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e24:	2bff      	cmp	r3, #255	; 0xff
 8005e26:	d010      	beq.n	8005e4a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e36:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2243      	movs	r2, #67	; 0x43
 8005e60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e62:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	20000094 	.word	0x20000094

08005e74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2243      	movs	r2, #67	; 0x43
 8005e80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e82:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000050 	.word	0x20000050

08005e94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2243      	movs	r2, #67	; 0x43
 8005ea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ea2:	4b03      	ldr	r3, [pc, #12]	; (8005eb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	200000d8 	.word	0x200000d8

08005eb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	220a      	movs	r2, #10
 8005ec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ec2:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	2000000c 	.word	0x2000000c

08005ed4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e004      	b.n	8005ef2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f10:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f40:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e01a      	b.n	8005fb0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d114      	bne.n	8005fae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fa2:	2181      	movs	r1, #129	; 0x81
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fdc4 	bl	8007b32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e016      	b.n	8006004 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	7c1b      	ldrb	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe8:	2101      	movs	r1, #1
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 fdc2 	bl	8007b74 <USBD_LL_PrepareReceive>
 8005ff0:	e007      	b.n	8006002 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ff8:	2340      	movs	r3, #64	; 0x40
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 fdb9 	bl	8007b74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006020:	2303      	movs	r3, #3
 8006022:	e025      	b.n	8006070 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	79fa      	ldrb	r2, [r7, #7]
 8006062:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 fc2f 	bl	80078c8 <USBD_LL_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	e010      	b.n	80060b2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f107 020e 	add.w	r2, r7, #14
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
 80060a8:	4602      	mov	r2, r0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fc4c 	bl	8007960 <USBD_LL_Start>
 80060c8:	4603      	mov	r3, r0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	4611      	mov	r1, r2
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	4611      	mov	r1, r2
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
  }

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 ff2c 	bl	8006fc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006176:	461a      	mov	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2b01      	cmp	r3, #1
 800618a:	d00e      	beq.n	80061aa <USBD_LL_SetupStage+0x5a>
 800618c:	2b01      	cmp	r3, #1
 800618e:	d302      	bcc.n	8006196 <USBD_LL_SetupStage+0x46>
 8006190:	2b02      	cmp	r3, #2
 8006192:	d014      	beq.n	80061be <USBD_LL_SetupStage+0x6e>
 8006194:	e01d      	b.n	80061d2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa18 	bl	80065d4 <USBD_StdDevReq>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
      break;
 80061a8:	e020      	b.n	80061ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa7c 	bl	80066b0 <USBD_StdItfReq>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
      break;
 80061bc:	e016      	b.n	80061ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fab8 	bl	800673c <USBD_StdEPReq>
 80061cc:	4603      	mov	r3, r0
 80061ce:	73fb      	strb	r3, [r7, #15]
      break;
 80061d0:	e00c      	b.n	80061ec <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 fc1d 	bl	8007a20 <USBD_LL_StallEP>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73fb      	strb	r3, [r7, #15]
      break;
 80061ea:	bf00      	nop
  }

  return ret;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	460b      	mov	r3, r1
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006204:	7afb      	ldrb	r3, [r7, #11]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d137      	bne.n	800627a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006210:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006218:	2b03      	cmp	r3, #3
 800621a:	d14a      	bne.n	80062b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	429a      	cmp	r2, r3
 8006226:	d913      	bls.n	8006250 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	4293      	cmp	r3, r2
 8006240:	bf28      	it	cs
 8006242:	4613      	movcs	r3, r2
 8006244:	461a      	mov	r2, r3
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 ffad 	bl	80071a8 <USBD_CtlContinueRx>
 800624e:	e030      	b.n	80062b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006262:	2b03      	cmp	r3, #3
 8006264:	d105      	bne.n	8006272 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 ffa9 	bl	80071ca <USBD_CtlSendStatus>
 8006278:	e01b      	b.n	80062b2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d013      	beq.n	80062ae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800628c:	2b03      	cmp	r3, #3
 800628e:	d10e      	bne.n	80062ae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	7afa      	ldrb	r2, [r7, #11]
 800629a:	4611      	mov	r1, r2
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	4798      	blx	r3
 80062a0:	4603      	mov	r3, r0
 80062a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	e002      	b.n	80062b4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e000      	b.n	80062b4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	460b      	mov	r3, r1
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d16a      	bne.n	80063a6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3314      	adds	r3, #20
 80062d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d155      	bne.n	800638c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d914      	bls.n	8006316 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	461a      	mov	r2, r3
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 ff22 	bl	800714c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006308:	2300      	movs	r3, #0
 800630a:	2200      	movs	r2, #0
 800630c:	2100      	movs	r1, #0
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f001 fc30 	bl	8007b74 <USBD_LL_PrepareReceive>
 8006314:	e03a      	b.n	800638c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	d11c      	bne.n	800635c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800632a:	429a      	cmp	r2, r3
 800632c:	d316      	bcc.n	800635c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006338:	429a      	cmp	r2, r3
 800633a:	d20f      	bcs.n	800635c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800633c:	2200      	movs	r2, #0
 800633e:	2100      	movs	r1, #0
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 ff03 	bl	800714c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800634e:	2300      	movs	r3, #0
 8006350:	2200      	movs	r2, #0
 8006352:	2100      	movs	r1, #0
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f001 fc0d 	bl	8007b74 <USBD_LL_PrepareReceive>
 800635a:	e017      	b.n	800638c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800636e:	2b03      	cmp	r3, #3
 8006370:	d105      	bne.n	800637e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800637e:	2180      	movs	r1, #128	; 0x80
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f001 fb4d 	bl	8007a20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 ff32 	bl	80071f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d123      	bne.n	80063de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fe9b 	bl	80060d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063a4:	e01b      	b.n	80063de <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d10e      	bne.n	80063da <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	7afa      	ldrb	r2, [r7, #11]
 80063c6:	4611      	mov	r1, r2
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	4798      	blx	r3
 80063cc:	4603      	mov	r3, r0
 80063ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	e002      	b.n	80063e0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	e000      	b.n	80063e0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6852      	ldr	r2, [r2, #4]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	4611      	mov	r1, r2
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	2200      	movs	r2, #0
 8006430:	2100      	movs	r1, #0
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 faaf 	bl	8007996 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2240      	movs	r2, #64	; 0x40
 8006444:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006448:	2340      	movs	r3, #64	; 0x40
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 faa1 	bl	8007996 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2240      	movs	r2, #64	; 0x40
 800645e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2204      	movs	r2, #4
 80064a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d105      	bne.n	80064d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d10b      	bne.n	800650a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6852      	ldr	r2, [r2, #4]
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	4611      	mov	r1, r2
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
  }

  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006596:	b480      	push	{r7}
 8006598:	b087      	sub	sp, #28
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	3301      	adds	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065b4:	8a3b      	ldrh	r3, [r7, #16]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	b21a      	sxth	r2, r3
 80065ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065be:	4313      	orrs	r3, r2
 80065c0:	b21b      	sxth	r3, r3
 80065c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065c4:	89fb      	ldrh	r3, [r7, #14]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d004      	beq.n	80065f8 <USBD_StdDevReq+0x24>
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d002      	beq.n	80065f8 <USBD_StdDevReq+0x24>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <USBD_StdDevReq+0x38>
 80065f6:	e050      	b.n	800669a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
    break;
 800660a:	e04b      	b.n	80066a4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b09      	cmp	r3, #9
 8006612:	d83c      	bhi.n	800668e <USBD_StdDevReq+0xba>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <USBD_StdDevReq+0x48>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006671 	.word	0x08006671
 8006620:	08006685 	.word	0x08006685
 8006624:	0800668f 	.word	0x0800668f
 8006628:	0800667b 	.word	0x0800667b
 800662c:	0800668f 	.word	0x0800668f
 8006630:	0800664f 	.word	0x0800664f
 8006634:	08006645 	.word	0x08006645
 8006638:	0800668f 	.word	0x0800668f
 800663c:	08006667 	.word	0x08006667
 8006640:	08006659 	.word	0x08006659
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9ce 	bl	80069e8 <USBD_GetDescriptor>
      break;
 800664c:	e024      	b.n	8006698 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb33 	bl	8006cbc <USBD_SetAddress>
      break;
 8006656:	e01f      	b.n	8006698 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fb70 	bl	8006d40 <USBD_SetConfig>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]
      break;
 8006664:	e018      	b.n	8006698 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fc0d 	bl	8006e88 <USBD_GetConfig>
      break;
 800666e:	e013      	b.n	8006698 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fc3c 	bl	8006ef0 <USBD_GetStatus>
      break;
 8006678:	e00e      	b.n	8006698 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fc6a 	bl	8006f56 <USBD_SetFeature>
      break;
 8006682:	e009      	b.n	8006698 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fc79 	bl	8006f7e <USBD_ClrFeature>
      break;
 800668c:	e004      	b.n	8006698 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fccf 	bl	8007034 <USBD_CtlError>
      break;
 8006696:	bf00      	nop
    }
    break;
 8006698:	e004      	b.n	80066a4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fcc9 	bl	8007034 <USBD_CtlError>
    break;
 80066a2:	bf00      	nop
  }

  return ret;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d003      	beq.n	80066d2 <USBD_StdItfReq+0x22>
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d001      	beq.n	80066d2 <USBD_StdItfReq+0x22>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d12a      	bne.n	8006728 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d8:	3b01      	subs	r3, #1
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d81d      	bhi.n	800671a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	889b      	ldrh	r3, [r3, #4]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d813      	bhi.n	8006710 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	88db      	ldrh	r3, [r3, #6]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d110      	bne.n	8006724 <USBD_StdItfReq+0x74>
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10d      	bne.n	8006724 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fd5e 	bl	80071ca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800670e:	e009      	b.n	8006724 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fc8e 	bl	8007034 <USBD_CtlError>
      break;
 8006718:	e004      	b.n	8006724 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fc89 	bl	8007034 <USBD_CtlError>
      break;
 8006722:	e000      	b.n	8006726 <USBD_StdItfReq+0x76>
      break;
 8006724:	bf00      	nop
    }
    break;
 8006726:	e004      	b.n	8006732 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fc82 	bl	8007034 <USBD_CtlError>
    break;
 8006730:	bf00      	nop
  }

  return ret;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	889b      	ldrh	r3, [r3, #4]
 800674e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006758:	2b20      	cmp	r3, #32
 800675a:	d004      	beq.n	8006766 <USBD_StdEPReq+0x2a>
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	d002      	beq.n	8006766 <USBD_StdEPReq+0x2a>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <USBD_StdEPReq+0x3e>
 8006764:	e135      	b.n	80069d2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]
    break;
 8006778:	e130      	b.n	80069dc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d03e      	beq.n	8006800 <USBD_StdEPReq+0xc4>
 8006782:	2b03      	cmp	r3, #3
 8006784:	d002      	beq.n	800678c <USBD_StdEPReq+0x50>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d077      	beq.n	800687a <USBD_StdEPReq+0x13e>
 800678a:	e11c      	b.n	80069c6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006792:	2b02      	cmp	r3, #2
 8006794:	d002      	beq.n	800679c <USBD_StdEPReq+0x60>
 8006796:	2b03      	cmp	r3, #3
 8006798:	d015      	beq.n	80067c6 <USBD_StdEPReq+0x8a>
 800679a:	e02b      	b.n	80067f4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <USBD_StdEPReq+0x80>
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b80      	cmp	r3, #128	; 0x80
 80067a6:	d009      	beq.n	80067bc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f937 	bl	8007a20 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 f933 	bl	8007a20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80067ba:	e020      	b.n	80067fe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fc38 	bl	8007034 <USBD_CtlError>
        break;
 80067c4:	e01b      	b.n	80067fe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	885b      	ldrh	r3, [r3, #2]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10e      	bne.n	80067ec <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USBD_StdEPReq+0xb0>
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	2b80      	cmp	r3, #128	; 0x80
 80067d8:	d008      	beq.n	80067ec <USBD_StdEPReq+0xb0>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	88db      	ldrh	r3, [r3, #6]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d104      	bne.n	80067ec <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 f91a 	bl	8007a20 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fcec 	bl	80071ca <USBD_CtlSendStatus>

        break;
 80067f2:	e004      	b.n	80067fe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fc1c 	bl	8007034 <USBD_CtlError>
        break;
 80067fc:	bf00      	nop
      }
      break;
 80067fe:	e0e7      	b.n	80069d0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006806:	2b02      	cmp	r3, #2
 8006808:	d002      	beq.n	8006810 <USBD_StdEPReq+0xd4>
 800680a:	2b03      	cmp	r3, #3
 800680c:	d015      	beq.n	800683a <USBD_StdEPReq+0xfe>
 800680e:	e02d      	b.n	800686c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <USBD_StdEPReq+0xf4>
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	2b80      	cmp	r3, #128	; 0x80
 800681a:	d009      	beq.n	8006830 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f8fd 	bl	8007a20 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 f8f9 	bl	8007a20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800682e:	e023      	b.n	8006878 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fbfe 	bl	8007034 <USBD_CtlError>
        break;
 8006838:	e01e      	b.n	8006878 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	885b      	ldrh	r3, [r3, #2]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d119      	bne.n	8006876 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f904 	bl	8007a5e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fcb7 	bl	80071ca <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
        }
        break;
 800686a:	e004      	b.n	8006876 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fbe0 	bl	8007034 <USBD_CtlError>
        break;
 8006874:	e000      	b.n	8006878 <USBD_StdEPReq+0x13c>
        break;
 8006876:	bf00      	nop
      }
      break;
 8006878:	e0aa      	b.n	80069d0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006880:	2b02      	cmp	r3, #2
 8006882:	d002      	beq.n	800688a <USBD_StdEPReq+0x14e>
 8006884:	2b03      	cmp	r3, #3
 8006886:	d032      	beq.n	80068ee <USBD_StdEPReq+0x1b2>
 8006888:	e097      	b.n	80069ba <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d007      	beq.n	80068a0 <USBD_StdEPReq+0x164>
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d004      	beq.n	80068a0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fbcb 	bl	8007034 <USBD_CtlError>
          break;
 800689e:	e091      	b.n	80069c4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	da0b      	bge.n	80068c0 <USBD_StdEPReq+0x184>
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	3310      	adds	r3, #16
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	3304      	adds	r3, #4
 80068be:	e00b      	b.n	80068d8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	3304      	adds	r3, #4
 80068d8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2202      	movs	r2, #2
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fc15 	bl	8007116 <USBD_CtlSendData>
        break;
 80068ec:	e06a      	b.n	80069c4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80068ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	da11      	bge.n	800691a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	f003 020f 	and.w	r2, r3, #15
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d117      	bne.n	8006940 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fb8e 	bl	8007034 <USBD_CtlError>
            break;
 8006918:	e054      	b.n	80069c4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fb7b 	bl	8007034 <USBD_CtlError>
            break;
 800693e:	e041      	b.n	80069c4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006944:	2b00      	cmp	r3, #0
 8006946:	da0b      	bge.n	8006960 <USBD_StdEPReq+0x224>
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	3310      	adds	r3, #16
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	3304      	adds	r3, #4
 800695e:	e00b      	b.n	8006978 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	3304      	adds	r3, #4
 8006978:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <USBD_StdEPReq+0x24a>
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d103      	bne.n	800698e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e00e      	b.n	80069ac <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 f882 	bl	8007a9c <USBD_LL_IsStallEP>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e002      	b.n	80069ac <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2202      	movs	r2, #2
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fbaf 	bl	8007116 <USBD_CtlSendData>
          break;
 80069b8:	e004      	b.n	80069c4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fb39 	bl	8007034 <USBD_CtlError>
        break;
 80069c2:	bf00      	nop
      }
      break;
 80069c4:	e004      	b.n	80069d0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb33 	bl	8007034 <USBD_CtlError>
      break;
 80069ce:	bf00      	nop
    }
    break;
 80069d0:	e004      	b.n	80069dc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fb2d 	bl	8007034 <USBD_CtlError>
    break;
 80069da:	bf00      	nop
  }

  return ret;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	885b      	ldrh	r3, [r3, #2]
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	2b06      	cmp	r3, #6
 8006a0a:	f200 8128 	bhi.w	8006c5e <USBD_GetDescriptor+0x276>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <USBD_GetDescriptor+0x2c>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	08006a49 	.word	0x08006a49
 8006a1c:	08006a89 	.word	0x08006a89
 8006a20:	08006c5f 	.word	0x08006c5f
 8006a24:	08006c5f 	.word	0x08006c5f
 8006a28:	08006bff 	.word	0x08006bff
 8006a2c:	08006c2b 	.word	0x08006c2b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	7c12      	ldrb	r2, [r2, #16]
 8006a3c:	f107 0108 	add.w	r1, r7, #8
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
 8006a44:	60f8      	str	r0, [r7, #12]
    break;
 8006a46:	e112      	b.n	8006c6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7c1b      	ldrb	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10d      	bne.n	8006a6c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	f107 0208 	add.w	r2, r7, #8
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	2202      	movs	r2, #2
 8006a68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006a6a:	e100      	b.n	8006c6e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	f107 0208 	add.w	r2, r7, #8
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
 8006a7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	2202      	movs	r2, #2
 8006a84:	701a      	strb	r2, [r3, #0]
    break;
 8006a86:	e0f2      	b.n	8006c6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	885b      	ldrh	r3, [r3, #2]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	f200 80ac 	bhi.w	8006bec <USBD_GetDescriptor+0x204>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <USBD_GetDescriptor+0xb4>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006ab5 	.word	0x08006ab5
 8006aa0:	08006ae9 	.word	0x08006ae9
 8006aa4:	08006b1d 	.word	0x08006b1d
 8006aa8:	08006b51 	.word	0x08006b51
 8006aac:	08006b85 	.word	0x08006b85
 8006ab0:	08006bb9 	.word	0x08006bb9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	7c12      	ldrb	r2, [r2, #16]
 8006acc:	f107 0108 	add.w	r1, r7, #8
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
 8006ad4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ad6:	e091      	b.n	8006bfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 faaa 	bl	8007034 <USBD_CtlError>
        err++;
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae6:	e089      	b.n	8006bfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	7c12      	ldrb	r2, [r2, #16]
 8006b00:	f107 0108 	add.w	r1, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b0a:	e077      	b.n	8006bfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa90 	bl	8007034 <USBD_CtlError>
        err++;
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	3301      	adds	r3, #1
 8006b18:	72fb      	strb	r3, [r7, #11]
      break;
 8006b1a:	e06f      	b.n	8006bfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	7c12      	ldrb	r2, [r2, #16]
 8006b34:	f107 0108 	add.w	r1, r7, #8
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4798      	blx	r3
 8006b3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b3e:	e05d      	b.n	8006bfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa76 	bl	8007034 <USBD_CtlError>
        err++;
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4e:	e055      	b.n	8006bfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	7c12      	ldrb	r2, [r2, #16]
 8006b68:	f107 0108 	add.w	r1, r7, #8
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
 8006b70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b72:	e043      	b.n	8006bfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa5c 	bl	8007034 <USBD_CtlError>
        err++;
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	72fb      	strb	r3, [r7, #11]
      break;
 8006b82:	e03b      	b.n	8006bfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	7c12      	ldrb	r2, [r2, #16]
 8006b9c:	f107 0108 	add.w	r1, r7, #8
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
 8006ba4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ba6:	e029      	b.n	8006bfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa42 	bl	8007034 <USBD_CtlError>
        err++;
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	72fb      	strb	r3, [r7, #11]
      break;
 8006bb6:	e021      	b.n	8006bfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	7c12      	ldrb	r2, [r2, #16]
 8006bd0:	f107 0108 	add.w	r1, r7, #8
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bda:	e00f      	b.n	8006bfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa28 	bl	8007034 <USBD_CtlError>
        err++;
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	3301      	adds	r3, #1
 8006be8:	72fb      	strb	r3, [r7, #11]
      break;
 8006bea:	e007      	b.n	8006bfc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa20 	bl	8007034 <USBD_CtlError>
      err++;
 8006bf4:	7afb      	ldrb	r3, [r7, #11]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006bfa:	bf00      	nop
    }
    break;
 8006bfc:	e037      	b.n	8006c6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7c1b      	ldrb	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	f107 0208 	add.w	r2, r7, #8
 8006c12:	4610      	mov	r0, r2
 8006c14:	4798      	blx	r3
 8006c16:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006c18:	e029      	b.n	8006c6e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa09 	bl	8007034 <USBD_CtlError>
      err++;
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	3301      	adds	r3, #1
 8006c26:	72fb      	strb	r3, [r7, #11]
    break;
 8006c28:	e021      	b.n	8006c6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	7c1b      	ldrb	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10d      	bne.n	8006c4e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	f107 0208 	add.w	r2, r7, #8
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4798      	blx	r3
 8006c42:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	2207      	movs	r2, #7
 8006c4a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006c4c:	e00f      	b.n	8006c6e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9ef 	bl	8007034 <USBD_CtlError>
      err++;
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	72fb      	strb	r3, [r7, #11]
    break;
 8006c5c:	e007      	b.n	8006c6e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9e7 	bl	8007034 <USBD_CtlError>
    err++;
 8006c66:	7afb      	ldrb	r3, [r7, #11]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	72fb      	strb	r3, [r7, #11]
    break;
 8006c6c:	bf00      	nop
  }

  if (err != 0U)
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11e      	bne.n	8006cb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	88db      	ldrh	r3, [r3, #6]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d016      	beq.n	8006caa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006c7c:	893b      	ldrh	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00e      	beq.n	8006ca0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	88da      	ldrh	r2, [r3, #6]
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	bf28      	it	cs
 8006c8c:	4613      	movcs	r3, r2
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c92:	893b      	ldrh	r3, [r7, #8]
 8006c94:	461a      	mov	r2, r3
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa3c 	bl	8007116 <USBD_CtlSendData>
 8006c9e:	e009      	b.n	8006cb4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9c6 	bl	8007034 <USBD_CtlError>
 8006ca8:	e004      	b.n	8006cb4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa8d 	bl	80071ca <USBD_CtlSendStatus>
 8006cb0:	e000      	b.n	8006cb4 <USBD_GetDescriptor+0x2cc>
    return;
 8006cb2:	bf00      	nop
    }
  }
}
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop

08006cbc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	889b      	ldrh	r3, [r3, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d130      	bne.n	8006d30 <USBD_SetAddress+0x74>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	88db      	ldrh	r3, [r3, #6]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d12c      	bne.n	8006d30 <USBD_SetAddress+0x74>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	885b      	ldrh	r3, [r3, #2]
 8006cda:	2b7f      	cmp	r3, #127	; 0x7f
 8006cdc:	d828      	bhi.n	8006d30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d104      	bne.n	8006cfe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f99c 	bl	8007034 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cfc:	e01c      	b.n	8006d38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fef2 	bl	8007af4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fa5a 	bl	80071ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d004      	beq.n	8006d26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d24:	e008      	b.n	8006d38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2e:	e003      	b.n	8006d38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f97e 	bl	8007034 <USBD_CtlError>
  }
}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	885b      	ldrh	r3, [r3, #2]
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	4b4b      	ldr	r3, [pc, #300]	; (8006e84 <USBD_SetConfig+0x144>)
 8006d56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d58:	4b4a      	ldr	r3, [pc, #296]	; (8006e84 <USBD_SetConfig+0x144>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d905      	bls.n	8006d6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f966 	bl	8007034 <USBD_CtlError>
    return USBD_FAIL;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e087      	b.n	8006e7c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d002      	beq.n	8006d7c <USBD_SetConfig+0x3c>
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d025      	beq.n	8006dc6 <USBD_SetConfig+0x86>
 8006d7a:	e071      	b.n	8006e60 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006d7c:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <USBD_SetConfig+0x144>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01c      	beq.n	8006dbe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006d84:	4b3f      	ldr	r3, [pc, #252]	; (8006e84 <USBD_SetConfig+0x144>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d8e:	4b3d      	ldr	r3, [pc, #244]	; (8006e84 <USBD_SetConfig+0x144>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff f9a7 	bl	80060e8 <USBD_SetClassConfig>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f944 	bl	8007034 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006dac:	e065      	b.n	8006e7a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa0b 	bl	80071ca <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2203      	movs	r2, #3
 8006db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006dbc:	e05d      	b.n	8006e7a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa03 	bl	80071ca <USBD_CtlSendStatus>
    break;
 8006dc4:	e059      	b.n	8006e7a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006dc6:	4b2f      	ldr	r3, [pc, #188]	; (8006e84 <USBD_SetConfig+0x144>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d112      	bne.n	8006df4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <USBD_SetConfig+0x144>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006de0:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <USBD_SetConfig+0x144>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff f99a 	bl	8006120 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f9ec 	bl	80071ca <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006df2:	e042      	b.n	8006e7a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006df4:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <USBD_SetConfig+0x144>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d02a      	beq.n	8006e58 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff f988 	bl	8006120 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006e10:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <USBD_SetConfig+0x144>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <USBD_SetConfig+0x144>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff f961 	bl	80060e8 <USBD_SetClassConfig>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00f      	beq.n	8006e50 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f8fe 	bl	8007034 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff f96d 	bl	8006120 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006e4e:	e014      	b.n	8006e7a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f9ba 	bl	80071ca <USBD_CtlSendStatus>
    break;
 8006e56:	e010      	b.n	8006e7a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f9b6 	bl	80071ca <USBD_CtlSendStatus>
    break;
 8006e5e:	e00c      	b.n	8006e7a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8e6 	bl	8007034 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e68:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <USBD_SetConfig+0x144>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff f956 	bl	8006120 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	73fb      	strb	r3, [r7, #15]
    break;
 8006e78:	bf00      	nop
  }

  return ret;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000204 	.word	0x20000204

08006e88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	88db      	ldrh	r3, [r3, #6]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d004      	beq.n	8006ea4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f8c9 	bl	8007034 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006ea2:	e021      	b.n	8006ee8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	db17      	blt.n	8006ede <USBD_GetConfig+0x56>
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dd02      	ble.n	8006eb8 <USBD_GetConfig+0x30>
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d00b      	beq.n	8006ece <USBD_GetConfig+0x46>
 8006eb6:	e012      	b.n	8006ede <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f925 	bl	8007116 <USBD_CtlSendData>
      break;
 8006ecc:	e00c      	b.n	8006ee8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f91d 	bl	8007116 <USBD_CtlSendData>
      break;
 8006edc:	e004      	b.n	8006ee8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f8a7 	bl	8007034 <USBD_CtlError>
      break;
 8006ee6:	bf00      	nop
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f00:	3b01      	subs	r3, #1
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d81e      	bhi.n	8006f44 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d004      	beq.n	8006f18 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f88f 	bl	8007034 <USBD_CtlError>
      break;
 8006f16:	e01a      	b.n	8006f4e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f043 0202 	orr.w	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	330c      	adds	r3, #12
 8006f38:	2202      	movs	r2, #2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f8ea 	bl	8007116 <USBD_CtlSendData>
    break;
 8006f42:	e004      	b.n	8006f4e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f874 	bl	8007034 <USBD_CtlError>
    break;
 8006f4c:	bf00      	nop
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d106      	bne.n	8006f76 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f92a 	bl	80071ca <USBD_CtlSendStatus>
  }
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d80b      	bhi.n	8006fac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	885b      	ldrh	r3, [r3, #2]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10c      	bne.n	8006fb6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f910 	bl	80071ca <USBD_CtlSendStatus>
      }
      break;
 8006faa:	e004      	b.n	8006fb6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f840 	bl	8007034 <USBD_CtlError>
      break;
 8006fb4:	e000      	b.n	8006fb8 <USBD_ClrFeature+0x3a>
      break;
 8006fb6:	bf00      	nop
  }
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	781a      	ldrb	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff fad3 	bl	8006596 <SWAPBYTE>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fac6 	bl	8006596 <SWAPBYTE>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3301      	adds	r3, #1
 8007016:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7ff fab9 	bl	8006596 <SWAPBYTE>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	80da      	strh	r2, [r3, #6]
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800703e:	2180      	movs	r1, #128	; 0x80
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fced 	bl	8007a20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fce9 	bl	8007a20 <USBD_LL_StallEP>
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d036      	beq.n	80070da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007070:	6938      	ldr	r0, [r7, #16]
 8007072:	f000 f836 	bl	80070e2 <USBD_GetLen>
 8007076:	4603      	mov	r3, r0
 8007078:	3301      	adds	r3, #1
 800707a:	b29b      	uxth	r3, r3
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	3301      	adds	r3, #1
 8007094:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	4413      	add	r3, r2
 800709c:	2203      	movs	r2, #3
 800709e:	701a      	strb	r2, [r3, #0]
  idx++;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	3301      	adds	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070a6:	e013      	b.n	80070d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	7812      	ldrb	r2, [r2, #0]
 80070b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3301      	adds	r3, #1
 80070b8:	613b      	str	r3, [r7, #16]
    idx++;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	3301      	adds	r3, #1
 80070be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	3301      	adds	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e7      	bne.n	80070a8 <USBD_GetString+0x52>
 80070d8:	e000      	b.n	80070dc <USBD_GetString+0x86>
    return;
 80070da:	bf00      	nop
  }
}
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070f2:	e005      	b.n	8007100 <USBD_GetLen+0x1e>
  {
    len++;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	3301      	adds	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1f5      	bne.n	80070f4 <USBD_GetLen+0x12>
  }

  return len;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2202      	movs	r2, #2
 8007126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	2100      	movs	r1, #0
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 fcf8 	bl	8007b32 <USBD_LL_Transmit>

  return USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	2100      	movs	r1, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 fce7 	bl	8007b32 <USBD_LL_Transmit>

  return USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2203      	movs	r2, #3
 800717e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	2100      	movs	r1, #0
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fceb 	bl	8007b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	2100      	movs	r1, #0
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fcda 	bl	8007b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2204      	movs	r2, #4
 80071d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071da:	2300      	movs	r3, #0
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fca6 	bl	8007b32 <USBD_LL_Transmit>

  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2205      	movs	r2, #5
 80071fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007200:	2300      	movs	r3, #0
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fcb4 	bl	8007b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800721c:	2200      	movs	r2, #0
 800721e:	4912      	ldr	r1, [pc, #72]	; (8007268 <MX_USB_DEVICE_Init+0x50>)
 8007220:	4812      	ldr	r0, [pc, #72]	; (800726c <MX_USB_DEVICE_Init+0x54>)
 8007222:	f7fe fef3 	bl	800600c <USBD_Init>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800722c:	f7f9 fb7e 	bl	800092c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007230:	490f      	ldr	r1, [pc, #60]	; (8007270 <MX_USB_DEVICE_Init+0x58>)
 8007232:	480e      	ldr	r0, [pc, #56]	; (800726c <MX_USB_DEVICE_Init+0x54>)
 8007234:	f7fe ff20 	bl	8006078 <USBD_RegisterClass>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800723e:	f7f9 fb75 	bl	800092c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007242:	490c      	ldr	r1, [pc, #48]	; (8007274 <MX_USB_DEVICE_Init+0x5c>)
 8007244:	4809      	ldr	r0, [pc, #36]	; (800726c <MX_USB_DEVICE_Init+0x54>)
 8007246:	f7fe fe45 	bl	8005ed4 <USBD_CDC_RegisterInterface>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007250:	f7f9 fb6c 	bl	800092c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007254:	4805      	ldr	r0, [pc, #20]	; (800726c <MX_USB_DEVICE_Init+0x54>)
 8007256:	f7fe ff30 	bl	80060ba <USBD_Start>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007260:	f7f9 fb64 	bl	800092c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007264:	bf00      	nop
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20000130 	.word	0x20000130
 800726c:	20000368 	.word	0x20000368
 8007270:	20000018 	.word	0x20000018
 8007274:	2000011c 	.word	0x2000011c

08007278 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800727c:	2200      	movs	r2, #0
 800727e:	4905      	ldr	r1, [pc, #20]	; (8007294 <CDC_Init_FS+0x1c>)
 8007280:	4805      	ldr	r0, [pc, #20]	; (8007298 <CDC_Init_FS+0x20>)
 8007282:	f7fe fe3c 	bl	8005efe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007286:	4905      	ldr	r1, [pc, #20]	; (800729c <CDC_Init_FS+0x24>)
 8007288:	4803      	ldr	r0, [pc, #12]	; (8007298 <CDC_Init_FS+0x20>)
 800728a:	f7fe fe51 	bl	8005f30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800728e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000e38 	.word	0x20000e38
 8007298:	20000368 	.word	0x20000368
 800729c:	20000638 	.word	0x20000638

080072a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
 80072bc:	4613      	mov	r3, r2
 80072be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b23      	cmp	r3, #35	; 0x23
 80072c4:	d84a      	bhi.n	800735c <CDC_Control_FS+0xac>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <CDC_Control_FS+0x1c>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	0800735d 	.word	0x0800735d
 80072d0:	0800735d 	.word	0x0800735d
 80072d4:	0800735d 	.word	0x0800735d
 80072d8:	0800735d 	.word	0x0800735d
 80072dc:	0800735d 	.word	0x0800735d
 80072e0:	0800735d 	.word	0x0800735d
 80072e4:	0800735d 	.word	0x0800735d
 80072e8:	0800735d 	.word	0x0800735d
 80072ec:	0800735d 	.word	0x0800735d
 80072f0:	0800735d 	.word	0x0800735d
 80072f4:	0800735d 	.word	0x0800735d
 80072f8:	0800735d 	.word	0x0800735d
 80072fc:	0800735d 	.word	0x0800735d
 8007300:	0800735d 	.word	0x0800735d
 8007304:	0800735d 	.word	0x0800735d
 8007308:	0800735d 	.word	0x0800735d
 800730c:	0800735d 	.word	0x0800735d
 8007310:	0800735d 	.word	0x0800735d
 8007314:	0800735d 	.word	0x0800735d
 8007318:	0800735d 	.word	0x0800735d
 800731c:	0800735d 	.word	0x0800735d
 8007320:	0800735d 	.word	0x0800735d
 8007324:	0800735d 	.word	0x0800735d
 8007328:	0800735d 	.word	0x0800735d
 800732c:	0800735d 	.word	0x0800735d
 8007330:	0800735d 	.word	0x0800735d
 8007334:	0800735d 	.word	0x0800735d
 8007338:	0800735d 	.word	0x0800735d
 800733c:	0800735d 	.word	0x0800735d
 8007340:	0800735d 	.word	0x0800735d
 8007344:	0800735d 	.word	0x0800735d
 8007348:	0800735d 	.word	0x0800735d
 800734c:	0800735d 	.word	0x0800735d
 8007350:	0800735d 	.word	0x0800735d
 8007354:	0800735d 	.word	0x0800735d
 8007358:	0800735d 	.word	0x0800735d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800735c:	bf00      	nop
  }

  return (USBD_OK);
 800735e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4805      	ldr	r0, [pc, #20]	; (8007390 <CDC_Receive_FS+0x24>)
 800737a:	f7fe fdd9 	bl	8005f30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800737e:	4804      	ldr	r0, [pc, #16]	; (8007390 <CDC_Receive_FS+0x24>)
 8007380:	f7fe fe1a 	bl	8005fb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007384:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000368 	.word	0x20000368

08007394 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80073a4:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <CDC_Transmit_FS+0x48>)
 80073a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e00b      	b.n	80073d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073ba:	887b      	ldrh	r3, [r7, #2]
 80073bc:	461a      	mov	r2, r3
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4806      	ldr	r0, [pc, #24]	; (80073dc <CDC_Transmit_FS+0x48>)
 80073c2:	f7fe fd9c 	bl	8005efe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073c6:	4805      	ldr	r0, [pc, #20]	; (80073dc <CDC_Transmit_FS+0x48>)
 80073c8:	f7fe fdc6 	bl	8005f58 <USBD_CDC_TransmitPacket>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000368 	.word	0x20000368

080073e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
	...

08007404 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	6039      	str	r1, [r7, #0]
 800740e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2212      	movs	r2, #18
 8007414:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007416:	4b03      	ldr	r3, [pc, #12]	; (8007424 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	2000014c 	.word	0x2000014c

08007428 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2204      	movs	r2, #4
 8007438:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000160 	.word	0x20000160

0800744c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4907      	ldr	r1, [pc, #28]	; (8007480 <USBD_FS_ProductStrDescriptor+0x34>)
 8007462:	4808      	ldr	r0, [pc, #32]	; (8007484 <USBD_FS_ProductStrDescriptor+0x38>)
 8007464:	f7ff fdf7 	bl	8007056 <USBD_GetString>
 8007468:	e004      	b.n	8007474 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4904      	ldr	r1, [pc, #16]	; (8007480 <USBD_FS_ProductStrDescriptor+0x34>)
 800746e:	4805      	ldr	r0, [pc, #20]	; (8007484 <USBD_FS_ProductStrDescriptor+0x38>)
 8007470:	f7ff fdf1 	bl	8007056 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007474:	4b02      	ldr	r3, [pc, #8]	; (8007480 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001638 	.word	0x20001638
 8007484:	080084e4 	.word	0x080084e4

08007488 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	4904      	ldr	r1, [pc, #16]	; (80074a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007498:	4804      	ldr	r0, [pc, #16]	; (80074ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800749a:	f7ff fddc 	bl	8007056 <USBD_GetString>
  return USBD_StrDesc;
 800749e:	4b02      	ldr	r3, [pc, #8]	; (80074a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20001638 	.word	0x20001638
 80074ac:	080084fc 	.word	0x080084fc

080074b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	221a      	movs	r2, #26
 80074c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074c2:	f000 f843 	bl	800754c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074c6:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000164 	.word	0x20000164

080074d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	6039      	str	r1, [r7, #0]
 80074de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	4907      	ldr	r1, [pc, #28]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ea:	4808      	ldr	r0, [pc, #32]	; (800750c <USBD_FS_ConfigStrDescriptor+0x38>)
 80074ec:	f7ff fdb3 	bl	8007056 <USBD_GetString>
 80074f0:	e004      	b.n	80074fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	4904      	ldr	r1, [pc, #16]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074f6:	4805      	ldr	r0, [pc, #20]	; (800750c <USBD_FS_ConfigStrDescriptor+0x38>)
 80074f8:	f7ff fdad 	bl	8007056 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074fc:	4b02      	ldr	r3, [pc, #8]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001638 	.word	0x20001638
 800750c:	08008510 	.word	0x08008510

08007510 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	4907      	ldr	r1, [pc, #28]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007526:	4808      	ldr	r0, [pc, #32]	; (8007548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007528:	f7ff fd95 	bl	8007056 <USBD_GetString>
 800752c:	e004      	b.n	8007538 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	4904      	ldr	r1, [pc, #16]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007532:	4805      	ldr	r0, [pc, #20]	; (8007548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007534:	f7ff fd8f 	bl	8007056 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007538:	4b02      	ldr	r3, [pc, #8]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20001638 	.word	0x20001638
 8007548:	0800851c 	.word	0x0800851c

0800754c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007552:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <Get_SerialNum+0x44>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007558:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <Get_SerialNum+0x48>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800755e:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <Get_SerialNum+0x4c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007572:	2208      	movs	r2, #8
 8007574:	4909      	ldr	r1, [pc, #36]	; (800759c <Get_SerialNum+0x50>)
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 f814 	bl	80075a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800757c:	2204      	movs	r2, #4
 800757e:	4908      	ldr	r1, [pc, #32]	; (80075a0 <Get_SerialNum+0x54>)
 8007580:	68b8      	ldr	r0, [r7, #8]
 8007582:	f000 f80f 	bl	80075a4 <IntToUnicode>
  }
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	1fff7a10 	.word	0x1fff7a10
 8007594:	1fff7a14 	.word	0x1fff7a14
 8007598:	1fff7a18 	.word	0x1fff7a18
 800759c:	20000166 	.word	0x20000166
 80075a0:	20000176 	.word	0x20000176

080075a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
 80075ba:	e027      	b.n	800760c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0f1b      	lsrs	r3, r3, #28
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	d80b      	bhi.n	80075dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	0f1b      	lsrs	r3, r3, #28
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	4619      	mov	r1, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	440b      	add	r3, r1
 80075d4:	3230      	adds	r2, #48	; 0x30
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	e00a      	b.n	80075f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	0f1b      	lsrs	r3, r3, #28
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	440b      	add	r3, r1
 80075ec:	3237      	adds	r2, #55	; 0x37
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	3301      	adds	r3, #1
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	3301      	adds	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
 800760c:	7dfa      	ldrb	r2, [r7, #23]
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	429a      	cmp	r2, r3
 8007612:	d3d3      	bcc.n	80075bc <IntToUnicode+0x18>
  }
}
 8007614:	bf00      	nop
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007640:	d147      	bne.n	80076d2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	4b25      	ldr	r3, [pc, #148]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	4a24      	ldr	r2, [pc, #144]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	6313      	str	r3, [r2, #48]	; 0x30
 8007652:	4b22      	ldr	r3, [pc, #136]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800765e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007664:	2300      	movs	r3, #0
 8007666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4619      	mov	r1, r3
 8007672:	481b      	ldr	r0, [pc, #108]	; (80076e0 <HAL_PCD_MspInit+0xc0>)
 8007674:	f7fa f8a4 	bl	80017c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007678:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800767c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767e:	2302      	movs	r3, #2
 8007680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007686:	2300      	movs	r3, #0
 8007688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800768a:	230a      	movs	r3, #10
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800768e:	f107 0314 	add.w	r3, r7, #20
 8007692:	4619      	mov	r1, r3
 8007694:	4812      	ldr	r0, [pc, #72]	; (80076e0 <HAL_PCD_MspInit+0xc0>)
 8007696:	f7fa f893 	bl	80017c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800769a:	4b10      	ldr	r3, [pc, #64]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 800769c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769e:	4a0f      	ldr	r2, [pc, #60]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 80076a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a4:	6353      	str	r3, [r2, #52]	; 0x34
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 80076ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ae:	4a0b      	ldr	r2, [pc, #44]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 80076b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076b4:	6453      	str	r3, [r2, #68]	; 0x44
 80076b6:	4b09      	ldr	r3, [pc, #36]	; (80076dc <HAL_PCD_MspInit+0xbc>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076c2:	2200      	movs	r2, #0
 80076c4:	2100      	movs	r1, #0
 80076c6:	2043      	movs	r0, #67	; 0x43
 80076c8:	f7f9 fced 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076cc:	2043      	movs	r0, #67	; 0x43
 80076ce:	f7f9 fd06 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076d2:	bf00      	nop
 80076d4:	3728      	adds	r7, #40	; 0x28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800
 80076e0:	40020000 	.word	0x40020000

080076e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7fe fd28 	bl	8006150 <USBD_LL_SetupStage>
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	4619      	mov	r1, r3
 8007732:	f7fe fd60 	bl	80061f6 <USBD_LL_DataOutStage>
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	3348      	adds	r3, #72	; 0x48
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	4619      	mov	r1, r3
 8007766:	f7fe fda9 	bl	80062bc <USBD_LL_DataInStage>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fead 	bl	80064e0 <USBD_LL_SOF>
}
 8007786:	bf00      	nop
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007796:	2301      	movs	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
 80077a6:	e008      	b.n	80077ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d102      	bne.n	80077b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e001      	b.n	80077ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80077b6:	f7f9 f8b9 	bl	800092c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077c0:	7bfa      	ldrb	r2, [r7, #15]
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe fe50 	bl	800646a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fe09 	bl	80063e8 <USBD_LL_Reset>
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fe4b 	bl	800648a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6812      	ldr	r2, [r2, #0]
 8007802:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007814:	4b04      	ldr	r3, [pc, #16]	; (8007828 <HAL_PCD_SuspendCallback+0x48>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	4a03      	ldr	r2, [pc, #12]	; (8007828 <HAL_PCD_SuspendCallback+0x48>)
 800781a:	f043 0306 	orr.w	r3, r3, #6
 800781e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed00 	.word	0xe000ed00

0800782c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fe3a 	bl	80064b4 <USBD_LL_Resume>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800785a:	78fa      	ldrb	r2, [r7, #3]
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fe65 	bl	800652e <USBD_LL_IsoOUTIncomplete>
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800787e:	78fa      	ldrb	r2, [r7, #3]
 8007880:	4611      	mov	r1, r2
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fe46 	bl	8006514 <USBD_LL_IsoINIncomplete>
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fe52 	bl	8006548 <USBD_LL_DevConnected>
}
 80078a4:	bf00      	nop
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fe4f 	bl	800655e <USBD_LL_DevDisconnected>
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d13c      	bne.n	8007952 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078d8:	4a20      	ldr	r2, [pc, #128]	; (800795c <USBD_LL_Init+0x94>)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a1e      	ldr	r2, [pc, #120]	; (800795c <USBD_LL_Init+0x94>)
 80078e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078e8:	4b1c      	ldr	r3, [pc, #112]	; (800795c <USBD_LL_Init+0x94>)
 80078ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078f0:	4b1a      	ldr	r3, [pc, #104]	; (800795c <USBD_LL_Init+0x94>)
 80078f2:	2204      	movs	r2, #4
 80078f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078f6:	4b19      	ldr	r3, [pc, #100]	; (800795c <USBD_LL_Init+0x94>)
 80078f8:	2202      	movs	r2, #2
 80078fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078fc:	4b17      	ldr	r3, [pc, #92]	; (800795c <USBD_LL_Init+0x94>)
 80078fe:	2200      	movs	r2, #0
 8007900:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007902:	4b16      	ldr	r3, [pc, #88]	; (800795c <USBD_LL_Init+0x94>)
 8007904:	2202      	movs	r2, #2
 8007906:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007908:	4b14      	ldr	r3, [pc, #80]	; (800795c <USBD_LL_Init+0x94>)
 800790a:	2200      	movs	r2, #0
 800790c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <USBD_LL_Init+0x94>)
 8007910:	2200      	movs	r2, #0
 8007912:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007914:	4b11      	ldr	r3, [pc, #68]	; (800795c <USBD_LL_Init+0x94>)
 8007916:	2200      	movs	r2, #0
 8007918:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800791a:	4b10      	ldr	r3, [pc, #64]	; (800795c <USBD_LL_Init+0x94>)
 800791c:	2201      	movs	r2, #1
 800791e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007920:	4b0e      	ldr	r3, [pc, #56]	; (800795c <USBD_LL_Init+0x94>)
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007926:	480d      	ldr	r0, [pc, #52]	; (800795c <USBD_LL_Init+0x94>)
 8007928:	f7fa f8fd 	bl	8001b26 <HAL_PCD_Init>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007932:	f7f8 fffb 	bl	800092c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007936:	2180      	movs	r1, #128	; 0x80
 8007938:	4808      	ldr	r0, [pc, #32]	; (800795c <USBD_LL_Init+0x94>)
 800793a:	f7fb fa5a 	bl	8002df2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800793e:	2240      	movs	r2, #64	; 0x40
 8007940:	2100      	movs	r1, #0
 8007942:	4806      	ldr	r0, [pc, #24]	; (800795c <USBD_LL_Init+0x94>)
 8007944:	f7fb fa0e 	bl	8002d64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007948:	2280      	movs	r2, #128	; 0x80
 800794a:	2101      	movs	r1, #1
 800794c:	4803      	ldr	r0, [pc, #12]	; (800795c <USBD_LL_Init+0x94>)
 800794e:	f7fb fa09 	bl	8002d64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20001838 	.word	0x20001838

08007960 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007976:	4618      	mov	r0, r3
 8007978:	f7fa f9f2 	bl	8001d60 <HAL_PCD_Start>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f92a 	bl	8007bdc <USBD_Get_USB_Status>
 8007988:	4603      	mov	r3, r0
 800798a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798c:	7bbb      	ldrb	r3, [r7, #14]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	4608      	mov	r0, r1
 80079a0:	4611      	mov	r1, r2
 80079a2:	461a      	mov	r2, r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	70fb      	strb	r3, [r7, #3]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70bb      	strb	r3, [r7, #2]
 80079ac:	4613      	mov	r3, r2
 80079ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079be:	78bb      	ldrb	r3, [r7, #2]
 80079c0:	883a      	ldrh	r2, [r7, #0]
 80079c2:	78f9      	ldrb	r1, [r7, #3]
 80079c4:	f7fa fdd6 	bl	8002574 <HAL_PCD_EP_Open>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f904 	bl	8007bdc <USBD_Get_USB_Status>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fa fe1f 	bl	8002644 <HAL_PCD_EP_Close>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f8e5 	bl	8007bdc <USBD_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fa fef7 	bl	8002832 <HAL_PCD_EP_SetStall>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f8c6 	bl	8007bdc <USBD_Get_USB_Status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fa ff3c 	bl	80028fa <HAL_PCD_EP_ClrStall>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f8a7 	bl	8007bdc <USBD_Get_USB_Status>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	da0b      	bge.n	8007ad0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	333e      	adds	r3, #62	; 0x3e
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	e00b      	b.n	8007ae8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ae6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fa fd09 	bl	800252a <HAL_PCD_SetAddress>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f85c 	bl	8007bdc <USBD_Get_USB_Status>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b50:	7af9      	ldrb	r1, [r7, #11]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	f7fa fe22 	bl	800279e <HAL_PCD_EP_Transmit>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f83b 	bl	8007bdc <USBD_Get_USB_Status>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	460b      	mov	r3, r1
 8007b82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b92:	7af9      	ldrb	r1, [r7, #11]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	f7fa fd9e 	bl	80026d8 <HAL_PCD_EP_Receive>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f81a 	bl	8007bdc <USBD_Get_USB_Status>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bac:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bc8:	78fa      	ldrb	r2, [r7, #3]
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fa fdce 	bl	800276e <HAL_PCD_EP_GetRxCount>
 8007bd2:	4603      	mov	r3, r0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d817      	bhi.n	8007c20 <USBD_Get_USB_Status+0x44>
 8007bf0:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <USBD_Get_USB_Status+0x1c>)
 8007bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf6:	bf00      	nop
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c0f 	.word	0x08007c0f
 8007c00:	08007c15 	.word	0x08007c15
 8007c04:	08007c1b 	.word	0x08007c1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0c:	e00b      	b.n	8007c26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	73fb      	strb	r3, [r7, #15]
    break;
 8007c12:	e008      	b.n	8007c26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
    break;
 8007c18:	e005      	b.n	8007c26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1e:	e002      	b.n	8007c26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	73fb      	strb	r3, [r7, #15]
    break;
 8007c24:	bf00      	nop
  }
  return usb_status;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <__errno>:
 8007c34:	4b01      	ldr	r3, [pc, #4]	; (8007c3c <__errno+0x8>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	20000180 	.word	0x20000180

08007c40 <__libc_init_array>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	4e0d      	ldr	r6, [pc, #52]	; (8007c78 <__libc_init_array+0x38>)
 8007c44:	4c0d      	ldr	r4, [pc, #52]	; (8007c7c <__libc_init_array+0x3c>)
 8007c46:	1ba4      	subs	r4, r4, r6
 8007c48:	10a4      	asrs	r4, r4, #2
 8007c4a:	2500      	movs	r5, #0
 8007c4c:	42a5      	cmp	r5, r4
 8007c4e:	d109      	bne.n	8007c64 <__libc_init_array+0x24>
 8007c50:	4e0b      	ldr	r6, [pc, #44]	; (8007c80 <__libc_init_array+0x40>)
 8007c52:	4c0c      	ldr	r4, [pc, #48]	; (8007c84 <__libc_init_array+0x44>)
 8007c54:	f000 fc36 	bl	80084c4 <_init>
 8007c58:	1ba4      	subs	r4, r4, r6
 8007c5a:	10a4      	asrs	r4, r4, #2
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	42a5      	cmp	r5, r4
 8007c60:	d105      	bne.n	8007c6e <__libc_init_array+0x2e>
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c68:	4798      	blx	r3
 8007c6a:	3501      	adds	r5, #1
 8007c6c:	e7ee      	b.n	8007c4c <__libc_init_array+0xc>
 8007c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c72:	4798      	blx	r3
 8007c74:	3501      	adds	r5, #1
 8007c76:	e7f2      	b.n	8007c5e <__libc_init_array+0x1e>
 8007c78:	08008588 	.word	0x08008588
 8007c7c:	08008588 	.word	0x08008588
 8007c80:	08008588 	.word	0x08008588
 8007c84:	0800858c 	.word	0x0800858c

08007c88 <malloc>:
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <malloc+0xc>)
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	f000 b861 	b.w	8007d54 <_malloc_r>
 8007c92:	bf00      	nop
 8007c94:	20000180 	.word	0x20000180

08007c98 <free>:
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <free+0xc>)
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	f000 b80b 	b.w	8007cb8 <_free_r>
 8007ca2:	bf00      	nop
 8007ca4:	20000180 	.word	0x20000180

08007ca8 <memset>:
 8007ca8:	4402      	add	r2, r0
 8007caa:	4603      	mov	r3, r0
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d100      	bne.n	8007cb2 <memset+0xa>
 8007cb0:	4770      	bx	lr
 8007cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb6:	e7f9      	b.n	8007cac <memset+0x4>

08007cb8 <_free_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4605      	mov	r5, r0
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d045      	beq.n	8007d4c <_free_r+0x94>
 8007cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc4:	1f0c      	subs	r4, r1, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfb8      	it	lt
 8007cca:	18e4      	addlt	r4, r4, r3
 8007ccc:	f000 f8cc 	bl	8007e68 <__malloc_lock>
 8007cd0:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <_free_r+0x98>)
 8007cd2:	6813      	ldr	r3, [r2, #0]
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	b933      	cbnz	r3, 8007ce6 <_free_r+0x2e>
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	6014      	str	r4, [r2, #0]
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce2:	f000 b8c2 	b.w	8007e6a <__malloc_unlock>
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	d90c      	bls.n	8007d04 <_free_r+0x4c>
 8007cea:	6821      	ldr	r1, [r4, #0]
 8007cec:	1862      	adds	r2, r4, r1
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	bf04      	itt	eq
 8007cf2:	681a      	ldreq	r2, [r3, #0]
 8007cf4:	685b      	ldreq	r3, [r3, #4]
 8007cf6:	6063      	str	r3, [r4, #4]
 8007cf8:	bf04      	itt	eq
 8007cfa:	1852      	addeq	r2, r2, r1
 8007cfc:	6022      	streq	r2, [r4, #0]
 8007cfe:	6004      	str	r4, [r0, #0]
 8007d00:	e7ec      	b.n	8007cdc <_free_r+0x24>
 8007d02:	4613      	mov	r3, r2
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	b10a      	cbz	r2, 8007d0c <_free_r+0x54>
 8007d08:	42a2      	cmp	r2, r4
 8007d0a:	d9fa      	bls.n	8007d02 <_free_r+0x4a>
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	1858      	adds	r0, r3, r1
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d10b      	bne.n	8007d2c <_free_r+0x74>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	4401      	add	r1, r0
 8007d18:	1858      	adds	r0, r3, r1
 8007d1a:	4282      	cmp	r2, r0
 8007d1c:	6019      	str	r1, [r3, #0]
 8007d1e:	d1dd      	bne.n	8007cdc <_free_r+0x24>
 8007d20:	6810      	ldr	r0, [r2, #0]
 8007d22:	6852      	ldr	r2, [r2, #4]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	4401      	add	r1, r0
 8007d28:	6019      	str	r1, [r3, #0]
 8007d2a:	e7d7      	b.n	8007cdc <_free_r+0x24>
 8007d2c:	d902      	bls.n	8007d34 <_free_r+0x7c>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	e7d3      	b.n	8007cdc <_free_r+0x24>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	1821      	adds	r1, r4, r0
 8007d38:	428a      	cmp	r2, r1
 8007d3a:	bf04      	itt	eq
 8007d3c:	6811      	ldreq	r1, [r2, #0]
 8007d3e:	6852      	ldreq	r2, [r2, #4]
 8007d40:	6062      	str	r2, [r4, #4]
 8007d42:	bf04      	itt	eq
 8007d44:	1809      	addeq	r1, r1, r0
 8007d46:	6021      	streq	r1, [r4, #0]
 8007d48:	605c      	str	r4, [r3, #4]
 8007d4a:	e7c7      	b.n	8007cdc <_free_r+0x24>
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000208 	.word	0x20000208

08007d54 <_malloc_r>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	1ccd      	adds	r5, r1, #3
 8007d58:	f025 0503 	bic.w	r5, r5, #3
 8007d5c:	3508      	adds	r5, #8
 8007d5e:	2d0c      	cmp	r5, #12
 8007d60:	bf38      	it	cc
 8007d62:	250c      	movcc	r5, #12
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	4606      	mov	r6, r0
 8007d68:	db01      	blt.n	8007d6e <_malloc_r+0x1a>
 8007d6a:	42a9      	cmp	r1, r5
 8007d6c:	d903      	bls.n	8007d76 <_malloc_r+0x22>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	2000      	movs	r0, #0
 8007d74:	bd70      	pop	{r4, r5, r6, pc}
 8007d76:	f000 f877 	bl	8007e68 <__malloc_lock>
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <_malloc_r+0xac>)
 8007d7c:	6814      	ldr	r4, [r2, #0]
 8007d7e:	4621      	mov	r1, r4
 8007d80:	b991      	cbnz	r1, 8007da8 <_malloc_r+0x54>
 8007d82:	4c20      	ldr	r4, [pc, #128]	; (8007e04 <_malloc_r+0xb0>)
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	b91b      	cbnz	r3, 8007d90 <_malloc_r+0x3c>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f000 f83d 	bl	8007e08 <_sbrk_r>
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	4629      	mov	r1, r5
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f838 	bl	8007e08 <_sbrk_r>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d124      	bne.n	8007de6 <_malloc_r+0x92>
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	6033      	str	r3, [r6, #0]
 8007da0:	4630      	mov	r0, r6
 8007da2:	f000 f862 	bl	8007e6a <__malloc_unlock>
 8007da6:	e7e4      	b.n	8007d72 <_malloc_r+0x1e>
 8007da8:	680b      	ldr	r3, [r1, #0]
 8007daa:	1b5b      	subs	r3, r3, r5
 8007dac:	d418      	bmi.n	8007de0 <_malloc_r+0x8c>
 8007dae:	2b0b      	cmp	r3, #11
 8007db0:	d90f      	bls.n	8007dd2 <_malloc_r+0x7e>
 8007db2:	600b      	str	r3, [r1, #0]
 8007db4:	50cd      	str	r5, [r1, r3]
 8007db6:	18cc      	adds	r4, r1, r3
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 f856 	bl	8007e6a <__malloc_unlock>
 8007dbe:	f104 000b 	add.w	r0, r4, #11
 8007dc2:	1d23      	adds	r3, r4, #4
 8007dc4:	f020 0007 	bic.w	r0, r0, #7
 8007dc8:	1ac3      	subs	r3, r0, r3
 8007dca:	d0d3      	beq.n	8007d74 <_malloc_r+0x20>
 8007dcc:	425a      	negs	r2, r3
 8007dce:	50e2      	str	r2, [r4, r3]
 8007dd0:	e7d0      	b.n	8007d74 <_malloc_r+0x20>
 8007dd2:	428c      	cmp	r4, r1
 8007dd4:	684b      	ldr	r3, [r1, #4]
 8007dd6:	bf16      	itet	ne
 8007dd8:	6063      	strne	r3, [r4, #4]
 8007dda:	6013      	streq	r3, [r2, #0]
 8007ddc:	460c      	movne	r4, r1
 8007dde:	e7eb      	b.n	8007db8 <_malloc_r+0x64>
 8007de0:	460c      	mov	r4, r1
 8007de2:	6849      	ldr	r1, [r1, #4]
 8007de4:	e7cc      	b.n	8007d80 <_malloc_r+0x2c>
 8007de6:	1cc4      	adds	r4, r0, #3
 8007de8:	f024 0403 	bic.w	r4, r4, #3
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d005      	beq.n	8007dfc <_malloc_r+0xa8>
 8007df0:	1a21      	subs	r1, r4, r0
 8007df2:	4630      	mov	r0, r6
 8007df4:	f000 f808 	bl	8007e08 <_sbrk_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d0cf      	beq.n	8007d9c <_malloc_r+0x48>
 8007dfc:	6025      	str	r5, [r4, #0]
 8007dfe:	e7db      	b.n	8007db8 <_malloc_r+0x64>
 8007e00:	20000208 	.word	0x20000208
 8007e04:	2000020c 	.word	0x2000020c

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4c06      	ldr	r4, [pc, #24]	; (8007e24 <_sbrk_r+0x1c>)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4605      	mov	r5, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	f7f8 fdfe 	bl	8000a14 <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20001c40 	.word	0x20001c40

08007e28 <siprintf>:
 8007e28:	b40e      	push	{r1, r2, r3}
 8007e2a:	b500      	push	{lr}
 8007e2c:	b09c      	sub	sp, #112	; 0x70
 8007e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e30:	9002      	str	r0, [sp, #8]
 8007e32:	9006      	str	r0, [sp, #24]
 8007e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e38:	4809      	ldr	r0, [pc, #36]	; (8007e60 <siprintf+0x38>)
 8007e3a:	9107      	str	r1, [sp, #28]
 8007e3c:	9104      	str	r1, [sp, #16]
 8007e3e:	4909      	ldr	r1, [pc, #36]	; (8007e64 <siprintf+0x3c>)
 8007e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e44:	9105      	str	r1, [sp, #20]
 8007e46:	6800      	ldr	r0, [r0, #0]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	a902      	add	r1, sp, #8
 8007e4c:	f000 f868 	bl	8007f20 <_svfiprintf_r>
 8007e50:	9b02      	ldr	r3, [sp, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	b01c      	add	sp, #112	; 0x70
 8007e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e5c:	b003      	add	sp, #12
 8007e5e:	4770      	bx	lr
 8007e60:	20000180 	.word	0x20000180
 8007e64:	ffff0208 	.word	0xffff0208

08007e68 <__malloc_lock>:
 8007e68:	4770      	bx	lr

08007e6a <__malloc_unlock>:
 8007e6a:	4770      	bx	lr

08007e6c <__ssputs_r>:
 8007e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	688e      	ldr	r6, [r1, #8]
 8007e72:	429e      	cmp	r6, r3
 8007e74:	4682      	mov	sl, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	4690      	mov	r8, r2
 8007e7a:	4699      	mov	r9, r3
 8007e7c:	d837      	bhi.n	8007eee <__ssputs_r+0x82>
 8007e7e:	898a      	ldrh	r2, [r1, #12]
 8007e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e84:	d031      	beq.n	8007eea <__ssputs_r+0x7e>
 8007e86:	6825      	ldr	r5, [r4, #0]
 8007e88:	6909      	ldr	r1, [r1, #16]
 8007e8a:	1a6f      	subs	r7, r5, r1
 8007e8c:	6965      	ldr	r5, [r4, #20]
 8007e8e:	2302      	movs	r3, #2
 8007e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e94:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e98:	f109 0301 	add.w	r3, r9, #1
 8007e9c:	443b      	add	r3, r7
 8007e9e:	429d      	cmp	r5, r3
 8007ea0:	bf38      	it	cc
 8007ea2:	461d      	movcc	r5, r3
 8007ea4:	0553      	lsls	r3, r2, #21
 8007ea6:	d530      	bpl.n	8007f0a <__ssputs_r+0x9e>
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7ff ff53 	bl	8007d54 <_malloc_r>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	b950      	cbnz	r0, 8007ec8 <__ssputs_r+0x5c>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	f8ca 3000 	str.w	r3, [sl]
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	463a      	mov	r2, r7
 8007eca:	6921      	ldr	r1, [r4, #16]
 8007ecc:	f000 faa8 	bl	8008420 <memcpy>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	6126      	str	r6, [r4, #16]
 8007ede:	6165      	str	r5, [r4, #20]
 8007ee0:	443e      	add	r6, r7
 8007ee2:	1bed      	subs	r5, r5, r7
 8007ee4:	6026      	str	r6, [r4, #0]
 8007ee6:	60a5      	str	r5, [r4, #8]
 8007ee8:	464e      	mov	r6, r9
 8007eea:	454e      	cmp	r6, r9
 8007eec:	d900      	bls.n	8007ef0 <__ssputs_r+0x84>
 8007eee:	464e      	mov	r6, r9
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	f000 fa9e 	bl	8008436 <memmove>
 8007efa:	68a3      	ldr	r3, [r4, #8]
 8007efc:	1b9b      	subs	r3, r3, r6
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	441e      	add	r6, r3
 8007f04:	6026      	str	r6, [r4, #0]
 8007f06:	2000      	movs	r0, #0
 8007f08:	e7dc      	b.n	8007ec4 <__ssputs_r+0x58>
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	f000 faac 	bl	8008468 <_realloc_r>
 8007f10:	4606      	mov	r6, r0
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d1e2      	bne.n	8007edc <__ssputs_r+0x70>
 8007f16:	6921      	ldr	r1, [r4, #16]
 8007f18:	4650      	mov	r0, sl
 8007f1a:	f7ff fecd 	bl	8007cb8 <_free_r>
 8007f1e:	e7c8      	b.n	8007eb2 <__ssputs_r+0x46>

08007f20 <_svfiprintf_r>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	461d      	mov	r5, r3
 8007f26:	898b      	ldrh	r3, [r1, #12]
 8007f28:	061f      	lsls	r7, r3, #24
 8007f2a:	b09d      	sub	sp, #116	; 0x74
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4616      	mov	r6, r2
 8007f32:	d50f      	bpl.n	8007f54 <_svfiprintf_r+0x34>
 8007f34:	690b      	ldr	r3, [r1, #16]
 8007f36:	b96b      	cbnz	r3, 8007f54 <_svfiprintf_r+0x34>
 8007f38:	2140      	movs	r1, #64	; 0x40
 8007f3a:	f7ff ff0b 	bl	8007d54 <_malloc_r>
 8007f3e:	6020      	str	r0, [r4, #0]
 8007f40:	6120      	str	r0, [r4, #16]
 8007f42:	b928      	cbnz	r0, 8007f50 <_svfiprintf_r+0x30>
 8007f44:	230c      	movs	r3, #12
 8007f46:	f8c8 3000 	str.w	r3, [r8]
 8007f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4e:	e0c8      	b.n	80080e2 <_svfiprintf_r+0x1c2>
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	6163      	str	r3, [r4, #20]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9309      	str	r3, [sp, #36]	; 0x24
 8007f58:	2320      	movs	r3, #32
 8007f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f5e:	2330      	movs	r3, #48	; 0x30
 8007f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f64:	9503      	str	r5, [sp, #12]
 8007f66:	f04f 0b01 	mov.w	fp, #1
 8007f6a:	4637      	mov	r7, r6
 8007f6c:	463d      	mov	r5, r7
 8007f6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f72:	b10b      	cbz	r3, 8007f78 <_svfiprintf_r+0x58>
 8007f74:	2b25      	cmp	r3, #37	; 0x25
 8007f76:	d13e      	bne.n	8007ff6 <_svfiprintf_r+0xd6>
 8007f78:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f7c:	d00b      	beq.n	8007f96 <_svfiprintf_r+0x76>
 8007f7e:	4653      	mov	r3, sl
 8007f80:	4632      	mov	r2, r6
 8007f82:	4621      	mov	r1, r4
 8007f84:	4640      	mov	r0, r8
 8007f86:	f7ff ff71 	bl	8007e6c <__ssputs_r>
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f000 80a4 	beq.w	80080d8 <_svfiprintf_r+0x1b8>
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	4453      	add	r3, sl
 8007f94:	9309      	str	r3, [sp, #36]	; 0x24
 8007f96:	783b      	ldrb	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 809d 	beq.w	80080d8 <_svfiprintf_r+0x1b8>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	9307      	str	r3, [sp, #28]
 8007fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8007fb2:	462f      	mov	r7, r5
 8007fb4:	2205      	movs	r2, #5
 8007fb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007fba:	4850      	ldr	r0, [pc, #320]	; (80080fc <_svfiprintf_r+0x1dc>)
 8007fbc:	f7f8 f910 	bl	80001e0 <memchr>
 8007fc0:	9b04      	ldr	r3, [sp, #16]
 8007fc2:	b9d0      	cbnz	r0, 8007ffa <_svfiprintf_r+0xda>
 8007fc4:	06d9      	lsls	r1, r3, #27
 8007fc6:	bf44      	itt	mi
 8007fc8:	2220      	movmi	r2, #32
 8007fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fce:	071a      	lsls	r2, r3, #28
 8007fd0:	bf44      	itt	mi
 8007fd2:	222b      	movmi	r2, #43	; 0x2b
 8007fd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fd8:	782a      	ldrb	r2, [r5, #0]
 8007fda:	2a2a      	cmp	r2, #42	; 0x2a
 8007fdc:	d015      	beq.n	800800a <_svfiprintf_r+0xea>
 8007fde:	9a07      	ldr	r2, [sp, #28]
 8007fe0:	462f      	mov	r7, r5
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	250a      	movs	r5, #10
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fec:	3b30      	subs	r3, #48	; 0x30
 8007fee:	2b09      	cmp	r3, #9
 8007ff0:	d94d      	bls.n	800808e <_svfiprintf_r+0x16e>
 8007ff2:	b1b8      	cbz	r0, 8008024 <_svfiprintf_r+0x104>
 8007ff4:	e00f      	b.n	8008016 <_svfiprintf_r+0xf6>
 8007ff6:	462f      	mov	r7, r5
 8007ff8:	e7b8      	b.n	8007f6c <_svfiprintf_r+0x4c>
 8007ffa:	4a40      	ldr	r2, [pc, #256]	; (80080fc <_svfiprintf_r+0x1dc>)
 8007ffc:	1a80      	subs	r0, r0, r2
 8007ffe:	fa0b f000 	lsl.w	r0, fp, r0
 8008002:	4318      	orrs	r0, r3
 8008004:	9004      	str	r0, [sp, #16]
 8008006:	463d      	mov	r5, r7
 8008008:	e7d3      	b.n	8007fb2 <_svfiprintf_r+0x92>
 800800a:	9a03      	ldr	r2, [sp, #12]
 800800c:	1d11      	adds	r1, r2, #4
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	9103      	str	r1, [sp, #12]
 8008012:	2a00      	cmp	r2, #0
 8008014:	db01      	blt.n	800801a <_svfiprintf_r+0xfa>
 8008016:	9207      	str	r2, [sp, #28]
 8008018:	e004      	b.n	8008024 <_svfiprintf_r+0x104>
 800801a:	4252      	negs	r2, r2
 800801c:	f043 0302 	orr.w	r3, r3, #2
 8008020:	9207      	str	r2, [sp, #28]
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	783b      	ldrb	r3, [r7, #0]
 8008026:	2b2e      	cmp	r3, #46	; 0x2e
 8008028:	d10c      	bne.n	8008044 <_svfiprintf_r+0x124>
 800802a:	787b      	ldrb	r3, [r7, #1]
 800802c:	2b2a      	cmp	r3, #42	; 0x2a
 800802e:	d133      	bne.n	8008098 <_svfiprintf_r+0x178>
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	9203      	str	r2, [sp, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfb8      	it	lt
 800803c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008040:	3702      	adds	r7, #2
 8008042:	9305      	str	r3, [sp, #20]
 8008044:	4d2e      	ldr	r5, [pc, #184]	; (8008100 <_svfiprintf_r+0x1e0>)
 8008046:	7839      	ldrb	r1, [r7, #0]
 8008048:	2203      	movs	r2, #3
 800804a:	4628      	mov	r0, r5
 800804c:	f7f8 f8c8 	bl	80001e0 <memchr>
 8008050:	b138      	cbz	r0, 8008062 <_svfiprintf_r+0x142>
 8008052:	2340      	movs	r3, #64	; 0x40
 8008054:	1b40      	subs	r0, r0, r5
 8008056:	fa03 f000 	lsl.w	r0, r3, r0
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	4303      	orrs	r3, r0
 800805e:	3701      	adds	r7, #1
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	7839      	ldrb	r1, [r7, #0]
 8008064:	4827      	ldr	r0, [pc, #156]	; (8008104 <_svfiprintf_r+0x1e4>)
 8008066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800806a:	2206      	movs	r2, #6
 800806c:	1c7e      	adds	r6, r7, #1
 800806e:	f7f8 f8b7 	bl	80001e0 <memchr>
 8008072:	2800      	cmp	r0, #0
 8008074:	d038      	beq.n	80080e8 <_svfiprintf_r+0x1c8>
 8008076:	4b24      	ldr	r3, [pc, #144]	; (8008108 <_svfiprintf_r+0x1e8>)
 8008078:	bb13      	cbnz	r3, 80080c0 <_svfiprintf_r+0x1a0>
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	3307      	adds	r3, #7
 800807e:	f023 0307 	bic.w	r3, r3, #7
 8008082:	3308      	adds	r3, #8
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	444b      	add	r3, r9
 800808a:	9309      	str	r3, [sp, #36]	; 0x24
 800808c:	e76d      	b.n	8007f6a <_svfiprintf_r+0x4a>
 800808e:	fb05 3202 	mla	r2, r5, r2, r3
 8008092:	2001      	movs	r0, #1
 8008094:	460f      	mov	r7, r1
 8008096:	e7a6      	b.n	8007fe6 <_svfiprintf_r+0xc6>
 8008098:	2300      	movs	r3, #0
 800809a:	3701      	adds	r7, #1
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	4619      	mov	r1, r3
 80080a0:	250a      	movs	r5, #10
 80080a2:	4638      	mov	r0, r7
 80080a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a8:	3a30      	subs	r2, #48	; 0x30
 80080aa:	2a09      	cmp	r2, #9
 80080ac:	d903      	bls.n	80080b6 <_svfiprintf_r+0x196>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0c8      	beq.n	8008044 <_svfiprintf_r+0x124>
 80080b2:	9105      	str	r1, [sp, #20]
 80080b4:	e7c6      	b.n	8008044 <_svfiprintf_r+0x124>
 80080b6:	fb05 2101 	mla	r1, r5, r1, r2
 80080ba:	2301      	movs	r3, #1
 80080bc:	4607      	mov	r7, r0
 80080be:	e7f0      	b.n	80080a2 <_svfiprintf_r+0x182>
 80080c0:	ab03      	add	r3, sp, #12
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4622      	mov	r2, r4
 80080c6:	4b11      	ldr	r3, [pc, #68]	; (800810c <_svfiprintf_r+0x1ec>)
 80080c8:	a904      	add	r1, sp, #16
 80080ca:	4640      	mov	r0, r8
 80080cc:	f3af 8000 	nop.w
 80080d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80080d4:	4681      	mov	r9, r0
 80080d6:	d1d6      	bne.n	8008086 <_svfiprintf_r+0x166>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	065b      	lsls	r3, r3, #25
 80080dc:	f53f af35 	bmi.w	8007f4a <_svfiprintf_r+0x2a>
 80080e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080e2:	b01d      	add	sp, #116	; 0x74
 80080e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	4622      	mov	r2, r4
 80080ee:	4b07      	ldr	r3, [pc, #28]	; (800810c <_svfiprintf_r+0x1ec>)
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	4640      	mov	r0, r8
 80080f4:	f000 f882 	bl	80081fc <_printf_i>
 80080f8:	e7ea      	b.n	80080d0 <_svfiprintf_r+0x1b0>
 80080fa:	bf00      	nop
 80080fc:	0800854c 	.word	0x0800854c
 8008100:	08008552 	.word	0x08008552
 8008104:	08008556 	.word	0x08008556
 8008108:	00000000 	.word	0x00000000
 800810c:	08007e6d 	.word	0x08007e6d

08008110 <_printf_common>:
 8008110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	4691      	mov	r9, r2
 8008116:	461f      	mov	r7, r3
 8008118:	688a      	ldr	r2, [r1, #8]
 800811a:	690b      	ldr	r3, [r1, #16]
 800811c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008120:	4293      	cmp	r3, r2
 8008122:	bfb8      	it	lt
 8008124:	4613      	movlt	r3, r2
 8008126:	f8c9 3000 	str.w	r3, [r9]
 800812a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800812e:	4606      	mov	r6, r0
 8008130:	460c      	mov	r4, r1
 8008132:	b112      	cbz	r2, 800813a <_printf_common+0x2a>
 8008134:	3301      	adds	r3, #1
 8008136:	f8c9 3000 	str.w	r3, [r9]
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	0699      	lsls	r1, r3, #26
 800813e:	bf42      	ittt	mi
 8008140:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008144:	3302      	addmi	r3, #2
 8008146:	f8c9 3000 	strmi.w	r3, [r9]
 800814a:	6825      	ldr	r5, [r4, #0]
 800814c:	f015 0506 	ands.w	r5, r5, #6
 8008150:	d107      	bne.n	8008162 <_printf_common+0x52>
 8008152:	f104 0a19 	add.w	sl, r4, #25
 8008156:	68e3      	ldr	r3, [r4, #12]
 8008158:	f8d9 2000 	ldr.w	r2, [r9]
 800815c:	1a9b      	subs	r3, r3, r2
 800815e:	42ab      	cmp	r3, r5
 8008160:	dc28      	bgt.n	80081b4 <_printf_common+0xa4>
 8008162:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	3300      	adds	r3, #0
 800816a:	bf18      	it	ne
 800816c:	2301      	movne	r3, #1
 800816e:	0692      	lsls	r2, r2, #26
 8008170:	d42d      	bmi.n	80081ce <_printf_common+0xbe>
 8008172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008176:	4639      	mov	r1, r7
 8008178:	4630      	mov	r0, r6
 800817a:	47c0      	blx	r8
 800817c:	3001      	adds	r0, #1
 800817e:	d020      	beq.n	80081c2 <_printf_common+0xb2>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	68e5      	ldr	r5, [r4, #12]
 8008184:	f8d9 2000 	ldr.w	r2, [r9]
 8008188:	f003 0306 	and.w	r3, r3, #6
 800818c:	2b04      	cmp	r3, #4
 800818e:	bf08      	it	eq
 8008190:	1aad      	subeq	r5, r5, r2
 8008192:	68a3      	ldr	r3, [r4, #8]
 8008194:	6922      	ldr	r2, [r4, #16]
 8008196:	bf0c      	ite	eq
 8008198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800819c:	2500      	movne	r5, #0
 800819e:	4293      	cmp	r3, r2
 80081a0:	bfc4      	itt	gt
 80081a2:	1a9b      	subgt	r3, r3, r2
 80081a4:	18ed      	addgt	r5, r5, r3
 80081a6:	f04f 0900 	mov.w	r9, #0
 80081aa:	341a      	adds	r4, #26
 80081ac:	454d      	cmp	r5, r9
 80081ae:	d11a      	bne.n	80081e6 <_printf_common+0xd6>
 80081b0:	2000      	movs	r0, #0
 80081b2:	e008      	b.n	80081c6 <_printf_common+0xb6>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4652      	mov	r2, sl
 80081b8:	4639      	mov	r1, r7
 80081ba:	4630      	mov	r0, r6
 80081bc:	47c0      	blx	r8
 80081be:	3001      	adds	r0, #1
 80081c0:	d103      	bne.n	80081ca <_printf_common+0xba>
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	3501      	adds	r5, #1
 80081cc:	e7c3      	b.n	8008156 <_printf_common+0x46>
 80081ce:	18e1      	adds	r1, r4, r3
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	2030      	movs	r0, #48	; 0x30
 80081d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081d8:	4422      	add	r2, r4
 80081da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081e2:	3302      	adds	r3, #2
 80081e4:	e7c5      	b.n	8008172 <_printf_common+0x62>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4622      	mov	r2, r4
 80081ea:	4639      	mov	r1, r7
 80081ec:	4630      	mov	r0, r6
 80081ee:	47c0      	blx	r8
 80081f0:	3001      	adds	r0, #1
 80081f2:	d0e6      	beq.n	80081c2 <_printf_common+0xb2>
 80081f4:	f109 0901 	add.w	r9, r9, #1
 80081f8:	e7d8      	b.n	80081ac <_printf_common+0x9c>
	...

080081fc <_printf_i>:
 80081fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008200:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008204:	460c      	mov	r4, r1
 8008206:	7e09      	ldrb	r1, [r1, #24]
 8008208:	b085      	sub	sp, #20
 800820a:	296e      	cmp	r1, #110	; 0x6e
 800820c:	4617      	mov	r7, r2
 800820e:	4606      	mov	r6, r0
 8008210:	4698      	mov	r8, r3
 8008212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008214:	f000 80b3 	beq.w	800837e <_printf_i+0x182>
 8008218:	d822      	bhi.n	8008260 <_printf_i+0x64>
 800821a:	2963      	cmp	r1, #99	; 0x63
 800821c:	d036      	beq.n	800828c <_printf_i+0x90>
 800821e:	d80a      	bhi.n	8008236 <_printf_i+0x3a>
 8008220:	2900      	cmp	r1, #0
 8008222:	f000 80b9 	beq.w	8008398 <_printf_i+0x19c>
 8008226:	2958      	cmp	r1, #88	; 0x58
 8008228:	f000 8083 	beq.w	8008332 <_printf_i+0x136>
 800822c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008230:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008234:	e032      	b.n	800829c <_printf_i+0xa0>
 8008236:	2964      	cmp	r1, #100	; 0x64
 8008238:	d001      	beq.n	800823e <_printf_i+0x42>
 800823a:	2969      	cmp	r1, #105	; 0x69
 800823c:	d1f6      	bne.n	800822c <_printf_i+0x30>
 800823e:	6820      	ldr	r0, [r4, #0]
 8008240:	6813      	ldr	r3, [r2, #0]
 8008242:	0605      	lsls	r5, r0, #24
 8008244:	f103 0104 	add.w	r1, r3, #4
 8008248:	d52a      	bpl.n	80082a0 <_printf_i+0xa4>
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6011      	str	r1, [r2, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	da03      	bge.n	800825a <_printf_i+0x5e>
 8008252:	222d      	movs	r2, #45	; 0x2d
 8008254:	425b      	negs	r3, r3
 8008256:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800825a:	486f      	ldr	r0, [pc, #444]	; (8008418 <_printf_i+0x21c>)
 800825c:	220a      	movs	r2, #10
 800825e:	e039      	b.n	80082d4 <_printf_i+0xd8>
 8008260:	2973      	cmp	r1, #115	; 0x73
 8008262:	f000 809d 	beq.w	80083a0 <_printf_i+0x1a4>
 8008266:	d808      	bhi.n	800827a <_printf_i+0x7e>
 8008268:	296f      	cmp	r1, #111	; 0x6f
 800826a:	d020      	beq.n	80082ae <_printf_i+0xb2>
 800826c:	2970      	cmp	r1, #112	; 0x70
 800826e:	d1dd      	bne.n	800822c <_printf_i+0x30>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	f043 0320 	orr.w	r3, r3, #32
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	e003      	b.n	8008282 <_printf_i+0x86>
 800827a:	2975      	cmp	r1, #117	; 0x75
 800827c:	d017      	beq.n	80082ae <_printf_i+0xb2>
 800827e:	2978      	cmp	r1, #120	; 0x78
 8008280:	d1d4      	bne.n	800822c <_printf_i+0x30>
 8008282:	2378      	movs	r3, #120	; 0x78
 8008284:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008288:	4864      	ldr	r0, [pc, #400]	; (800841c <_printf_i+0x220>)
 800828a:	e055      	b.n	8008338 <_printf_i+0x13c>
 800828c:	6813      	ldr	r3, [r2, #0]
 800828e:	1d19      	adds	r1, r3, #4
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6011      	str	r1, [r2, #0]
 8008294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800829c:	2301      	movs	r3, #1
 800829e:	e08c      	b.n	80083ba <_printf_i+0x1be>
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6011      	str	r1, [r2, #0]
 80082a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082a8:	bf18      	it	ne
 80082aa:	b21b      	sxthne	r3, r3
 80082ac:	e7cf      	b.n	800824e <_printf_i+0x52>
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	6825      	ldr	r5, [r4, #0]
 80082b2:	1d18      	adds	r0, r3, #4
 80082b4:	6010      	str	r0, [r2, #0]
 80082b6:	0628      	lsls	r0, r5, #24
 80082b8:	d501      	bpl.n	80082be <_printf_i+0xc2>
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	e002      	b.n	80082c4 <_printf_i+0xc8>
 80082be:	0668      	lsls	r0, r5, #25
 80082c0:	d5fb      	bpl.n	80082ba <_printf_i+0xbe>
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	4854      	ldr	r0, [pc, #336]	; (8008418 <_printf_i+0x21c>)
 80082c6:	296f      	cmp	r1, #111	; 0x6f
 80082c8:	bf14      	ite	ne
 80082ca:	220a      	movne	r2, #10
 80082cc:	2208      	moveq	r2, #8
 80082ce:	2100      	movs	r1, #0
 80082d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082d4:	6865      	ldr	r5, [r4, #4]
 80082d6:	60a5      	str	r5, [r4, #8]
 80082d8:	2d00      	cmp	r5, #0
 80082da:	f2c0 8095 	blt.w	8008408 <_printf_i+0x20c>
 80082de:	6821      	ldr	r1, [r4, #0]
 80082e0:	f021 0104 	bic.w	r1, r1, #4
 80082e4:	6021      	str	r1, [r4, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d13d      	bne.n	8008366 <_printf_i+0x16a>
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	f040 808e 	bne.w	800840c <_printf_i+0x210>
 80082f0:	4665      	mov	r5, ip
 80082f2:	2a08      	cmp	r2, #8
 80082f4:	d10b      	bne.n	800830e <_printf_i+0x112>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	07db      	lsls	r3, r3, #31
 80082fa:	d508      	bpl.n	800830e <_printf_i+0x112>
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	bfde      	ittt	le
 8008304:	2330      	movle	r3, #48	; 0x30
 8008306:	f805 3c01 	strble.w	r3, [r5, #-1]
 800830a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800830e:	ebac 0305 	sub.w	r3, ip, r5
 8008312:	6123      	str	r3, [r4, #16]
 8008314:	f8cd 8000 	str.w	r8, [sp]
 8008318:	463b      	mov	r3, r7
 800831a:	aa03      	add	r2, sp, #12
 800831c:	4621      	mov	r1, r4
 800831e:	4630      	mov	r0, r6
 8008320:	f7ff fef6 	bl	8008110 <_printf_common>
 8008324:	3001      	adds	r0, #1
 8008326:	d14d      	bne.n	80083c4 <_printf_i+0x1c8>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b005      	add	sp, #20
 800832e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008332:	4839      	ldr	r0, [pc, #228]	; (8008418 <_printf_i+0x21c>)
 8008334:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008338:	6813      	ldr	r3, [r2, #0]
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	1d1d      	adds	r5, r3, #4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6015      	str	r5, [r2, #0]
 8008342:	060a      	lsls	r2, r1, #24
 8008344:	d50b      	bpl.n	800835e <_printf_i+0x162>
 8008346:	07ca      	lsls	r2, r1, #31
 8008348:	bf44      	itt	mi
 800834a:	f041 0120 	orrmi.w	r1, r1, #32
 800834e:	6021      	strmi	r1, [r4, #0]
 8008350:	b91b      	cbnz	r3, 800835a <_printf_i+0x15e>
 8008352:	6822      	ldr	r2, [r4, #0]
 8008354:	f022 0220 	bic.w	r2, r2, #32
 8008358:	6022      	str	r2, [r4, #0]
 800835a:	2210      	movs	r2, #16
 800835c:	e7b7      	b.n	80082ce <_printf_i+0xd2>
 800835e:	064d      	lsls	r5, r1, #25
 8008360:	bf48      	it	mi
 8008362:	b29b      	uxthmi	r3, r3
 8008364:	e7ef      	b.n	8008346 <_printf_i+0x14a>
 8008366:	4665      	mov	r5, ip
 8008368:	fbb3 f1f2 	udiv	r1, r3, r2
 800836c:	fb02 3311 	mls	r3, r2, r1, r3
 8008370:	5cc3      	ldrb	r3, [r0, r3]
 8008372:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008376:	460b      	mov	r3, r1
 8008378:	2900      	cmp	r1, #0
 800837a:	d1f5      	bne.n	8008368 <_printf_i+0x16c>
 800837c:	e7b9      	b.n	80082f2 <_printf_i+0xf6>
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	6825      	ldr	r5, [r4, #0]
 8008382:	6961      	ldr	r1, [r4, #20]
 8008384:	1d18      	adds	r0, r3, #4
 8008386:	6010      	str	r0, [r2, #0]
 8008388:	0628      	lsls	r0, r5, #24
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	d501      	bpl.n	8008392 <_printf_i+0x196>
 800838e:	6019      	str	r1, [r3, #0]
 8008390:	e002      	b.n	8008398 <_printf_i+0x19c>
 8008392:	066a      	lsls	r2, r5, #25
 8008394:	d5fb      	bpl.n	800838e <_printf_i+0x192>
 8008396:	8019      	strh	r1, [r3, #0]
 8008398:	2300      	movs	r3, #0
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	4665      	mov	r5, ip
 800839e:	e7b9      	b.n	8008314 <_printf_i+0x118>
 80083a0:	6813      	ldr	r3, [r2, #0]
 80083a2:	1d19      	adds	r1, r3, #4
 80083a4:	6011      	str	r1, [r2, #0]
 80083a6:	681d      	ldr	r5, [r3, #0]
 80083a8:	6862      	ldr	r2, [r4, #4]
 80083aa:	2100      	movs	r1, #0
 80083ac:	4628      	mov	r0, r5
 80083ae:	f7f7 ff17 	bl	80001e0 <memchr>
 80083b2:	b108      	cbz	r0, 80083b8 <_printf_i+0x1bc>
 80083b4:	1b40      	subs	r0, r0, r5
 80083b6:	6060      	str	r0, [r4, #4]
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	6123      	str	r3, [r4, #16]
 80083bc:	2300      	movs	r3, #0
 80083be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c2:	e7a7      	b.n	8008314 <_printf_i+0x118>
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	462a      	mov	r2, r5
 80083c8:	4639      	mov	r1, r7
 80083ca:	4630      	mov	r0, r6
 80083cc:	47c0      	blx	r8
 80083ce:	3001      	adds	r0, #1
 80083d0:	d0aa      	beq.n	8008328 <_printf_i+0x12c>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	079b      	lsls	r3, r3, #30
 80083d6:	d413      	bmi.n	8008400 <_printf_i+0x204>
 80083d8:	68e0      	ldr	r0, [r4, #12]
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	4298      	cmp	r0, r3
 80083de:	bfb8      	it	lt
 80083e0:	4618      	movlt	r0, r3
 80083e2:	e7a3      	b.n	800832c <_printf_i+0x130>
 80083e4:	2301      	movs	r3, #1
 80083e6:	464a      	mov	r2, r9
 80083e8:	4639      	mov	r1, r7
 80083ea:	4630      	mov	r0, r6
 80083ec:	47c0      	blx	r8
 80083ee:	3001      	adds	r0, #1
 80083f0:	d09a      	beq.n	8008328 <_printf_i+0x12c>
 80083f2:	3501      	adds	r5, #1
 80083f4:	68e3      	ldr	r3, [r4, #12]
 80083f6:	9a03      	ldr	r2, [sp, #12]
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	42ab      	cmp	r3, r5
 80083fc:	dcf2      	bgt.n	80083e4 <_printf_i+0x1e8>
 80083fe:	e7eb      	b.n	80083d8 <_printf_i+0x1dc>
 8008400:	2500      	movs	r5, #0
 8008402:	f104 0919 	add.w	r9, r4, #25
 8008406:	e7f5      	b.n	80083f4 <_printf_i+0x1f8>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1ac      	bne.n	8008366 <_printf_i+0x16a>
 800840c:	7803      	ldrb	r3, [r0, #0]
 800840e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008412:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008416:	e76c      	b.n	80082f2 <_printf_i+0xf6>
 8008418:	0800855d 	.word	0x0800855d
 800841c:	0800856e 	.word	0x0800856e

08008420 <memcpy>:
 8008420:	b510      	push	{r4, lr}
 8008422:	1e43      	subs	r3, r0, #1
 8008424:	440a      	add	r2, r1
 8008426:	4291      	cmp	r1, r2
 8008428:	d100      	bne.n	800842c <memcpy+0xc>
 800842a:	bd10      	pop	{r4, pc}
 800842c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008434:	e7f7      	b.n	8008426 <memcpy+0x6>

08008436 <memmove>:
 8008436:	4288      	cmp	r0, r1
 8008438:	b510      	push	{r4, lr}
 800843a:	eb01 0302 	add.w	r3, r1, r2
 800843e:	d807      	bhi.n	8008450 <memmove+0x1a>
 8008440:	1e42      	subs	r2, r0, #1
 8008442:	4299      	cmp	r1, r3
 8008444:	d00a      	beq.n	800845c <memmove+0x26>
 8008446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800844a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800844e:	e7f8      	b.n	8008442 <memmove+0xc>
 8008450:	4283      	cmp	r3, r0
 8008452:	d9f5      	bls.n	8008440 <memmove+0xa>
 8008454:	1881      	adds	r1, r0, r2
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	42d3      	cmn	r3, r2
 800845a:	d100      	bne.n	800845e <memmove+0x28>
 800845c:	bd10      	pop	{r4, pc}
 800845e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008462:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008466:	e7f7      	b.n	8008458 <memmove+0x22>

08008468 <_realloc_r>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	4607      	mov	r7, r0
 800846c:	4614      	mov	r4, r2
 800846e:	460e      	mov	r6, r1
 8008470:	b921      	cbnz	r1, 800847c <_realloc_r+0x14>
 8008472:	4611      	mov	r1, r2
 8008474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008478:	f7ff bc6c 	b.w	8007d54 <_malloc_r>
 800847c:	b922      	cbnz	r2, 8008488 <_realloc_r+0x20>
 800847e:	f7ff fc1b 	bl	8007cb8 <_free_r>
 8008482:	4625      	mov	r5, r4
 8008484:	4628      	mov	r0, r5
 8008486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008488:	f000 f814 	bl	80084b4 <_malloc_usable_size_r>
 800848c:	42a0      	cmp	r0, r4
 800848e:	d20f      	bcs.n	80084b0 <_realloc_r+0x48>
 8008490:	4621      	mov	r1, r4
 8008492:	4638      	mov	r0, r7
 8008494:	f7ff fc5e 	bl	8007d54 <_malloc_r>
 8008498:	4605      	mov	r5, r0
 800849a:	2800      	cmp	r0, #0
 800849c:	d0f2      	beq.n	8008484 <_realloc_r+0x1c>
 800849e:	4631      	mov	r1, r6
 80084a0:	4622      	mov	r2, r4
 80084a2:	f7ff ffbd 	bl	8008420 <memcpy>
 80084a6:	4631      	mov	r1, r6
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff fc05 	bl	8007cb8 <_free_r>
 80084ae:	e7e9      	b.n	8008484 <_realloc_r+0x1c>
 80084b0:	4635      	mov	r5, r6
 80084b2:	e7e7      	b.n	8008484 <_realloc_r+0x1c>

080084b4 <_malloc_usable_size_r>:
 80084b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084b8:	1f18      	subs	r0, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bfbc      	itt	lt
 80084be:	580b      	ldrlt	r3, [r1, r0]
 80084c0:	18c0      	addlt	r0, r0, r3
 80084c2:	4770      	bx	lr

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
