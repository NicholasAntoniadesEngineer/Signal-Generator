
Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000427c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004430  08004430  00014430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004620  08004620  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004628  08004628  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004630  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  2000001c  0800464c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800464c  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afc1  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd4  00000000  00000000  0002b00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239a6  00000000  00000000  0002e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d29  00000000  00000000  00051b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9458  00000000  00000000  0005a88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133ce7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e4  00000000  00000000  00133d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004414 	.word	0x08004414

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	08004414 	.word	0x08004414

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	0000      	movs	r0, r0
	...

08000e30 <get_sineval>:
uint32_t sine_val[500];  	// Buffer for all the sine bits
#define PI 3.1415926

// Adjusting Ns will affect the frequency of the output signal

void get_sineval(){
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	// Sampling step = 2PI/ns
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e062      	b.n	8000f02 <get_sineval+0xd2>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*(DACres/2));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb27 	bl	8000494 <__aeabi_i2d>
 8000e46:	a339      	add	r3, pc, #228	; (adr r3, 8000f2c <get_sineval+0xfc>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb8c 	bl	8000568 <__aeabi_dmul>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	4625      	mov	r5, r4
 8000e56:	461c      	mov	r4, r3
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <get_sineval+0xe8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb19 	bl	8000494 <__aeabi_i2d>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4620      	mov	r0, r4
 8000e68:	4629      	mov	r1, r5
 8000e6a:	f7ff fca7 	bl	80007bc <__aeabi_ddiv>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460c      	mov	r4, r1
 8000e72:	ec44 3b17 	vmov	d7, r3, r4
 8000e76:	eeb0 0a47 	vmov.f32	s0, s14
 8000e7a:	eef0 0a67 	vmov.f32	s1, s15
 8000e7e:	f002 fab7 	bl	80033f0 <sin>
 8000e82:	ec51 0b10 	vmov	r0, r1, d0
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <get_sineval+0xec>)
 8000e8c:	f7ff f9b6 	bl	80001fc <__adddf3>
 8000e90:	4603      	mov	r3, r0
 8000e92:	460c      	mov	r4, r1
 8000e94:	4625      	mov	r5, r4
 8000e96:	461c      	mov	r4, r3
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <get_sineval+0xf0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0fda      	lsrs	r2, r3, #31
 8000e9e:	4413      	add	r3, r2
 8000ea0:	105b      	asrs	r3, r3, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff faf6 	bl	8000494 <__aeabi_i2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4620      	mov	r0, r4
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f7ff fb5a 	bl	8000568 <__aeabi_dmul>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	4621      	mov	r1, r4
 8000ebc:	f7ff fe16 	bl	8000aec <__aeabi_d2uiz>
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <get_sineval+0xf4>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_scaled*sine_val[i];
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <get_sineval+0xf4>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff face 	bl	8000474 <__aeabi_ui2d>
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <get_sineval+0xf8>)
 8000eda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4623      	mov	r3, r4
 8000ee2:	f7ff fb41 	bl	8000568 <__aeabi_dmul>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4618      	mov	r0, r3
 8000eec:	4621      	mov	r1, r4
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_d2uiz>
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <get_sineval+0xf4>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <get_sineval+0xe8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	db97      	blt.n	8000e3c <get_sineval+0xc>
	}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bdb0      	pop	{r4, r5, r7, pc}
 8000f14:	f3af 8000 	nop.w
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	3ff00000 	.word	0x3ff00000
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	20000038 	.word	0x20000038
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	4d12d84a 	.word	0x4d12d84a
 8000f30:	400921fb 	.word	0x400921fb

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fa91 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f821 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f925 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f46:	f000 f903 	bl	8001150 <MX_DMA_Init>
  MX_DAC_Init();
 8000f4a:	f000 f88b 	bl	8001064 <MX_DAC_Init>
  MX_TIM2_Init();
 8000f4e:	f000 f8b3 	bl	80010b8 <MX_TIM2_Init>
	//  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
	//  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);


  /* Sine function */
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 8000f52:	4808      	ldr	r0, [pc, #32]	; (8000f74 <main+0x40>)
 8000f54:	f001 ff8f 	bl	8002e76 <HAL_TIM_Base_Start>
  get_sineval();
 8000f58:	f7ff ff6a 	bl	8000e30 <get_sineval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <main+0x44>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	2300      	movs	r3, #0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4613      	mov	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <main+0x48>)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <main+0x4c>)
 8000f6e:	f000 fc1d 	bl	80017ac <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <main+0x3e>
 8000f74:	2000087c 	.word	0x2000087c
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000038 	.word	0x20000038
 8000f80:	20000868 	.word	0x20000868

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	; 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	2230      	movs	r2, #48	; 0x30
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fa24 	bl	80033e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <SystemClock_Config+0xd8>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	; (800105c <SystemClock_Config+0xd8>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <SystemClock_Config+0xd8>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <SystemClock_Config+0xdc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a24      	ldr	r2, [pc, #144]	; (8001060 <SystemClock_Config+0xdc>)
 8000fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <SystemClock_Config+0xdc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fec:	2302      	movs	r3, #2
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ff8:	23b4      	movs	r3, #180	; 0xb4
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001000:	2304      	movs	r3, #4
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fadb 	bl	80025c4 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001014:	f000 f8e4 	bl	80011e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001018:	f001 fa84 	bl	8002524 <HAL_PWREx_EnableOverDrive>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001022:	f000 f8dd 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2105      	movs	r1, #5
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fd2d 	bl	8002aa4 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001050:	f000 f8c6 	bl	80011e0 <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	; 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_DAC_Init+0x4c>)
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <MX_DAC_Init+0x50>)
 8001076:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_DAC_Init+0x4c>)
 800107a:	f000 fb74 	bl	8001766 <HAL_DAC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001084:	f000 f8ac 	bl	80011e0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001088:	2324      	movs	r3, #36	; 0x24
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <MX_DAC_Init+0x4c>)
 8001098:	f000 fc54 	bl	8001944 <HAL_DAC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010a2:	f000 f89d 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000868 	.word	0x20000868
 80010b4:	40007400 	.word	0x40007400

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM2_Init+0x94>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_TIM2_Init+0x94>)
 80010de:	2201      	movs	r2, #1
 80010e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_TIM2_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM2_Init+0x94>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_TIM2_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_TIM2_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <MX_TIM2_Init+0x94>)
 80010fc:	f001 fe90 	bl	8002e20 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001106:	f000 f86b 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_TIM2_Init+0x94>)
 8001118:	f001 fed1 	bl	8002ebe <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 f85d 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001126:	2320      	movs	r3, #32
 8001128:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_TIM2_Init+0x94>)
 8001134:	f002 f8b4 	bl	80032a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800113e:	f000 f84f 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000087c 	.word	0x2000087c

08001150 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_DMA_Init+0x3c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <MX_DMA_Init+0x3c>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_DMA_Init+0x3c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2010      	movs	r0, #16
 8001178:	f000 fabf 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800117c:	2010      	movs	r0, #16
 800117e:	f000 fad8 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_GPIO_Init+0x4c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_GPIO_Init+0x4c>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <MX_GPIO_Init+0x4c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_GPIO_Init+0x4c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <MX_GPIO_Init+0x4c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_GPIO_Init+0x4c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_MspInit+0x4c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x4c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a2f      	ldr	r2, [pc, #188]	; (800131c <HAL_DAC_MspInit+0xdc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d158      	bne.n	8001314 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <HAL_DAC_MspInit+0xe0>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a2d      	ldr	r2, [pc, #180]	; (8001320 <HAL_DAC_MspInit+0xe0>)
 800126c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_DAC_MspInit+0xe0>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_DAC_MspInit+0xe0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a26      	ldr	r2, [pc, #152]	; (8001320 <HAL_DAC_MspInit+0xe0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_DAC_MspInit+0xe0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800129a:	2310      	movs	r3, #16
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	481d      	ldr	r0, [pc, #116]	; (8001324 <HAL_DAC_MspInit+0xe4>)
 80012ae:	f000 ff8f 	bl	80021d0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_DAC_MspInit+0xec>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80012be:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012c2:	2240      	movs	r2, #64	; 0x40
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012da:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 80012fa:	f000 fbfb 	bl	8001af4 <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001304:	f7ff ff6c 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_DAC_MspInit+0xe8>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40007400 	.word	0x40007400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	20000808 	.word	0x20000808
 800132c:	40026088 	.word	0x40026088

08001330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d10d      	bne.n	800135e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f89e 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Stream5_IRQHandler+0x10>)
 80013d2:	f000 fc95 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000808 	.word	0x20000808

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SystemInit+0x28>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <SystemInit+0x28>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SystemInit+0x28>)
 80013f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fa:	609a      	str	r2, [r3, #8]
#endif
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001410:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001412:	e003      	b.n	800141c <LoopCopyDataInit>

08001414 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001416:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001418:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800141a:	3104      	adds	r1, #4

0800141c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001420:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001422:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001424:	d3f6      	bcc.n	8001414 <CopyDataInit>
  ldr  r2, =_sbss
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001428:	e002      	b.n	8001430 <LoopFillZerobss>

0800142a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800142a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800142c:	f842 3b04 	str.w	r3, [r2], #4

08001430 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001432:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001434:	d3f9      	bcc.n	800142a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001436:	f7ff ffd3 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f001 ffad 	bl	8003398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143e:	f7ff fd79 	bl	8000f34 <main>
  bx  lr    
 8001442:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001444:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001448:	08004630 	.word	0x08004630
  ldr  r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001450:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8001454:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8001458:	200008c0 	.word	0x200008c0

0800145c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_Init+0x40>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_Init+0x40>)
 8001476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x40>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f92b 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff feac 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f943 	bl	800174e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f90b 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000010 	.word	0x20000010
 80014fc:	20000018 	.word	0x20000018
 8001500:	20000014 	.word	0x20000014

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000018 	.word	0x20000018
 8001528:	200008bc 	.word	0x200008bc

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200008bc 	.word	0x200008bc

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e014      	b.n	80017a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	791b      	ldrb	r3, [r3, #4]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fd59 	bl	8001240 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_DAC_Start_DMA+0x1e>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e08e      	b.n	80018e8 <HAL_DAC_Start_DMA+0x13c>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2202      	movs	r2, #2
 80017d4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d12a      	bne.n	8001832 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a43      	ldr	r2, [pc, #268]	; (80018f0 <HAL_DAC_Start_DMA+0x144>)
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <HAL_DAC_Start_DMA+0x148>)
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a41      	ldr	r2, [pc, #260]	; (80018f8 <HAL_DAC_Start_DMA+0x14c>)
 80017f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001802:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d009      	beq.n	800181e <HAL_DAC_Start_DMA+0x72>
 800180a:	2b08      	cmp	r3, #8
 800180c:	d00c      	beq.n	8001828 <HAL_DAC_Start_DMA+0x7c>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d000      	beq.n	8001814 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001812:	e039      	b.n	8001888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3308      	adds	r3, #8
 800181a:	617b      	str	r3, [r7, #20]
        break;
 800181c:	e034      	b.n	8001888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	330c      	adds	r3, #12
 8001824:	617b      	str	r3, [r7, #20]
        break;
 8001826:	e02f      	b.n	8001888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3310      	adds	r3, #16
 800182e:	617b      	str	r3, [r7, #20]
        break;
 8001830:	e02a      	b.n	8001888 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <HAL_DAC_Start_DMA+0x150>)
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4a30      	ldr	r2, [pc, #192]	; (8001900 <HAL_DAC_Start_DMA+0x154>)
 8001840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	4a2f      	ldr	r2, [pc, #188]	; (8001904 <HAL_DAC_Start_DMA+0x158>)
 8001848:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001858:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	2b04      	cmp	r3, #4
 800185e:	d009      	beq.n	8001874 <HAL_DAC_Start_DMA+0xc8>
 8001860:	2b08      	cmp	r3, #8
 8001862:	d00c      	beq.n	800187e <HAL_DAC_Start_DMA+0xd2>
 8001864:	2b00      	cmp	r3, #0
 8001866:	d000      	beq.n	800186a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001868:	e00e      	b.n	8001888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3314      	adds	r3, #20
 8001870:	617b      	str	r3, [r7, #20]
        break;
 8001872:	e009      	b.n	8001888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3318      	adds	r3, #24
 800187a:	617b      	str	r3, [r7, #20]
        break;
 800187c:	e004      	b.n	8001888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	331c      	adds	r3, #28
 8001884:	617b      	str	r3, [r7, #20]
        break;
 8001886:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10f      	bne.n	80018ae <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800189c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6898      	ldr	r0, [r3, #8]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	f000 f9d2 	bl	8001c50 <HAL_DMA_Start_IT>
 80018ac:	e00e      	b.n	80018cc <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018bc:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68d8      	ldr	r0, [r3, #12]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	f000 f9c2 	bl	8001c50 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6819      	ldr	r1, [r3, #0]
 80018d2:	2201      	movs	r2, #1
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	080019df 	.word	0x080019df
 80018f4:	08001a01 	.word	0x08001a01
 80018f8:	08001a1d 	.word	0x08001a1d
 80018fc:	08001a87 	.word	0x08001a87
 8001900:	08001aa9 	.word	0x08001aa9
 8001904:	08001ac5 	.word	0x08001ac5

08001908 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	795b      	ldrb	r3, [r3, #5]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_DAC_ConfigChannel+0x20>
 8001960:	2302      	movs	r3, #2
 8001962:	e036      	b.n	80019d2 <HAL_DAC_ConfigChannel+0x8e>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001978:	f640 72fe 	movw	r2, #4094	; 0xffe
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4013      	ands	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6819      	ldr	r1, [r3, #0]
 80019b2:	22c0      	movs	r2, #192	; 0xc0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	400a      	ands	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ea:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff ff8b 	bl	8001908 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	711a      	strb	r2, [r3, #4]
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7ff ff84 	bl	800191c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f043 0204 	orr.w	r2, r3, #4
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff ff7a 	bl	8001930 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	711a      	strb	r2, [r3, #4]
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff ffd8 	bl	8001a4a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	711a      	strb	r2, [r3, #4]
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff ffd1 	bl	8001a5e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff ffc7 	bl	8001a72 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	711a      	strb	r2, [r3, #4]
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fd14 	bl	800152c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e099      	b.n	8001c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b30:	e00f      	b.n	8001b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b32:	f7ff fcfb 	bl	800152c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d908      	bls.n	8001b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e078      	b.n	8001c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e8      	bne.n	8001b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_DMA_Init+0x158>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d107      	bne.n	8001bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d117      	bne.n	8001c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fa6f 	bl	80020dc <DMA_CheckFifoParam>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c12:	2301      	movs	r3, #1
 8001c14:	e016      	b.n	8001c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fa26 	bl	8002070 <DMA_CalcBaseAndBitshift>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	223f      	movs	r2, #63	; 0x3f
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	f010803f 	.word	0xf010803f

08001c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_DMA_Start_IT+0x26>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e040      	b.n	8001cf8 <HAL_DMA_Start_IT+0xa8>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d12f      	bne.n	8001cea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f9b8 	bl	8002014 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	223f      	movs	r2, #63	; 0x3f
 8001caa:	409a      	lsls	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0216 	orr.w	r2, r2, #22
 8001cbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0208 	orr.w	r2, r2, #8
 8001cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e005      	b.n	8001cf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_DMA_IRQHandler+0x258>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_DMA_IRQHandler+0x25c>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2208      	movs	r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2201      	movs	r2, #1
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d012      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2201      	movs	r2, #1
 8001d90:	409a      	lsls	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2204      	movs	r2, #4
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0204 	orr.w	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2210      	movs	r2, #16
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d043      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03c      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d018      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d108      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d024      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
 8001e2e:	e01f      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e016      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0208 	bic.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2220      	movs	r2, #32
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 808e 	beq.w	8001f9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8086 	beq.w	8001f9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2220      	movs	r2, #32
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d136      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0216 	bic.w	r2, r2, #22
 8001eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <HAL_DMA_IRQHandler+0x1da>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0208 	bic.w	r2, r2, #8
 8001ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	223f      	movs	r2, #63	; 0x3f
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07d      	beq.n	800200a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
        }
        return;
 8001f16:	e078      	b.n	800200a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01c      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d030      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
 8001f44:	e02b      	b.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d027      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
 8001f56:	e022      	b.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0210 	bic.w	r2, r2, #16
 8001f7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d032      	beq.n	800200c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d022      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d307      	bcc.n	8001fe6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f2      	bne.n	8001fca <HAL_DMA_IRQHandler+0x2ca>
 8001fe4:	e000      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fe6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e000      	b.n	800200c <HAL_DMA_IRQHandler+0x30c>
        return;
 800200a:	bf00      	nop
    }
  }
}
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop

08002014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002030:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d108      	bne.n	8002054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002052:	e007      	b.n	8002064 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	60da      	str	r2, [r3, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	3b10      	subs	r3, #16
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800208a:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <DMA_CalcBaseAndBitshift+0x68>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d909      	bls.n	80020b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	1d1a      	adds	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	659a      	str	r2, [r3, #88]	; 0x58
 80020b0:	e007      	b.n	80020c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ba:	f023 0303 	bic.w	r3, r3, #3
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	aaaaaaab 	.word	0xaaaaaaab
 80020d8:	08004440 	.word	0x08004440

080020dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d11f      	bne.n	8002136 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d855      	bhi.n	80021a8 <DMA_CheckFifoParam+0xcc>
 80020fc:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <DMA_CheckFifoParam+0x28>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	08002115 	.word	0x08002115
 8002108:	08002127 	.word	0x08002127
 800210c:	08002115 	.word	0x08002115
 8002110:	080021a9 	.word	0x080021a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d045      	beq.n	80021ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002124:	e042      	b.n	80021ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800212e:	d13f      	bne.n	80021b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002134:	e03c      	b.n	80021b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213e:	d121      	bne.n	8002184 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d836      	bhi.n	80021b4 <DMA_CheckFifoParam+0xd8>
 8002146:	a201      	add	r2, pc, #4	; (adr r2, 800214c <DMA_CheckFifoParam+0x70>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	0800215d 	.word	0x0800215d
 8002150:	08002163 	.word	0x08002163
 8002154:	0800215d 	.word	0x0800215d
 8002158:	08002175 	.word	0x08002175
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e02f      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d024      	beq.n	80021b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002172:	e021      	b.n	80021b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800217c:	d11e      	bne.n	80021bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002182:	e01b      	b.n	80021bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d902      	bls.n	8002190 <DMA_CheckFifoParam+0xb4>
 800218a:	2b03      	cmp	r3, #3
 800218c:	d003      	beq.n	8002196 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800218e:	e018      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e015      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00e      	beq.n	80021c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      break;
 80021a6:	e00b      	b.n	80021c0 <DMA_CheckFifoParam+0xe4>
      break;
 80021a8:	bf00      	nop
 80021aa:	e00a      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      break;
 80021ac:	bf00      	nop
 80021ae:	e008      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      break;
 80021b0:	bf00      	nop
 80021b2:	e006      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      break;
 80021b4:	bf00      	nop
 80021b6:	e004      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      break;
 80021b8:	bf00      	nop
 80021ba:	e002      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      break;
 80021c0:	bf00      	nop
    }
  } 
  
  return status; 
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e177      	b.n	80024dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 8166 	bne.w	80024d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d00b      	beq.n	800222a <HAL_GPIO_Init+0x5a>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221e:	2b11      	cmp	r3, #17
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b12      	cmp	r3, #18
 8002228:	d130      	bne.n	800228c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0xfc>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80c0 	beq.w	80024d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <HAL_GPIO_Init+0x320>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a64      	ldr	r2, [pc, #400]	; (80024f0 <HAL_GPIO_Init+0x320>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_GPIO_Init+0x320>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a60      	ldr	r2, [pc, #384]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_GPIO_Init+0x328>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d037      	beq.n	800240e <HAL_GPIO_Init+0x23e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x32c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_GPIO_Init+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a55      	ldr	r2, [pc, #340]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x236>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a54      	ldr	r2, [pc, #336]	; (8002504 <HAL_GPIO_Init+0x334>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x232>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a53      	ldr	r2, [pc, #332]	; (8002508 <HAL_GPIO_Init+0x338>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x33c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x340>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x344>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x348>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x34c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x21a>
 80023e6:	2309      	movs	r3, #9
 80023e8:	e012      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ea:	230a      	movs	r3, #10
 80023ec:	e010      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e00e      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240e:	2300      	movs	r3, #0
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002420:	4934      	ldr	r1, [pc, #208]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_GPIO_Init+0x350>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002452:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_GPIO_Init+0x350>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_GPIO_Init+0x350>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_GPIO_Init+0x350>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_GPIO_Init+0x350>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_GPIO_Init+0x350>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_GPIO_Init+0x350>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <HAL_GPIO_Init+0x350>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f67f ae84 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	3724      	adds	r7, #36	; 0x24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40021400 	.word	0x40021400
 8002510:	40021800 	.word	0x40021800
 8002514:	40021c00 	.word	0x40021c00
 8002518:	40022000 	.word	0x40022000
 800251c:	40022400 	.word	0x40022400
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002550:	f7fe ffec 	bl	800152c <HAL_GetTick>
 8002554:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002556:	e009      	b.n	800256c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002558:	f7fe ffe8 	bl	800152c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002566:	d901      	bls.n	800256c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e01f      	b.n	80025ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_PWREx_EnableOverDrive+0x98>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d1ee      	bne.n	8002558 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002580:	f7fe ffd4 	bl	800152c <HAL_GetTick>
 8002584:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002586:	e009      	b.n	800259c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002588:	f7fe ffd0 	bl	800152c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002596:	d901      	bls.n	800259c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e007      	b.n	80025ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_PWREx_EnableOverDrive+0x98>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025a8:	d1ee      	bne.n	8002588 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	420e0040 	.word	0x420e0040
 80025bc:	40007000 	.word	0x40007000
 80025c0:	420e0044 	.word	0x420e0044

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e25b      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d075      	beq.n	80026ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e2:	4ba3      	ldr	r3, [pc, #652]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4ba0      	ldr	r3, [pc, #640]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b9d      	ldr	r3, [pc, #628]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05b      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d157      	bne.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e236      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x74>
 800262a:	4b91      	ldr	r3, [pc, #580]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a90      	ldr	r2, [pc, #576]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a8a      	ldr	r2, [pc, #552]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a87      	ldr	r2, [pc, #540]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 800265c:	4b84      	ldr	r3, [pc, #528]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a83      	ldr	r2, [pc, #524]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a80      	ldr	r2, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe ff56 	bl	800152c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe ff52 	bl	800152c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1fb      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xc0>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe ff42 	bl	800152c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe ff3e 	bl	800152c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1e7      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1bb      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4952      	ldr	r1, [pc, #328]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_OscConfig+0x2b0>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fef7 	bl	800152c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fef3 	bl	800152c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e19c      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4940      	ldr	r1, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_RCC_OscConfig+0x2b0>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fed6 	bl	800152c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe fed2 	bl	800152c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e17b      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d030      	beq.n	8002810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_OscConfig+0x2b4>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe feb6 	bl	800152c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe feb2 	bl	800152c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e15b      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x200>
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x2b4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fe9f 	bl	800152c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7fe fe9b 	bl	800152c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e144      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a0 	beq.w	800295e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d121      	bne.n	800289e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7fe fe61 	bl	800152c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e011      	b.n	8002892 <HAL_RCC_OscConfig+0x2ce>
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	42470000 	.word	0x42470000
 8002878:	42470e80 	.word	0x42470e80
 800287c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe fe54 	bl	800152c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0fd      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x4d4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
 80028a6:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a7c      	ldr	r2, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x32a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x312>
 80028bc:	4b77      	ldr	r3, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a76      	ldr	r2, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	4b74      	ldr	r3, [pc, #464]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a73      	ldr	r2, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x32a>
 80028d6:	4b71      	ldr	r3, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	4b6e      	ldr	r3, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a6d      	ldr	r2, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe fe19 	bl	800152c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fe15 	bl	800152c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0bc      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x33a>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7fe fe03 	bl	800152c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fdff 	bl	800152c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0a6      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b52      	ldr	r3, [pc, #328]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8092 	beq.w	8002a8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d05c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d141      	bne.n	8002a00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <HAL_RCC_OscConfig+0x4dc>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fdd3 	bl	800152c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe fdcf 	bl	800152c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e078      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4933      	ldr	r1, [pc, #204]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d2:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <HAL_RCC_OscConfig+0x4dc>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fda8 	bl	800152c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fda4 	bl	800152c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04d      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x41c>
 80029fe:	e045      	b.n	8002a8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x4dc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fd91 	bl	800152c <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fd8d 	bl	800152c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e036      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x44a>
 8002a2c:	e02e      	b.n	8002a8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e029      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d115      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a62:	4013      	ands	r3, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10d      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470060 	.word	0x42470060

08002aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0cc      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d90c      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b63      	ldr	r3, [pc, #396]	; (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0b8      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af8:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b10:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	494d      	ldr	r1, [pc, #308]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d044      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d119      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e07f      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06f      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e067      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4934      	ldr	r1, [pc, #208]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7fe fcca 	bl	800152c <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7fe fcc6 	bl	800152c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e04f      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d20c      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e032      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4916      	ldr	r1, [pc, #88]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	490e      	ldr	r1, [pc, #56]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c2a:	f000 f821 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4601      	mov	r1, r0
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fc2a 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023c00 	.word	0x40023c00
 8002c60:	40023800 	.word	0x40023800
 8002c64:	08004430 	.word	0x08004430
 8002c68:	20000010 	.word	0x20000010
 8002c6c:	20000014 	.word	0x20000014

08002c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d007      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x32>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x38>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 80b4 	bne.w	8002e04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c9e:	60bb      	str	r3, [r7, #8]
       break;
 8002ca0:	e0b3      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca2:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ca4:	60bb      	str	r3, [r7, #8]
      break;
 8002ca6:	e0b0      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca8:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb2:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04a      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b55      	ldr	r3, [pc, #340]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	f04f 0400 	mov.w	r4, #0
 8002cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	ea03 0501 	and.w	r5, r3, r1
 8002cd4:	ea04 0602 	and.w	r6, r4, r2
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4632      	mov	r2, r6
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	f04f 0400 	mov.w	r4, #0
 8002ce4:	0154      	lsls	r4, r2, #5
 8002ce6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cea:	014b      	lsls	r3, r1, #5
 8002cec:	4619      	mov	r1, r3
 8002cee:	4622      	mov	r2, r4
 8002cf0:	1b49      	subs	r1, r1, r5
 8002cf2:	eb62 0206 	sbc.w	r2, r2, r6
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	f04f 0400 	mov.w	r4, #0
 8002cfe:	0194      	lsls	r4, r2, #6
 8002d00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d04:	018b      	lsls	r3, r1, #6
 8002d06:	1a5b      	subs	r3, r3, r1
 8002d08:	eb64 0402 	sbc.w	r4, r4, r2
 8002d0c:	f04f 0100 	mov.w	r1, #0
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	00e2      	lsls	r2, r4, #3
 8002d16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d1a:	00d9      	lsls	r1, r3, #3
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4614      	mov	r4, r2
 8002d20:	195b      	adds	r3, r3, r5
 8002d22:	eb44 0406 	adc.w	r4, r4, r6
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	0262      	lsls	r2, r4, #9
 8002d30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d34:	0259      	lsls	r1, r3, #9
 8002d36:	460b      	mov	r3, r1
 8002d38:	4614      	mov	r4, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	461a      	mov	r2, r3
 8002d46:	4623      	mov	r3, r4
 8002d48:	f7fd fef0 	bl	8000b2c <__aeabi_uldivmod>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	460c      	mov	r4, r1
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	e049      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d54:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	ea03 0501 	and.w	r5, r3, r1
 8002d6a:	ea04 0602 	and.w	r6, r4, r2
 8002d6e:	4629      	mov	r1, r5
 8002d70:	4632      	mov	r2, r6
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	f04f 0400 	mov.w	r4, #0
 8002d7a:	0154      	lsls	r4, r2, #5
 8002d7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d80:	014b      	lsls	r3, r1, #5
 8002d82:	4619      	mov	r1, r3
 8002d84:	4622      	mov	r2, r4
 8002d86:	1b49      	subs	r1, r1, r5
 8002d88:	eb62 0206 	sbc.w	r2, r2, r6
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	f04f 0400 	mov.w	r4, #0
 8002d94:	0194      	lsls	r4, r2, #6
 8002d96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d9a:	018b      	lsls	r3, r1, #6
 8002d9c:	1a5b      	subs	r3, r3, r1
 8002d9e:	eb64 0402 	sbc.w	r4, r4, r2
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	00e2      	lsls	r2, r4, #3
 8002dac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002db0:	00d9      	lsls	r1, r3, #3
 8002db2:	460b      	mov	r3, r1
 8002db4:	4614      	mov	r4, r2
 8002db6:	195b      	adds	r3, r3, r5
 8002db8:	eb44 0406 	adc.w	r4, r4, r6
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	02a2      	lsls	r2, r4, #10
 8002dc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dca:	0299      	lsls	r1, r3, #10
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4614      	mov	r4, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4623      	mov	r3, r4
 8002dde:	f7fd fea5 	bl	8000b2c <__aeabi_uldivmod>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	3301      	adds	r3, #1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	60bb      	str	r3, [r7, #8]
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e06:	60bb      	str	r3, [r7, #8]
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	007a1200 	.word	0x007a1200

08002e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e01d      	b.n	8002e6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fa72 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f000 f8e4 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d007      	beq.n	8002ea8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_ConfigClockSource+0x18>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0a6      	b.n	8003024 <HAL_TIM_ConfigClockSource+0x166>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ef4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002efc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d067      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x120>
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d80b      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x6c>
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d073      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x140>
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d802      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x62>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d06f      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f1e:	e078      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d06c      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x140>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d06a      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f28:	e073      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f2a:	2b70      	cmp	r3, #112	; 0x70
 8002f2c:	d00d      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x8c>
 8002f2e:	2b70      	cmp	r3, #112	; 0x70
 8002f30:	d804      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x7e>
 8002f32:	2b50      	cmp	r3, #80	; 0x50
 8002f34:	d033      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0xe0>
 8002f36:	2b60      	cmp	r3, #96	; 0x60
 8002f38:	d041      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f3a:	e06a      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f40:	d066      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0x152>
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f46:	d017      	beq.n	8002f78 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f48:	e063      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f000 f981 	bl	8003260 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	609a      	str	r2, [r3, #8]
      break;
 8002f76:	e04c      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6899      	ldr	r1, [r3, #8]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f000 f96a 	bl	8003260 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9a:	609a      	str	r2, [r3, #8]
      break;
 8002f9c:	e039      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 f8de 	bl	800316c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2150      	movs	r1, #80	; 0x50
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f937 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e029      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 f8fd 	bl	80031ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2160      	movs	r1, #96	; 0x60
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f927 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e019      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 f8be 	bl	800316c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f917 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e009      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f000 f90e 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 800300e:	e000      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003010:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a40      	ldr	r2, [pc, #256]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d00f      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <TIM_Base_SetConfig+0x118>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <TIM_Base_SetConfig+0x11c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3b      	ldr	r2, [pc, #236]	; (800314c <TIM_Base_SetConfig+0x120>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a3a      	ldr	r2, [pc, #232]	; (8003150 <TIM_Base_SetConfig+0x124>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d108      	bne.n	800307e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02b      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d027      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <TIM_Base_SetConfig+0x118>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d023      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <TIM_Base_SetConfig+0x11c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a2a      	ldr	r2, [pc, #168]	; (800314c <TIM_Base_SetConfig+0x120>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01b      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a29      	ldr	r2, [pc, #164]	; (8003150 <TIM_Base_SetConfig+0x124>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d017      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a28      	ldr	r2, [pc, #160]	; (8003154 <TIM_Base_SetConfig+0x128>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <TIM_Base_SetConfig+0x12c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00f      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <TIM_Base_SetConfig+0x130>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <TIM_Base_SetConfig+0x134>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a24      	ldr	r2, [pc, #144]	; (8003164 <TIM_Base_SetConfig+0x138>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a23      	ldr	r2, [pc, #140]	; (8003168 <TIM_Base_SetConfig+0x13c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d108      	bne.n	80030f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0xf8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <TIM_Base_SetConfig+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	615a      	str	r2, [r3, #20]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00
 8003150:	40010400 	.word	0x40010400
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800
 8003160:	40001800 	.word	0x40001800
 8003164:	40001c00 	.word	0x40001c00
 8003168:	40002000 	.word	0x40002000

0800316c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0201 	bic.w	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 030a 	bic.w	r3, r3, #10
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	621a      	str	r2, [r3, #32]
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b087      	sub	sp, #28
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0210 	bic.w	r2, r3, #16
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	031b      	lsls	r3, r3, #12
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003206:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	f043 0307 	orr.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	431a      	orrs	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e05a      	b.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a21      	ldr	r2, [pc, #132]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d01d      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d018      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a15      	ldr	r2, [pc, #84]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d10c      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	4313      	orrs	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40010000 	.word	0x40010000
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800
 8003388:	40000c00 	.word	0x40000c00
 800338c:	40010400 	.word	0x40010400
 8003390:	40014000 	.word	0x40014000
 8003394:	40001800 	.word	0x40001800

08003398 <__libc_init_array>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4e0d      	ldr	r6, [pc, #52]	; (80033d0 <__libc_init_array+0x38>)
 800339c:	4c0d      	ldr	r4, [pc, #52]	; (80033d4 <__libc_init_array+0x3c>)
 800339e:	1ba4      	subs	r4, r4, r6
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	2500      	movs	r5, #0
 80033a4:	42a5      	cmp	r5, r4
 80033a6:	d109      	bne.n	80033bc <__libc_init_array+0x24>
 80033a8:	4e0b      	ldr	r6, [pc, #44]	; (80033d8 <__libc_init_array+0x40>)
 80033aa:	4c0c      	ldr	r4, [pc, #48]	; (80033dc <__libc_init_array+0x44>)
 80033ac:	f001 f832 	bl	8004414 <_init>
 80033b0:	1ba4      	subs	r4, r4, r6
 80033b2:	10a4      	asrs	r4, r4, #2
 80033b4:	2500      	movs	r5, #0
 80033b6:	42a5      	cmp	r5, r4
 80033b8:	d105      	bne.n	80033c6 <__libc_init_array+0x2e>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033c0:	4798      	blx	r3
 80033c2:	3501      	adds	r5, #1
 80033c4:	e7ee      	b.n	80033a4 <__libc_init_array+0xc>
 80033c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ca:	4798      	blx	r3
 80033cc:	3501      	adds	r5, #1
 80033ce:	e7f2      	b.n	80033b6 <__libc_init_array+0x1e>
 80033d0:	08004628 	.word	0x08004628
 80033d4:	08004628 	.word	0x08004628
 80033d8:	08004628 	.word	0x08004628
 80033dc:	0800462c 	.word	0x0800462c

080033e0 <memset>:
 80033e0:	4402      	add	r2, r0
 80033e2:	4603      	mov	r3, r0
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d100      	bne.n	80033ea <memset+0xa>
 80033e8:	4770      	bx	lr
 80033ea:	f803 1b01 	strb.w	r1, [r3], #1
 80033ee:	e7f9      	b.n	80033e4 <memset+0x4>

080033f0 <sin>:
 80033f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033f2:	ec51 0b10 	vmov	r0, r1, d0
 80033f6:	4a20      	ldr	r2, [pc, #128]	; (8003478 <sin+0x88>)
 80033f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033fc:	4293      	cmp	r3, r2
 80033fe:	dc07      	bgt.n	8003410 <sin+0x20>
 8003400:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003470 <sin+0x80>
 8003404:	2000      	movs	r0, #0
 8003406:	f000 fe37 	bl	8004078 <__kernel_sin>
 800340a:	ec51 0b10 	vmov	r0, r1, d0
 800340e:	e007      	b.n	8003420 <sin+0x30>
 8003410:	4a1a      	ldr	r2, [pc, #104]	; (800347c <sin+0x8c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	dd09      	ble.n	800342a <sin+0x3a>
 8003416:	ee10 2a10 	vmov	r2, s0
 800341a:	460b      	mov	r3, r1
 800341c:	f7fc feec 	bl	80001f8 <__aeabi_dsub>
 8003420:	ec41 0b10 	vmov	d0, r0, r1
 8003424:	b005      	add	sp, #20
 8003426:	f85d fb04 	ldr.w	pc, [sp], #4
 800342a:	4668      	mov	r0, sp
 800342c:	f000 f828 	bl	8003480 <__ieee754_rem_pio2>
 8003430:	f000 0003 	and.w	r0, r0, #3
 8003434:	2801      	cmp	r0, #1
 8003436:	ed9d 1b02 	vldr	d1, [sp, #8]
 800343a:	ed9d 0b00 	vldr	d0, [sp]
 800343e:	d004      	beq.n	800344a <sin+0x5a>
 8003440:	2802      	cmp	r0, #2
 8003442:	d005      	beq.n	8003450 <sin+0x60>
 8003444:	b970      	cbnz	r0, 8003464 <sin+0x74>
 8003446:	2001      	movs	r0, #1
 8003448:	e7dd      	b.n	8003406 <sin+0x16>
 800344a:	f000 fa0d 	bl	8003868 <__kernel_cos>
 800344e:	e7dc      	b.n	800340a <sin+0x1a>
 8003450:	2001      	movs	r0, #1
 8003452:	f000 fe11 	bl	8004078 <__kernel_sin>
 8003456:	ec53 2b10 	vmov	r2, r3, d0
 800345a:	ee10 0a10 	vmov	r0, s0
 800345e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003462:	e7dd      	b.n	8003420 <sin+0x30>
 8003464:	f000 fa00 	bl	8003868 <__kernel_cos>
 8003468:	e7f5      	b.n	8003456 <sin+0x66>
 800346a:	bf00      	nop
 800346c:	f3af 8000 	nop.w
	...
 8003478:	3fe921fb 	.word	0x3fe921fb
 800347c:	7fefffff 	.word	0x7fefffff

08003480 <__ieee754_rem_pio2>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	ec57 6b10 	vmov	r6, r7, d0
 8003488:	4bc3      	ldr	r3, [pc, #780]	; (8003798 <__ieee754_rem_pio2+0x318>)
 800348a:	b08d      	sub	sp, #52	; 0x34
 800348c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003490:	4598      	cmp	r8, r3
 8003492:	4604      	mov	r4, r0
 8003494:	9704      	str	r7, [sp, #16]
 8003496:	dc07      	bgt.n	80034a8 <__ieee754_rem_pio2+0x28>
 8003498:	2200      	movs	r2, #0
 800349a:	2300      	movs	r3, #0
 800349c:	ed84 0b00 	vstr	d0, [r4]
 80034a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80034a4:	2500      	movs	r5, #0
 80034a6:	e027      	b.n	80034f8 <__ieee754_rem_pio2+0x78>
 80034a8:	4bbc      	ldr	r3, [pc, #752]	; (800379c <__ieee754_rem_pio2+0x31c>)
 80034aa:	4598      	cmp	r8, r3
 80034ac:	dc75      	bgt.n	800359a <__ieee754_rem_pio2+0x11a>
 80034ae:	9b04      	ldr	r3, [sp, #16]
 80034b0:	4dbb      	ldr	r5, [pc, #748]	; (80037a0 <__ieee754_rem_pio2+0x320>)
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	ee10 0a10 	vmov	r0, s0
 80034b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003760 <__ieee754_rem_pio2+0x2e0>)
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	4639      	mov	r1, r7
 80034c0:	dd36      	ble.n	8003530 <__ieee754_rem_pio2+0xb0>
 80034c2:	f7fc fe99 	bl	80001f8 <__aeabi_dsub>
 80034c6:	45a8      	cmp	r8, r5
 80034c8:	4606      	mov	r6, r0
 80034ca:	460f      	mov	r7, r1
 80034cc:	d018      	beq.n	8003500 <__ieee754_rem_pio2+0x80>
 80034ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8003768 <__ieee754_rem_pio2+0x2e8>)
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f7fc fe90 	bl	80001f8 <__aeabi_dsub>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	e9c4 2300 	strd	r2, r3, [r4]
 80034e0:	4630      	mov	r0, r6
 80034e2:	4639      	mov	r1, r7
 80034e4:	f7fc fe88 	bl	80001f8 <__aeabi_dsub>
 80034e8:	a39f      	add	r3, pc, #636	; (adr r3, 8003768 <__ieee754_rem_pio2+0x2e8>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fc fe83 	bl	80001f8 <__aeabi_dsub>
 80034f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80034f6:	2501      	movs	r5, #1
 80034f8:	4628      	mov	r0, r5
 80034fa:	b00d      	add	sp, #52	; 0x34
 80034fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003500:	a39b      	add	r3, pc, #620	; (adr r3, 8003770 <__ieee754_rem_pio2+0x2f0>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fc fe77 	bl	80001f8 <__aeabi_dsub>
 800350a:	a39b      	add	r3, pc, #620	; (adr r3, 8003778 <__ieee754_rem_pio2+0x2f8>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	4606      	mov	r6, r0
 8003512:	460f      	mov	r7, r1
 8003514:	f7fc fe70 	bl	80001f8 <__aeabi_dsub>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	e9c4 2300 	strd	r2, r3, [r4]
 8003520:	4630      	mov	r0, r6
 8003522:	4639      	mov	r1, r7
 8003524:	f7fc fe68 	bl	80001f8 <__aeabi_dsub>
 8003528:	a393      	add	r3, pc, #588	; (adr r3, 8003778 <__ieee754_rem_pio2+0x2f8>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	e7de      	b.n	80034ee <__ieee754_rem_pio2+0x6e>
 8003530:	f7fc fe64 	bl	80001fc <__adddf3>
 8003534:	45a8      	cmp	r8, r5
 8003536:	4606      	mov	r6, r0
 8003538:	460f      	mov	r7, r1
 800353a:	d016      	beq.n	800356a <__ieee754_rem_pio2+0xea>
 800353c:	a38a      	add	r3, pc, #552	; (adr r3, 8003768 <__ieee754_rem_pio2+0x2e8>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f7fc fe5b 	bl	80001fc <__adddf3>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	e9c4 2300 	strd	r2, r3, [r4]
 800354e:	4630      	mov	r0, r6
 8003550:	4639      	mov	r1, r7
 8003552:	f7fc fe51 	bl	80001f8 <__aeabi_dsub>
 8003556:	a384      	add	r3, pc, #528	; (adr r3, 8003768 <__ieee754_rem_pio2+0x2e8>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fc fe4e 	bl	80001fc <__adddf3>
 8003560:	f04f 35ff 	mov.w	r5, #4294967295
 8003564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003568:	e7c6      	b.n	80034f8 <__ieee754_rem_pio2+0x78>
 800356a:	a381      	add	r3, pc, #516	; (adr r3, 8003770 <__ieee754_rem_pio2+0x2f0>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fc fe44 	bl	80001fc <__adddf3>
 8003574:	a380      	add	r3, pc, #512	; (adr r3, 8003778 <__ieee754_rem_pio2+0x2f8>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	4606      	mov	r6, r0
 800357c:	460f      	mov	r7, r1
 800357e:	f7fc fe3d 	bl	80001fc <__adddf3>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	e9c4 2300 	strd	r2, r3, [r4]
 800358a:	4630      	mov	r0, r6
 800358c:	4639      	mov	r1, r7
 800358e:	f7fc fe33 	bl	80001f8 <__aeabi_dsub>
 8003592:	a379      	add	r3, pc, #484	; (adr r3, 8003778 <__ieee754_rem_pio2+0x2f8>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	e7e0      	b.n	800355c <__ieee754_rem_pio2+0xdc>
 800359a:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <__ieee754_rem_pio2+0x324>)
 800359c:	4598      	cmp	r8, r3
 800359e:	f300 80d0 	bgt.w	8003742 <__ieee754_rem_pio2+0x2c2>
 80035a2:	f000 fe23 	bl	80041ec <fabs>
 80035a6:	ec57 6b10 	vmov	r6, r7, d0
 80035aa:	ee10 0a10 	vmov	r0, s0
 80035ae:	a374      	add	r3, pc, #464	; (adr r3, 8003780 <__ieee754_rem_pio2+0x300>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	4639      	mov	r1, r7
 80035b6:	f7fc ffd7 	bl	8000568 <__aeabi_dmul>
 80035ba:	2200      	movs	r2, #0
 80035bc:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <__ieee754_rem_pio2+0x328>)
 80035be:	f7fc fe1d 	bl	80001fc <__adddf3>
 80035c2:	f7fd fa6b 	bl	8000a9c <__aeabi_d2iz>
 80035c6:	4605      	mov	r5, r0
 80035c8:	f7fc ff64 	bl	8000494 <__aeabi_i2d>
 80035cc:	a364      	add	r3, pc, #400	; (adr r3, 8003760 <__ieee754_rem_pio2+0x2e0>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035d6:	f7fc ffc7 	bl	8000568 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4630      	mov	r0, r6
 80035e0:	4639      	mov	r1, r7
 80035e2:	f7fc fe09 	bl	80001f8 <__aeabi_dsub>
 80035e6:	a360      	add	r3, pc, #384	; (adr r3, 8003768 <__ieee754_rem_pio2+0x2e8>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	4682      	mov	sl, r0
 80035ee:	468b      	mov	fp, r1
 80035f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035f4:	f7fc ffb8 	bl	8000568 <__aeabi_dmul>
 80035f8:	2d1f      	cmp	r5, #31
 80035fa:	4606      	mov	r6, r0
 80035fc:	460f      	mov	r7, r1
 80035fe:	dc0c      	bgt.n	800361a <__ieee754_rem_pio2+0x19a>
 8003600:	1e6a      	subs	r2, r5, #1
 8003602:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <__ieee754_rem_pio2+0x32c>)
 8003604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003608:	4543      	cmp	r3, r8
 800360a:	d006      	beq.n	800361a <__ieee754_rem_pio2+0x19a>
 800360c:	4632      	mov	r2, r6
 800360e:	463b      	mov	r3, r7
 8003610:	4650      	mov	r0, sl
 8003612:	4659      	mov	r1, fp
 8003614:	f7fc fdf0 	bl	80001f8 <__aeabi_dsub>
 8003618:	e00e      	b.n	8003638 <__ieee754_rem_pio2+0x1b8>
 800361a:	4632      	mov	r2, r6
 800361c:	463b      	mov	r3, r7
 800361e:	4650      	mov	r0, sl
 8003620:	4659      	mov	r1, fp
 8003622:	f7fc fde9 	bl	80001f8 <__aeabi_dsub>
 8003626:	ea4f 5328 	mov.w	r3, r8, asr #20
 800362a:	9305      	str	r3, [sp, #20]
 800362c:	9a05      	ldr	r2, [sp, #20]
 800362e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b10      	cmp	r3, #16
 8003636:	dc02      	bgt.n	800363e <__ieee754_rem_pio2+0x1be>
 8003638:	e9c4 0100 	strd	r0, r1, [r4]
 800363c:	e039      	b.n	80036b2 <__ieee754_rem_pio2+0x232>
 800363e:	a34c      	add	r3, pc, #304	; (adr r3, 8003770 <__ieee754_rem_pio2+0x2f0>)
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003648:	f7fc ff8e 	bl	8000568 <__aeabi_dmul>
 800364c:	4606      	mov	r6, r0
 800364e:	460f      	mov	r7, r1
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4650      	mov	r0, sl
 8003656:	4659      	mov	r1, fp
 8003658:	f7fc fdce 	bl	80001f8 <__aeabi_dsub>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4680      	mov	r8, r0
 8003662:	4689      	mov	r9, r1
 8003664:	4650      	mov	r0, sl
 8003666:	4659      	mov	r1, fp
 8003668:	f7fc fdc6 	bl	80001f8 <__aeabi_dsub>
 800366c:	4632      	mov	r2, r6
 800366e:	463b      	mov	r3, r7
 8003670:	f7fc fdc2 	bl	80001f8 <__aeabi_dsub>
 8003674:	a340      	add	r3, pc, #256	; (adr r3, 8003778 <__ieee754_rem_pio2+0x2f8>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	4606      	mov	r6, r0
 800367c:	460f      	mov	r7, r1
 800367e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003682:	f7fc ff71 	bl	8000568 <__aeabi_dmul>
 8003686:	4632      	mov	r2, r6
 8003688:	463b      	mov	r3, r7
 800368a:	f7fc fdb5 	bl	80001f8 <__aeabi_dsub>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4606      	mov	r6, r0
 8003694:	460f      	mov	r7, r1
 8003696:	4640      	mov	r0, r8
 8003698:	4649      	mov	r1, r9
 800369a:	f7fc fdad 	bl	80001f8 <__aeabi_dsub>
 800369e:	9a05      	ldr	r2, [sp, #20]
 80036a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b31      	cmp	r3, #49	; 0x31
 80036a8:	dc20      	bgt.n	80036ec <__ieee754_rem_pio2+0x26c>
 80036aa:	e9c4 0100 	strd	r0, r1, [r4]
 80036ae:	46c2      	mov	sl, r8
 80036b0:	46cb      	mov	fp, r9
 80036b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80036b6:	4650      	mov	r0, sl
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	4659      	mov	r1, fp
 80036be:	f7fc fd9b 	bl	80001f8 <__aeabi_dsub>
 80036c2:	463b      	mov	r3, r7
 80036c4:	4632      	mov	r2, r6
 80036c6:	f7fc fd97 	bl	80001f8 <__aeabi_dsub>
 80036ca:	9b04      	ldr	r3, [sp, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80036d2:	f6bf af11 	bge.w	80034f8 <__ieee754_rem_pio2+0x78>
 80036d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80036da:	6063      	str	r3, [r4, #4]
 80036dc:	f8c4 8000 	str.w	r8, [r4]
 80036e0:	60a0      	str	r0, [r4, #8]
 80036e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036e6:	60e3      	str	r3, [r4, #12]
 80036e8:	426d      	negs	r5, r5
 80036ea:	e705      	b.n	80034f8 <__ieee754_rem_pio2+0x78>
 80036ec:	a326      	add	r3, pc, #152	; (adr r3, 8003788 <__ieee754_rem_pio2+0x308>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036f6:	f7fc ff37 	bl	8000568 <__aeabi_dmul>
 80036fa:	4606      	mov	r6, r0
 80036fc:	460f      	mov	r7, r1
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4640      	mov	r0, r8
 8003704:	4649      	mov	r1, r9
 8003706:	f7fc fd77 	bl	80001f8 <__aeabi_dsub>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4682      	mov	sl, r0
 8003710:	468b      	mov	fp, r1
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fc fd6f 	bl	80001f8 <__aeabi_dsub>
 800371a:	4632      	mov	r2, r6
 800371c:	463b      	mov	r3, r7
 800371e:	f7fc fd6b 	bl	80001f8 <__aeabi_dsub>
 8003722:	a31b      	add	r3, pc, #108	; (adr r3, 8003790 <__ieee754_rem_pio2+0x310>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	4606      	mov	r6, r0
 800372a:	460f      	mov	r7, r1
 800372c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003730:	f7fc ff1a 	bl	8000568 <__aeabi_dmul>
 8003734:	4632      	mov	r2, r6
 8003736:	463b      	mov	r3, r7
 8003738:	f7fc fd5e 	bl	80001f8 <__aeabi_dsub>
 800373c:	4606      	mov	r6, r0
 800373e:	460f      	mov	r7, r1
 8003740:	e764      	b.n	800360c <__ieee754_rem_pio2+0x18c>
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <__ieee754_rem_pio2+0x330>)
 8003744:	4598      	cmp	r8, r3
 8003746:	dd35      	ble.n	80037b4 <__ieee754_rem_pio2+0x334>
 8003748:	ee10 2a10 	vmov	r2, s0
 800374c:	463b      	mov	r3, r7
 800374e:	4630      	mov	r0, r6
 8003750:	4639      	mov	r1, r7
 8003752:	f7fc fd51 	bl	80001f8 <__aeabi_dsub>
 8003756:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800375a:	e9c4 0100 	strd	r0, r1, [r4]
 800375e:	e6a1      	b.n	80034a4 <__ieee754_rem_pio2+0x24>
 8003760:	54400000 	.word	0x54400000
 8003764:	3ff921fb 	.word	0x3ff921fb
 8003768:	1a626331 	.word	0x1a626331
 800376c:	3dd0b461 	.word	0x3dd0b461
 8003770:	1a600000 	.word	0x1a600000
 8003774:	3dd0b461 	.word	0x3dd0b461
 8003778:	2e037073 	.word	0x2e037073
 800377c:	3ba3198a 	.word	0x3ba3198a
 8003780:	6dc9c883 	.word	0x6dc9c883
 8003784:	3fe45f30 	.word	0x3fe45f30
 8003788:	2e000000 	.word	0x2e000000
 800378c:	3ba3198a 	.word	0x3ba3198a
 8003790:	252049c1 	.word	0x252049c1
 8003794:	397b839a 	.word	0x397b839a
 8003798:	3fe921fb 	.word	0x3fe921fb
 800379c:	4002d97b 	.word	0x4002d97b
 80037a0:	3ff921fb 	.word	0x3ff921fb
 80037a4:	413921fb 	.word	0x413921fb
 80037a8:	3fe00000 	.word	0x3fe00000
 80037ac:	08004448 	.word	0x08004448
 80037b0:	7fefffff 	.word	0x7fefffff
 80037b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80037b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80037bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80037c0:	4630      	mov	r0, r6
 80037c2:	460f      	mov	r7, r1
 80037c4:	f7fd f96a 	bl	8000a9c <__aeabi_d2iz>
 80037c8:	f7fc fe64 	bl	8000494 <__aeabi_i2d>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4630      	mov	r0, r6
 80037d2:	4639      	mov	r1, r7
 80037d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80037d8:	f7fc fd0e 	bl	80001f8 <__aeabi_dsub>
 80037dc:	2200      	movs	r2, #0
 80037de:	4b1f      	ldr	r3, [pc, #124]	; (800385c <__ieee754_rem_pio2+0x3dc>)
 80037e0:	f7fc fec2 	bl	8000568 <__aeabi_dmul>
 80037e4:	460f      	mov	r7, r1
 80037e6:	4606      	mov	r6, r0
 80037e8:	f7fd f958 	bl	8000a9c <__aeabi_d2iz>
 80037ec:	f7fc fe52 	bl	8000494 <__aeabi_i2d>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4630      	mov	r0, r6
 80037f6:	4639      	mov	r1, r7
 80037f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80037fc:	f7fc fcfc 	bl	80001f8 <__aeabi_dsub>
 8003800:	2200      	movs	r2, #0
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <__ieee754_rem_pio2+0x3dc>)
 8003804:	f7fc feb0 	bl	8000568 <__aeabi_dmul>
 8003808:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800380c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003810:	f04f 0803 	mov.w	r8, #3
 8003814:	2600      	movs	r6, #0
 8003816:	2700      	movs	r7, #0
 8003818:	4632      	mov	r2, r6
 800381a:	463b      	mov	r3, r7
 800381c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003820:	f108 3aff 	add.w	sl, r8, #4294967295
 8003824:	f7fd f908 	bl	8000a38 <__aeabi_dcmpeq>
 8003828:	b9b0      	cbnz	r0, 8003858 <__ieee754_rem_pio2+0x3d8>
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <__ieee754_rem_pio2+0x3e0>)
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	2302      	movs	r3, #2
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	462a      	mov	r2, r5
 8003834:	4643      	mov	r3, r8
 8003836:	4621      	mov	r1, r4
 8003838:	a806      	add	r0, sp, #24
 800383a:	f000 f8dd 	bl	80039f8 <__kernel_rem_pio2>
 800383e:	9b04      	ldr	r3, [sp, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	4605      	mov	r5, r0
 8003844:	f6bf ae58 	bge.w	80034f8 <__ieee754_rem_pio2+0x78>
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	68e3      	ldr	r3, [r4, #12]
 8003852:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003856:	e746      	b.n	80036e6 <__ieee754_rem_pio2+0x266>
 8003858:	46d0      	mov	r8, sl
 800385a:	e7dd      	b.n	8003818 <__ieee754_rem_pio2+0x398>
 800385c:	41700000 	.word	0x41700000
 8003860:	080044c8 	.word	0x080044c8
 8003864:	00000000 	.word	0x00000000

08003868 <__kernel_cos>:
 8003868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386c:	ec59 8b10 	vmov	r8, r9, d0
 8003870:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8003874:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003878:	ed2d 8b02 	vpush	{d8}
 800387c:	eeb0 8a41 	vmov.f32	s16, s2
 8003880:	eef0 8a61 	vmov.f32	s17, s3
 8003884:	da07      	bge.n	8003896 <__kernel_cos+0x2e>
 8003886:	ee10 0a10 	vmov	r0, s0
 800388a:	4649      	mov	r1, r9
 800388c:	f7fd f906 	bl	8000a9c <__aeabi_d2iz>
 8003890:	2800      	cmp	r0, #0
 8003892:	f000 8089 	beq.w	80039a8 <__kernel_cos+0x140>
 8003896:	4642      	mov	r2, r8
 8003898:	464b      	mov	r3, r9
 800389a:	4640      	mov	r0, r8
 800389c:	4649      	mov	r1, r9
 800389e:	f7fc fe63 	bl	8000568 <__aeabi_dmul>
 80038a2:	2200      	movs	r2, #0
 80038a4:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <__kernel_cos+0x178>)
 80038a6:	4604      	mov	r4, r0
 80038a8:	460d      	mov	r5, r1
 80038aa:	f7fc fe5d 	bl	8000568 <__aeabi_dmul>
 80038ae:	a340      	add	r3, pc, #256	; (adr r3, 80039b0 <__kernel_cos+0x148>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	4682      	mov	sl, r0
 80038b6:	468b      	mov	fp, r1
 80038b8:	4620      	mov	r0, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fc fe54 	bl	8000568 <__aeabi_dmul>
 80038c0:	a33d      	add	r3, pc, #244	; (adr r3, 80039b8 <__kernel_cos+0x150>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f7fc fc99 	bl	80001fc <__adddf3>
 80038ca:	4622      	mov	r2, r4
 80038cc:	462b      	mov	r3, r5
 80038ce:	f7fc fe4b 	bl	8000568 <__aeabi_dmul>
 80038d2:	a33b      	add	r3, pc, #236	; (adr r3, 80039c0 <__kernel_cos+0x158>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f7fc fc8e 	bl	80001f8 <__aeabi_dsub>
 80038dc:	4622      	mov	r2, r4
 80038de:	462b      	mov	r3, r5
 80038e0:	f7fc fe42 	bl	8000568 <__aeabi_dmul>
 80038e4:	a338      	add	r3, pc, #224	; (adr r3, 80039c8 <__kernel_cos+0x160>)
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f7fc fc87 	bl	80001fc <__adddf3>
 80038ee:	4622      	mov	r2, r4
 80038f0:	462b      	mov	r3, r5
 80038f2:	f7fc fe39 	bl	8000568 <__aeabi_dmul>
 80038f6:	a336      	add	r3, pc, #216	; (adr r3, 80039d0 <__kernel_cos+0x168>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc fc7c 	bl	80001f8 <__aeabi_dsub>
 8003900:	4622      	mov	r2, r4
 8003902:	462b      	mov	r3, r5
 8003904:	f7fc fe30 	bl	8000568 <__aeabi_dmul>
 8003908:	a333      	add	r3, pc, #204	; (adr r3, 80039d8 <__kernel_cos+0x170>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fc75 	bl	80001fc <__adddf3>
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	f7fc fe27 	bl	8000568 <__aeabi_dmul>
 800391a:	4622      	mov	r2, r4
 800391c:	462b      	mov	r3, r5
 800391e:	f7fc fe23 	bl	8000568 <__aeabi_dmul>
 8003922:	ec53 2b18 	vmov	r2, r3, d8
 8003926:	4604      	mov	r4, r0
 8003928:	460d      	mov	r5, r1
 800392a:	4640      	mov	r0, r8
 800392c:	4649      	mov	r1, r9
 800392e:	f7fc fe1b 	bl	8000568 <__aeabi_dmul>
 8003932:	460b      	mov	r3, r1
 8003934:	4602      	mov	r2, r0
 8003936:	4629      	mov	r1, r5
 8003938:	4620      	mov	r0, r4
 800393a:	f7fc fc5d 	bl	80001f8 <__aeabi_dsub>
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <__kernel_cos+0x17c>)
 8003940:	429e      	cmp	r6, r3
 8003942:	4680      	mov	r8, r0
 8003944:	4689      	mov	r9, r1
 8003946:	dc11      	bgt.n	800396c <__kernel_cos+0x104>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4650      	mov	r0, sl
 800394e:	4659      	mov	r1, fp
 8003950:	f7fc fc52 	bl	80001f8 <__aeabi_dsub>
 8003954:	460b      	mov	r3, r1
 8003956:	4924      	ldr	r1, [pc, #144]	; (80039e8 <__kernel_cos+0x180>)
 8003958:	4602      	mov	r2, r0
 800395a:	2000      	movs	r0, #0
 800395c:	f7fc fc4c 	bl	80001f8 <__aeabi_dsub>
 8003960:	ecbd 8b02 	vpop	{d8}
 8003964:	ec41 0b10 	vmov	d0, r0, r1
 8003968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <__kernel_cos+0x184>)
 800396e:	491e      	ldr	r1, [pc, #120]	; (80039e8 <__kernel_cos+0x180>)
 8003970:	429e      	cmp	r6, r3
 8003972:	bfcc      	ite	gt
 8003974:	4d1e      	ldrgt	r5, [pc, #120]	; (80039f0 <__kernel_cos+0x188>)
 8003976:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800397a:	2400      	movs	r4, #0
 800397c:	4622      	mov	r2, r4
 800397e:	462b      	mov	r3, r5
 8003980:	2000      	movs	r0, #0
 8003982:	f7fc fc39 	bl	80001f8 <__aeabi_dsub>
 8003986:	4622      	mov	r2, r4
 8003988:	4606      	mov	r6, r0
 800398a:	460f      	mov	r7, r1
 800398c:	462b      	mov	r3, r5
 800398e:	4650      	mov	r0, sl
 8003990:	4659      	mov	r1, fp
 8003992:	f7fc fc31 	bl	80001f8 <__aeabi_dsub>
 8003996:	4642      	mov	r2, r8
 8003998:	464b      	mov	r3, r9
 800399a:	f7fc fc2d 	bl	80001f8 <__aeabi_dsub>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4630      	mov	r0, r6
 80039a4:	4639      	mov	r1, r7
 80039a6:	e7d9      	b.n	800395c <__kernel_cos+0xf4>
 80039a8:	2000      	movs	r0, #0
 80039aa:	490f      	ldr	r1, [pc, #60]	; (80039e8 <__kernel_cos+0x180>)
 80039ac:	e7d8      	b.n	8003960 <__kernel_cos+0xf8>
 80039ae:	bf00      	nop
 80039b0:	be8838d4 	.word	0xbe8838d4
 80039b4:	bda8fae9 	.word	0xbda8fae9
 80039b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80039bc:	3e21ee9e 	.word	0x3e21ee9e
 80039c0:	809c52ad 	.word	0x809c52ad
 80039c4:	3e927e4f 	.word	0x3e927e4f
 80039c8:	19cb1590 	.word	0x19cb1590
 80039cc:	3efa01a0 	.word	0x3efa01a0
 80039d0:	16c15177 	.word	0x16c15177
 80039d4:	3f56c16c 	.word	0x3f56c16c
 80039d8:	5555554c 	.word	0x5555554c
 80039dc:	3fa55555 	.word	0x3fa55555
 80039e0:	3fe00000 	.word	0x3fe00000
 80039e4:	3fd33332 	.word	0x3fd33332
 80039e8:	3ff00000 	.word	0x3ff00000
 80039ec:	3fe90000 	.word	0x3fe90000
 80039f0:	3fd20000 	.word	0x3fd20000
 80039f4:	00000000 	.word	0x00000000

080039f8 <__kernel_rem_pio2>:
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	ed2d 8b02 	vpush	{d8}
 8003a00:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003a04:	1ed4      	subs	r4, r2, #3
 8003a06:	9308      	str	r3, [sp, #32]
 8003a08:	9101      	str	r1, [sp, #4]
 8003a0a:	4bc5      	ldr	r3, [pc, #788]	; (8003d20 <__kernel_rem_pio2+0x328>)
 8003a0c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003a0e:	9009      	str	r0, [sp, #36]	; 0x24
 8003a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	9b08      	ldr	r3, [sp, #32]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	9307      	str	r3, [sp, #28]
 8003a1c:	2318      	movs	r3, #24
 8003a1e:	fb94 f4f3 	sdiv	r4, r4, r3
 8003a22:	f06f 0317 	mvn.w	r3, #23
 8003a26:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003a2a:	fb04 3303 	mla	r3, r4, r3, r3
 8003a2e:	eb03 0a02 	add.w	sl, r3, r2
 8003a32:	9b04      	ldr	r3, [sp, #16]
 8003a34:	9a07      	ldr	r2, [sp, #28]
 8003a36:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003d10 <__kernel_rem_pio2+0x318>
 8003a3a:	eb03 0802 	add.w	r8, r3, r2
 8003a3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003a40:	1aa7      	subs	r7, r4, r2
 8003a42:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003a46:	ae22      	add	r6, sp, #136	; 0x88
 8003a48:	2500      	movs	r5, #0
 8003a4a:	4545      	cmp	r5, r8
 8003a4c:	dd13      	ble.n	8003a76 <__kernel_rem_pio2+0x7e>
 8003a4e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8003d10 <__kernel_rem_pio2+0x318>
 8003a52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003a56:	2600      	movs	r6, #0
 8003a58:	9b04      	ldr	r3, [sp, #16]
 8003a5a:	429e      	cmp	r6, r3
 8003a5c:	dc32      	bgt.n	8003ac4 <__kernel_rem_pio2+0xcc>
 8003a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a60:	9302      	str	r3, [sp, #8]
 8003a62:	9b08      	ldr	r3, [sp, #32]
 8003a64:	199d      	adds	r5, r3, r6
 8003a66:	ab22      	add	r3, sp, #136	; 0x88
 8003a68:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003a6c:	9306      	str	r3, [sp, #24]
 8003a6e:	ec59 8b18 	vmov	r8, r9, d8
 8003a72:	2700      	movs	r7, #0
 8003a74:	e01f      	b.n	8003ab6 <__kernel_rem_pio2+0xbe>
 8003a76:	42ef      	cmn	r7, r5
 8003a78:	d407      	bmi.n	8003a8a <__kernel_rem_pio2+0x92>
 8003a7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003a7e:	f7fc fd09 	bl	8000494 <__aeabi_i2d>
 8003a82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003a86:	3501      	adds	r5, #1
 8003a88:	e7df      	b.n	8003a4a <__kernel_rem_pio2+0x52>
 8003a8a:	ec51 0b18 	vmov	r0, r1, d8
 8003a8e:	e7f8      	b.n	8003a82 <__kernel_rem_pio2+0x8a>
 8003a90:	9906      	ldr	r1, [sp, #24]
 8003a92:	9d02      	ldr	r5, [sp, #8]
 8003a94:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003a98:	9106      	str	r1, [sp, #24]
 8003a9a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003a9e:	9502      	str	r5, [sp, #8]
 8003aa0:	f7fc fd62 	bl	8000568 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4640      	mov	r0, r8
 8003aaa:	4649      	mov	r1, r9
 8003aac:	f7fc fba6 	bl	80001fc <__adddf3>
 8003ab0:	3701      	adds	r7, #1
 8003ab2:	4680      	mov	r8, r0
 8003ab4:	4689      	mov	r9, r1
 8003ab6:	9b07      	ldr	r3, [sp, #28]
 8003ab8:	429f      	cmp	r7, r3
 8003aba:	dde9      	ble.n	8003a90 <__kernel_rem_pio2+0x98>
 8003abc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7c9      	b.n	8003a58 <__kernel_rem_pio2+0x60>
 8003ac4:	9b04      	ldr	r3, [sp, #16]
 8003ac6:	aa0e      	add	r2, sp, #56	; 0x38
 8003ac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003acc:	930c      	str	r3, [sp, #48]	; 0x30
 8003ace:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003ad0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ad4:	9c04      	ldr	r4, [sp, #16]
 8003ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ad8:	ab9a      	add	r3, sp, #616	; 0x268
 8003ada:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8003ade:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ae6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003aea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8003aee:	ab9a      	add	r3, sp, #616	; 0x268
 8003af0:	445b      	add	r3, fp
 8003af2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8003af6:	2500      	movs	r5, #0
 8003af8:	1b63      	subs	r3, r4, r5
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	dc78      	bgt.n	8003bf0 <__kernel_rem_pio2+0x1f8>
 8003afe:	4650      	mov	r0, sl
 8003b00:	ec49 8b10 	vmov	d0, r8, r9
 8003b04:	f000 fc00 	bl	8004308 <scalbn>
 8003b08:	ec57 6b10 	vmov	r6, r7, d0
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003b12:	ee10 0a10 	vmov	r0, s0
 8003b16:	4639      	mov	r1, r7
 8003b18:	f7fc fd26 	bl	8000568 <__aeabi_dmul>
 8003b1c:	ec41 0b10 	vmov	d0, r0, r1
 8003b20:	f000 fb6e 	bl	8004200 <floor>
 8003b24:	2200      	movs	r2, #0
 8003b26:	ec51 0b10 	vmov	r0, r1, d0
 8003b2a:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <__kernel_rem_pio2+0x32c>)
 8003b2c:	f7fc fd1c 	bl	8000568 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4630      	mov	r0, r6
 8003b36:	4639      	mov	r1, r7
 8003b38:	f7fc fb5e 	bl	80001f8 <__aeabi_dsub>
 8003b3c:	460f      	mov	r7, r1
 8003b3e:	4606      	mov	r6, r0
 8003b40:	f7fc ffac 	bl	8000a9c <__aeabi_d2iz>
 8003b44:	9006      	str	r0, [sp, #24]
 8003b46:	f7fc fca5 	bl	8000494 <__aeabi_i2d>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4630      	mov	r0, r6
 8003b50:	4639      	mov	r1, r7
 8003b52:	f7fc fb51 	bl	80001f8 <__aeabi_dsub>
 8003b56:	f1ba 0f00 	cmp.w	sl, #0
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	460f      	mov	r7, r1
 8003b5e:	dd6c      	ble.n	8003c3a <__kernel_rem_pio2+0x242>
 8003b60:	1e62      	subs	r2, r4, #1
 8003b62:	ab0e      	add	r3, sp, #56	; 0x38
 8003b64:	f1ca 0118 	rsb	r1, sl, #24
 8003b68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b6c:	9d06      	ldr	r5, [sp, #24]
 8003b6e:	fa40 f301 	asr.w	r3, r0, r1
 8003b72:	441d      	add	r5, r3
 8003b74:	408b      	lsls	r3, r1
 8003b76:	1ac0      	subs	r0, r0, r3
 8003b78:	ab0e      	add	r3, sp, #56	; 0x38
 8003b7a:	9506      	str	r5, [sp, #24]
 8003b7c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003b80:	f1ca 0317 	rsb	r3, sl, #23
 8003b84:	fa40 f303 	asr.w	r3, r0, r3
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	9b02      	ldr	r3, [sp, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dd62      	ble.n	8003c56 <__kernel_rem_pio2+0x25e>
 8003b90:	9b06      	ldr	r3, [sp, #24]
 8003b92:	2200      	movs	r2, #0
 8003b94:	3301      	adds	r3, #1
 8003b96:	9306      	str	r3, [sp, #24]
 8003b98:	4615      	mov	r5, r2
 8003b9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003b9e:	4294      	cmp	r4, r2
 8003ba0:	f300 8095 	bgt.w	8003cce <__kernel_rem_pio2+0x2d6>
 8003ba4:	f1ba 0f00 	cmp.w	sl, #0
 8003ba8:	dd07      	ble.n	8003bba <__kernel_rem_pio2+0x1c2>
 8003baa:	f1ba 0f01 	cmp.w	sl, #1
 8003bae:	f000 80a2 	beq.w	8003cf6 <__kernel_rem_pio2+0x2fe>
 8003bb2:	f1ba 0f02 	cmp.w	sl, #2
 8003bb6:	f000 80c1 	beq.w	8003d3c <__kernel_rem_pio2+0x344>
 8003bba:	9b02      	ldr	r3, [sp, #8]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d14a      	bne.n	8003c56 <__kernel_rem_pio2+0x25e>
 8003bc0:	4632      	mov	r2, r6
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	4958      	ldr	r1, [pc, #352]	; (8003d28 <__kernel_rem_pio2+0x330>)
 8003bc8:	f7fc fb16 	bl	80001f8 <__aeabi_dsub>
 8003bcc:	4606      	mov	r6, r0
 8003bce:	460f      	mov	r7, r1
 8003bd0:	2d00      	cmp	r5, #0
 8003bd2:	d040      	beq.n	8003c56 <__kernel_rem_pio2+0x25e>
 8003bd4:	4650      	mov	r0, sl
 8003bd6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003d18 <__kernel_rem_pio2+0x320>
 8003bda:	f000 fb95 	bl	8004308 <scalbn>
 8003bde:	4630      	mov	r0, r6
 8003be0:	4639      	mov	r1, r7
 8003be2:	ec53 2b10 	vmov	r2, r3, d0
 8003be6:	f7fc fb07 	bl	80001f8 <__aeabi_dsub>
 8003bea:	4606      	mov	r6, r0
 8003bec:	460f      	mov	r7, r1
 8003bee:	e032      	b.n	8003c56 <__kernel_rem_pio2+0x25e>
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <__kernel_rem_pio2+0x334>)
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	f7fc fcb6 	bl	8000568 <__aeabi_dmul>
 8003bfc:	f7fc ff4e 	bl	8000a9c <__aeabi_d2iz>
 8003c00:	f7fc fc48 	bl	8000494 <__aeabi_i2d>
 8003c04:	2200      	movs	r2, #0
 8003c06:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <__kernel_rem_pio2+0x338>)
 8003c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c0c:	f7fc fcac 	bl	8000568 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4640      	mov	r0, r8
 8003c16:	4649      	mov	r1, r9
 8003c18:	f7fc faee 	bl	80001f8 <__aeabi_dsub>
 8003c1c:	f7fc ff3e 	bl	8000a9c <__aeabi_d2iz>
 8003c20:	ab0e      	add	r3, sp, #56	; 0x38
 8003c22:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003c26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c2e:	f7fc fae5 	bl	80001fc <__adddf3>
 8003c32:	3501      	adds	r5, #1
 8003c34:	4680      	mov	r8, r0
 8003c36:	4689      	mov	r9, r1
 8003c38:	e75e      	b.n	8003af8 <__kernel_rem_pio2+0x100>
 8003c3a:	d105      	bne.n	8003c48 <__kernel_rem_pio2+0x250>
 8003c3c:	1e63      	subs	r3, r4, #1
 8003c3e:	aa0e      	add	r2, sp, #56	; 0x38
 8003c40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c44:	15c3      	asrs	r3, r0, #23
 8003c46:	e79f      	b.n	8003b88 <__kernel_rem_pio2+0x190>
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <__kernel_rem_pio2+0x33c>)
 8003c4c:	f7fc ff12 	bl	8000a74 <__aeabi_dcmpge>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d139      	bne.n	8003cc8 <__kernel_rem_pio2+0x2d0>
 8003c54:	9002      	str	r0, [sp, #8]
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	f7fc feeb 	bl	8000a38 <__aeabi_dcmpeq>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	f000 80c7 	beq.w	8003df6 <__kernel_rem_pio2+0x3fe>
 8003c68:	1e65      	subs	r5, r4, #1
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	9904      	ldr	r1, [sp, #16]
 8003c70:	428b      	cmp	r3, r1
 8003c72:	da6a      	bge.n	8003d4a <__kernel_rem_pio2+0x352>
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	f000 8088 	beq.w	8003d8a <__kernel_rem_pio2+0x392>
 8003c7a:	ab0e      	add	r3, sp, #56	; 0x38
 8003c7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003c80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80b4 	beq.w	8003df2 <__kernel_rem_pio2+0x3fa>
 8003c8a:	4650      	mov	r0, sl
 8003c8c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003d18 <__kernel_rem_pio2+0x320>
 8003c90:	f000 fb3a 	bl	8004308 <scalbn>
 8003c94:	00ec      	lsls	r4, r5, #3
 8003c96:	ab72      	add	r3, sp, #456	; 0x1c8
 8003c98:	191e      	adds	r6, r3, r4
 8003c9a:	ec59 8b10 	vmov	r8, r9, d0
 8003c9e:	f106 0a08 	add.w	sl, r6, #8
 8003ca2:	462f      	mov	r7, r5
 8003ca4:	2f00      	cmp	r7, #0
 8003ca6:	f280 80df 	bge.w	8003e68 <__kernel_rem_pio2+0x470>
 8003caa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8003d10 <__kernel_rem_pio2+0x318>
 8003cae:	f04f 0a00 	mov.w	sl, #0
 8003cb2:	eba5 030a 	sub.w	r3, r5, sl
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f2c0 810a 	blt.w	8003ed0 <__kernel_rem_pio2+0x4d8>
 8003cbc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003d38 <__kernel_rem_pio2+0x340>
 8003cc0:	ec59 8b18 	vmov	r8, r9, d8
 8003cc4:	2700      	movs	r7, #0
 8003cc6:	e0f5      	b.n	8003eb4 <__kernel_rem_pio2+0x4bc>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	9302      	str	r3, [sp, #8]
 8003ccc:	e760      	b.n	8003b90 <__kernel_rem_pio2+0x198>
 8003cce:	ab0e      	add	r3, sp, #56	; 0x38
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	b94d      	cbnz	r5, 8003cea <__kernel_rem_pio2+0x2f2>
 8003cd6:	b12b      	cbz	r3, 8003ce4 <__kernel_rem_pio2+0x2ec>
 8003cd8:	a80e      	add	r0, sp, #56	; 0x38
 8003cda:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003cde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	3201      	adds	r2, #1
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	e759      	b.n	8003b9e <__kernel_rem_pio2+0x1a6>
 8003cea:	a80e      	add	r0, sp, #56	; 0x38
 8003cec:	1acb      	subs	r3, r1, r3
 8003cee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	e7f6      	b.n	8003ce4 <__kernel_rem_pio2+0x2ec>
 8003cf6:	1e62      	subs	r2, r4, #1
 8003cf8:	ab0e      	add	r3, sp, #56	; 0x38
 8003cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003d02:	a90e      	add	r1, sp, #56	; 0x38
 8003d04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003d08:	e757      	b.n	8003bba <__kernel_rem_pio2+0x1c2>
 8003d0a:	bf00      	nop
 8003d0c:	f3af 8000 	nop.w
	...
 8003d1c:	3ff00000 	.word	0x3ff00000
 8003d20:	08004610 	.word	0x08004610
 8003d24:	40200000 	.word	0x40200000
 8003d28:	3ff00000 	.word	0x3ff00000
 8003d2c:	3e700000 	.word	0x3e700000
 8003d30:	41700000 	.word	0x41700000
 8003d34:	3fe00000 	.word	0x3fe00000
 8003d38:	080045d0 	.word	0x080045d0
 8003d3c:	1e62      	subs	r2, r4, #1
 8003d3e:	ab0e      	add	r3, sp, #56	; 0x38
 8003d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d48:	e7db      	b.n	8003d02 <__kernel_rem_pio2+0x30a>
 8003d4a:	a90e      	add	r1, sp, #56	; 0x38
 8003d4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	430a      	orrs	r2, r1
 8003d54:	e78b      	b.n	8003c6e <__kernel_rem_pio2+0x276>
 8003d56:	3301      	adds	r3, #1
 8003d58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d0fa      	beq.n	8003d56 <__kernel_rem_pio2+0x35e>
 8003d60:	9a08      	ldr	r2, [sp, #32]
 8003d62:	4422      	add	r2, r4
 8003d64:	00d2      	lsls	r2, r2, #3
 8003d66:	a922      	add	r1, sp, #136	; 0x88
 8003d68:	18e3      	adds	r3, r4, r3
 8003d6a:	9206      	str	r2, [sp, #24]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	9302      	str	r3, [sp, #8]
 8003d70:	f10b 0108 	add.w	r1, fp, #8
 8003d74:	f102 0308 	add.w	r3, r2, #8
 8003d78:	1c66      	adds	r6, r4, #1
 8003d7a:	910a      	str	r1, [sp, #40]	; 0x28
 8003d7c:	2500      	movs	r5, #0
 8003d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8003d80:	9b02      	ldr	r3, [sp, #8]
 8003d82:	42b3      	cmp	r3, r6
 8003d84:	da04      	bge.n	8003d90 <__kernel_rem_pio2+0x398>
 8003d86:	461c      	mov	r4, r3
 8003d88:	e6a6      	b.n	8003ad8 <__kernel_rem_pio2+0xe0>
 8003d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e7e3      	b.n	8003d58 <__kernel_rem_pio2+0x360>
 8003d90:	9b06      	ldr	r3, [sp, #24]
 8003d92:	18ef      	adds	r7, r5, r3
 8003d94:	ab22      	add	r3, sp, #136	; 0x88
 8003d96:	441f      	add	r7, r3
 8003d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003d9e:	f7fc fb79 	bl	8000494 <__aeabi_i2d>
 8003da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da4:	461c      	mov	r4, r3
 8003da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003da8:	e9c7 0100 	strd	r0, r1, [r7]
 8003dac:	eb03 0b05 	add.w	fp, r3, r5
 8003db0:	2700      	movs	r7, #0
 8003db2:	f04f 0800 	mov.w	r8, #0
 8003db6:	f04f 0900 	mov.w	r9, #0
 8003dba:	9b07      	ldr	r3, [sp, #28]
 8003dbc:	429f      	cmp	r7, r3
 8003dbe:	dd08      	ble.n	8003dd2 <__kernel_rem_pio2+0x3da>
 8003dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc2:	aa72      	add	r2, sp, #456	; 0x1c8
 8003dc4:	18eb      	adds	r3, r5, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8003dcc:	3601      	adds	r6, #1
 8003dce:	3508      	adds	r5, #8
 8003dd0:	e7d6      	b.n	8003d80 <__kernel_rem_pio2+0x388>
 8003dd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003dd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003dda:	f7fc fbc5 	bl	8000568 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f7fc fa09 	bl	80001fc <__adddf3>
 8003dea:	3701      	adds	r7, #1
 8003dec:	4680      	mov	r8, r0
 8003dee:	4689      	mov	r9, r1
 8003df0:	e7e3      	b.n	8003dba <__kernel_rem_pio2+0x3c2>
 8003df2:	3d01      	subs	r5, #1
 8003df4:	e741      	b.n	8003c7a <__kernel_rem_pio2+0x282>
 8003df6:	f1ca 0000 	rsb	r0, sl, #0
 8003dfa:	ec47 6b10 	vmov	d0, r6, r7
 8003dfe:	f000 fa83 	bl	8004308 <scalbn>
 8003e02:	ec57 6b10 	vmov	r6, r7, d0
 8003e06:	2200      	movs	r2, #0
 8003e08:	4b99      	ldr	r3, [pc, #612]	; (8004070 <__kernel_rem_pio2+0x678>)
 8003e0a:	ee10 0a10 	vmov	r0, s0
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f7fc fe30 	bl	8000a74 <__aeabi_dcmpge>
 8003e14:	b1f8      	cbz	r0, 8003e56 <__kernel_rem_pio2+0x45e>
 8003e16:	2200      	movs	r2, #0
 8003e18:	4b96      	ldr	r3, [pc, #600]	; (8004074 <__kernel_rem_pio2+0x67c>)
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	4639      	mov	r1, r7
 8003e1e:	f7fc fba3 	bl	8000568 <__aeabi_dmul>
 8003e22:	f7fc fe3b 	bl	8000a9c <__aeabi_d2iz>
 8003e26:	4680      	mov	r8, r0
 8003e28:	f7fc fb34 	bl	8000494 <__aeabi_i2d>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4b90      	ldr	r3, [pc, #576]	; (8004070 <__kernel_rem_pio2+0x678>)
 8003e30:	f7fc fb9a 	bl	8000568 <__aeabi_dmul>
 8003e34:	460b      	mov	r3, r1
 8003e36:	4602      	mov	r2, r0
 8003e38:	4639      	mov	r1, r7
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f7fc f9dc 	bl	80001f8 <__aeabi_dsub>
 8003e40:	f7fc fe2c 	bl	8000a9c <__aeabi_d2iz>
 8003e44:	1c65      	adds	r5, r4, #1
 8003e46:	ab0e      	add	r3, sp, #56	; 0x38
 8003e48:	f10a 0a18 	add.w	sl, sl, #24
 8003e4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003e50:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003e54:	e719      	b.n	8003c8a <__kernel_rem_pio2+0x292>
 8003e56:	4630      	mov	r0, r6
 8003e58:	4639      	mov	r1, r7
 8003e5a:	f7fc fe1f 	bl	8000a9c <__aeabi_d2iz>
 8003e5e:	ab0e      	add	r3, sp, #56	; 0x38
 8003e60:	4625      	mov	r5, r4
 8003e62:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003e66:	e710      	b.n	8003c8a <__kernel_rem_pio2+0x292>
 8003e68:	ab0e      	add	r3, sp, #56	; 0x38
 8003e6a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003e6e:	f7fc fb11 	bl	8000494 <__aeabi_i2d>
 8003e72:	4642      	mov	r2, r8
 8003e74:	464b      	mov	r3, r9
 8003e76:	f7fc fb77 	bl	8000568 <__aeabi_dmul>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003e80:	4b7c      	ldr	r3, [pc, #496]	; (8004074 <__kernel_rem_pio2+0x67c>)
 8003e82:	4640      	mov	r0, r8
 8003e84:	4649      	mov	r1, r9
 8003e86:	f7fc fb6f 	bl	8000568 <__aeabi_dmul>
 8003e8a:	3f01      	subs	r7, #1
 8003e8c:	4680      	mov	r8, r0
 8003e8e:	4689      	mov	r9, r1
 8003e90:	e708      	b.n	8003ca4 <__kernel_rem_pio2+0x2ac>
 8003e92:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8003e9e:	f7fc fb63 	bl	8000568 <__aeabi_dmul>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	f7fc f9a7 	bl	80001fc <__adddf3>
 8003eae:	3701      	adds	r7, #1
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	4689      	mov	r9, r1
 8003eb4:	9b04      	ldr	r3, [sp, #16]
 8003eb6:	429f      	cmp	r7, r3
 8003eb8:	dc01      	bgt.n	8003ebe <__kernel_rem_pio2+0x4c6>
 8003eba:	45ba      	cmp	sl, r7
 8003ebc:	dae9      	bge.n	8003e92 <__kernel_rem_pio2+0x49a>
 8003ebe:	ab4a      	add	r3, sp, #296	; 0x128
 8003ec0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003ec4:	e9c3 8900 	strd	r8, r9, [r3]
 8003ec8:	f10a 0a01 	add.w	sl, sl, #1
 8003ecc:	3e08      	subs	r6, #8
 8003ece:	e6f0      	b.n	8003cb2 <__kernel_rem_pio2+0x2ba>
 8003ed0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d85b      	bhi.n	8003f8e <__kernel_rem_pio2+0x596>
 8003ed6:	e8df f003 	tbb	[pc, r3]
 8003eda:	264a      	.short	0x264a
 8003edc:	0226      	.short	0x0226
 8003ede:	ab9a      	add	r3, sp, #616	; 0x268
 8003ee0:	441c      	add	r4, r3
 8003ee2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	46ab      	mov	fp, r5
 8003eea:	f1bb 0f00 	cmp.w	fp, #0
 8003eee:	dc6c      	bgt.n	8003fca <__kernel_rem_pio2+0x5d2>
 8003ef0:	46a2      	mov	sl, r4
 8003ef2:	46ab      	mov	fp, r5
 8003ef4:	f1bb 0f01 	cmp.w	fp, #1
 8003ef8:	f300 8086 	bgt.w	8004008 <__kernel_rem_pio2+0x610>
 8003efc:	2000      	movs	r0, #0
 8003efe:	2100      	movs	r1, #0
 8003f00:	2d01      	cmp	r5, #1
 8003f02:	f300 80a0 	bgt.w	8004046 <__kernel_rem_pio2+0x64e>
 8003f06:	9b02      	ldr	r3, [sp, #8]
 8003f08:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003f0c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 809e 	bne.w	8004052 <__kernel_rem_pio2+0x65a>
 8003f16:	9b01      	ldr	r3, [sp, #4]
 8003f18:	e9c3 7800 	strd	r7, r8, [r3]
 8003f1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003f20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003f24:	e033      	b.n	8003f8e <__kernel_rem_pio2+0x596>
 8003f26:	3408      	adds	r4, #8
 8003f28:	ab4a      	add	r3, sp, #296	; 0x128
 8003f2a:	441c      	add	r4, r3
 8003f2c:	462e      	mov	r6, r5
 8003f2e:	2000      	movs	r0, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	2e00      	cmp	r6, #0
 8003f34:	da3a      	bge.n	8003fac <__kernel_rem_pio2+0x5b4>
 8003f36:	9b02      	ldr	r3, [sp, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d03d      	beq.n	8003fb8 <__kernel_rem_pio2+0x5c0>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f42:	9c01      	ldr	r4, [sp, #4]
 8003f44:	e9c4 2300 	strd	r2, r3, [r4]
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003f50:	f7fc f952 	bl	80001f8 <__aeabi_dsub>
 8003f54:	ae4c      	add	r6, sp, #304	; 0x130
 8003f56:	2401      	movs	r4, #1
 8003f58:	42a5      	cmp	r5, r4
 8003f5a:	da30      	bge.n	8003fbe <__kernel_rem_pio2+0x5c6>
 8003f5c:	9b02      	ldr	r3, [sp, #8]
 8003f5e:	b113      	cbz	r3, 8003f66 <__kernel_rem_pio2+0x56e>
 8003f60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f64:	4619      	mov	r1, r3
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003f6c:	e00f      	b.n	8003f8e <__kernel_rem_pio2+0x596>
 8003f6e:	ab9a      	add	r3, sp, #616	; 0x268
 8003f70:	441c      	add	r4, r3
 8003f72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003f76:	2000      	movs	r0, #0
 8003f78:	2100      	movs	r1, #0
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	da10      	bge.n	8003fa0 <__kernel_rem_pio2+0x5a8>
 8003f7e:	9b02      	ldr	r3, [sp, #8]
 8003f80:	b113      	cbz	r3, 8003f88 <__kernel_rem_pio2+0x590>
 8003f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f86:	4619      	mov	r1, r3
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	e9c3 0100 	strd	r0, r1, [r3]
 8003f8e:	9b06      	ldr	r3, [sp, #24]
 8003f90:	f003 0007 	and.w	r0, r3, #7
 8003f94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003f98:	ecbd 8b02 	vpop	{d8}
 8003f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003fa4:	f7fc f92a 	bl	80001fc <__adddf3>
 8003fa8:	3d01      	subs	r5, #1
 8003faa:	e7e6      	b.n	8003f7a <__kernel_rem_pio2+0x582>
 8003fac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003fb0:	f7fc f924 	bl	80001fc <__adddf3>
 8003fb4:	3e01      	subs	r6, #1
 8003fb6:	e7bc      	b.n	8003f32 <__kernel_rem_pio2+0x53a>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	e7c1      	b.n	8003f42 <__kernel_rem_pio2+0x54a>
 8003fbe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003fc2:	f7fc f91b 	bl	80001fc <__adddf3>
 8003fc6:	3401      	adds	r4, #1
 8003fc8:	e7c6      	b.n	8003f58 <__kernel_rem_pio2+0x560>
 8003fca:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8003fce:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	ec53 2b17 	vmov	r2, r3, d7
 8003fd8:	4649      	mov	r1, r9
 8003fda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003fde:	f7fc f90d 	bl	80001fc <__adddf3>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	460f      	mov	r7, r1
 8003fea:	4640      	mov	r0, r8
 8003fec:	4649      	mov	r1, r9
 8003fee:	f7fc f903 	bl	80001f8 <__aeabi_dsub>
 8003ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ff6:	f7fc f901 	bl	80001fc <__adddf3>
 8003ffa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ffe:	e9ca 0100 	strd	r0, r1, [sl]
 8004002:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8004006:	e770      	b.n	8003eea <__kernel_rem_pio2+0x4f2>
 8004008:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800400c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004010:	4630      	mov	r0, r6
 8004012:	ec53 2b17 	vmov	r2, r3, d7
 8004016:	4639      	mov	r1, r7
 8004018:	ed8d 7b04 	vstr	d7, [sp, #16]
 800401c:	f7fc f8ee 	bl	80001fc <__adddf3>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4680      	mov	r8, r0
 8004026:	4689      	mov	r9, r1
 8004028:	4630      	mov	r0, r6
 800402a:	4639      	mov	r1, r7
 800402c:	f7fc f8e4 	bl	80001f8 <__aeabi_dsub>
 8004030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004034:	f7fc f8e2 	bl	80001fc <__adddf3>
 8004038:	f10b 3bff 	add.w	fp, fp, #4294967295
 800403c:	e9ca 0100 	strd	r0, r1, [sl]
 8004040:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8004044:	e756      	b.n	8003ef4 <__kernel_rem_pio2+0x4fc>
 8004046:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800404a:	f7fc f8d7 	bl	80001fc <__adddf3>
 800404e:	3d01      	subs	r5, #1
 8004050:	e756      	b.n	8003f00 <__kernel_rem_pio2+0x508>
 8004052:	9b01      	ldr	r3, [sp, #4]
 8004054:	9a01      	ldr	r2, [sp, #4]
 8004056:	601f      	str	r7, [r3, #0]
 8004058:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800405c:	605c      	str	r4, [r3, #4]
 800405e:	609d      	str	r5, [r3, #8]
 8004060:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004064:	60d3      	str	r3, [r2, #12]
 8004066:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800406a:	6110      	str	r0, [r2, #16]
 800406c:	6153      	str	r3, [r2, #20]
 800406e:	e78e      	b.n	8003f8e <__kernel_rem_pio2+0x596>
 8004070:	41700000 	.word	0x41700000
 8004074:	3e700000 	.word	0x3e700000

08004078 <__kernel_sin>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	ec55 4b10 	vmov	r4, r5, d0
 8004080:	b085      	sub	sp, #20
 8004082:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004086:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800408a:	ed8d 1b00 	vstr	d1, [sp]
 800408e:	9002      	str	r0, [sp, #8]
 8004090:	da06      	bge.n	80040a0 <__kernel_sin+0x28>
 8004092:	ee10 0a10 	vmov	r0, s0
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc fd00 	bl	8000a9c <__aeabi_d2iz>
 800409c:	2800      	cmp	r0, #0
 800409e:	d051      	beq.n	8004144 <__kernel_sin+0xcc>
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	4620      	mov	r0, r4
 80040a6:	4629      	mov	r1, r5
 80040a8:	f7fc fa5e 	bl	8000568 <__aeabi_dmul>
 80040ac:	4682      	mov	sl, r0
 80040ae:	468b      	mov	fp, r1
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc fa56 	bl	8000568 <__aeabi_dmul>
 80040bc:	a341      	add	r3, pc, #260	; (adr r3, 80041c4 <__kernel_sin+0x14c>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	4680      	mov	r8, r0
 80040c4:	4689      	mov	r9, r1
 80040c6:	4650      	mov	r0, sl
 80040c8:	4659      	mov	r1, fp
 80040ca:	f7fc fa4d 	bl	8000568 <__aeabi_dmul>
 80040ce:	a33f      	add	r3, pc, #252	; (adr r3, 80041cc <__kernel_sin+0x154>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc f890 	bl	80001f8 <__aeabi_dsub>
 80040d8:	4652      	mov	r2, sl
 80040da:	465b      	mov	r3, fp
 80040dc:	f7fc fa44 	bl	8000568 <__aeabi_dmul>
 80040e0:	a33c      	add	r3, pc, #240	; (adr r3, 80041d4 <__kernel_sin+0x15c>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f7fc f889 	bl	80001fc <__adddf3>
 80040ea:	4652      	mov	r2, sl
 80040ec:	465b      	mov	r3, fp
 80040ee:	f7fc fa3b 	bl	8000568 <__aeabi_dmul>
 80040f2:	a33a      	add	r3, pc, #232	; (adr r3, 80041dc <__kernel_sin+0x164>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc f87e 	bl	80001f8 <__aeabi_dsub>
 80040fc:	4652      	mov	r2, sl
 80040fe:	465b      	mov	r3, fp
 8004100:	f7fc fa32 	bl	8000568 <__aeabi_dmul>
 8004104:	a337      	add	r3, pc, #220	; (adr r3, 80041e4 <__kernel_sin+0x16c>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f7fc f877 	bl	80001fc <__adddf3>
 800410e:	9b02      	ldr	r3, [sp, #8]
 8004110:	4606      	mov	r6, r0
 8004112:	460f      	mov	r7, r1
 8004114:	b9db      	cbnz	r3, 800414e <__kernel_sin+0xd6>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4650      	mov	r0, sl
 800411c:	4659      	mov	r1, fp
 800411e:	f7fc fa23 	bl	8000568 <__aeabi_dmul>
 8004122:	a325      	add	r3, pc, #148	; (adr r3, 80041b8 <__kernel_sin+0x140>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc f866 	bl	80001f8 <__aeabi_dsub>
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	f7fc fa1a 	bl	8000568 <__aeabi_dmul>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4620      	mov	r0, r4
 800413a:	4629      	mov	r1, r5
 800413c:	f7fc f85e 	bl	80001fc <__adddf3>
 8004140:	4604      	mov	r4, r0
 8004142:	460d      	mov	r5, r1
 8004144:	ec45 4b10 	vmov	d0, r4, r5
 8004148:	b005      	add	sp, #20
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	2200      	movs	r2, #0
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <__kernel_sin+0x148>)
 8004152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004156:	f7fc fa07 	bl	8000568 <__aeabi_dmul>
 800415a:	4632      	mov	r2, r6
 800415c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004160:	463b      	mov	r3, r7
 8004162:	4640      	mov	r0, r8
 8004164:	4649      	mov	r1, r9
 8004166:	f7fc f9ff 	bl	8000568 <__aeabi_dmul>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004172:	f7fc f841 	bl	80001f8 <__aeabi_dsub>
 8004176:	4652      	mov	r2, sl
 8004178:	465b      	mov	r3, fp
 800417a:	f7fc f9f5 	bl	8000568 <__aeabi_dmul>
 800417e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004182:	f7fc f839 	bl	80001f8 <__aeabi_dsub>
 8004186:	a30c      	add	r3, pc, #48	; (adr r3, 80041b8 <__kernel_sin+0x140>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	4606      	mov	r6, r0
 800418e:	460f      	mov	r7, r1
 8004190:	4640      	mov	r0, r8
 8004192:	4649      	mov	r1, r9
 8004194:	f7fc f9e8 	bl	8000568 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4630      	mov	r0, r6
 800419e:	4639      	mov	r1, r7
 80041a0:	f7fc f82c 	bl	80001fc <__adddf3>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4620      	mov	r0, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	f7fc f824 	bl	80001f8 <__aeabi_dsub>
 80041b0:	e7c6      	b.n	8004140 <__kernel_sin+0xc8>
 80041b2:	bf00      	nop
 80041b4:	f3af 8000 	nop.w
 80041b8:	55555549 	.word	0x55555549
 80041bc:	3fc55555 	.word	0x3fc55555
 80041c0:	3fe00000 	.word	0x3fe00000
 80041c4:	5acfd57c 	.word	0x5acfd57c
 80041c8:	3de5d93a 	.word	0x3de5d93a
 80041cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80041d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80041d4:	57b1fe7d 	.word	0x57b1fe7d
 80041d8:	3ec71de3 	.word	0x3ec71de3
 80041dc:	19c161d5 	.word	0x19c161d5
 80041e0:	3f2a01a0 	.word	0x3f2a01a0
 80041e4:	1110f8a6 	.word	0x1110f8a6
 80041e8:	3f811111 	.word	0x3f811111

080041ec <fabs>:
 80041ec:	ec51 0b10 	vmov	r0, r1, d0
 80041f0:	ee10 2a10 	vmov	r2, s0
 80041f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80041f8:	ec43 2b10 	vmov	d0, r2, r3
 80041fc:	4770      	bx	lr
	...

08004200 <floor>:
 8004200:	ec51 0b10 	vmov	r0, r1, d0
 8004204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004208:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800420c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004210:	2e13      	cmp	r6, #19
 8004212:	460c      	mov	r4, r1
 8004214:	ee10 5a10 	vmov	r5, s0
 8004218:	4680      	mov	r8, r0
 800421a:	dc34      	bgt.n	8004286 <floor+0x86>
 800421c:	2e00      	cmp	r6, #0
 800421e:	da16      	bge.n	800424e <floor+0x4e>
 8004220:	a335      	add	r3, pc, #212	; (adr r3, 80042f8 <floor+0xf8>)
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f7fb ffe9 	bl	80001fc <__adddf3>
 800422a:	2200      	movs	r2, #0
 800422c:	2300      	movs	r3, #0
 800422e:	f7fc fc2b 	bl	8000a88 <__aeabi_dcmpgt>
 8004232:	b148      	cbz	r0, 8004248 <floor+0x48>
 8004234:	2c00      	cmp	r4, #0
 8004236:	da59      	bge.n	80042ec <floor+0xec>
 8004238:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800423c:	4a30      	ldr	r2, [pc, #192]	; (8004300 <floor+0x100>)
 800423e:	432b      	orrs	r3, r5
 8004240:	2500      	movs	r5, #0
 8004242:	42ab      	cmp	r3, r5
 8004244:	bf18      	it	ne
 8004246:	4614      	movne	r4, r2
 8004248:	4621      	mov	r1, r4
 800424a:	4628      	mov	r0, r5
 800424c:	e025      	b.n	800429a <floor+0x9a>
 800424e:	4f2d      	ldr	r7, [pc, #180]	; (8004304 <floor+0x104>)
 8004250:	4137      	asrs	r7, r6
 8004252:	ea01 0307 	and.w	r3, r1, r7
 8004256:	4303      	orrs	r3, r0
 8004258:	d01f      	beq.n	800429a <floor+0x9a>
 800425a:	a327      	add	r3, pc, #156	; (adr r3, 80042f8 <floor+0xf8>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fb ffcc 	bl	80001fc <__adddf3>
 8004264:	2200      	movs	r2, #0
 8004266:	2300      	movs	r3, #0
 8004268:	f7fc fc0e 	bl	8000a88 <__aeabi_dcmpgt>
 800426c:	2800      	cmp	r0, #0
 800426e:	d0eb      	beq.n	8004248 <floor+0x48>
 8004270:	2c00      	cmp	r4, #0
 8004272:	bfbe      	ittt	lt
 8004274:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004278:	fa43 f606 	asrlt.w	r6, r3, r6
 800427c:	19a4      	addlt	r4, r4, r6
 800427e:	ea24 0407 	bic.w	r4, r4, r7
 8004282:	2500      	movs	r5, #0
 8004284:	e7e0      	b.n	8004248 <floor+0x48>
 8004286:	2e33      	cmp	r6, #51	; 0x33
 8004288:	dd0b      	ble.n	80042a2 <floor+0xa2>
 800428a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800428e:	d104      	bne.n	800429a <floor+0x9a>
 8004290:	ee10 2a10 	vmov	r2, s0
 8004294:	460b      	mov	r3, r1
 8004296:	f7fb ffb1 	bl	80001fc <__adddf3>
 800429a:	ec41 0b10 	vmov	d0, r0, r1
 800429e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	fa23 f707 	lsr.w	r7, r3, r7
 80042ae:	4207      	tst	r7, r0
 80042b0:	d0f3      	beq.n	800429a <floor+0x9a>
 80042b2:	a311      	add	r3, pc, #68	; (adr r3, 80042f8 <floor+0xf8>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fb ffa0 	bl	80001fc <__adddf3>
 80042bc:	2200      	movs	r2, #0
 80042be:	2300      	movs	r3, #0
 80042c0:	f7fc fbe2 	bl	8000a88 <__aeabi_dcmpgt>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d0bf      	beq.n	8004248 <floor+0x48>
 80042c8:	2c00      	cmp	r4, #0
 80042ca:	da02      	bge.n	80042d2 <floor+0xd2>
 80042cc:	2e14      	cmp	r6, #20
 80042ce:	d103      	bne.n	80042d8 <floor+0xd8>
 80042d0:	3401      	adds	r4, #1
 80042d2:	ea25 0507 	bic.w	r5, r5, r7
 80042d6:	e7b7      	b.n	8004248 <floor+0x48>
 80042d8:	2301      	movs	r3, #1
 80042da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80042de:	fa03 f606 	lsl.w	r6, r3, r6
 80042e2:	4435      	add	r5, r6
 80042e4:	4545      	cmp	r5, r8
 80042e6:	bf38      	it	cc
 80042e8:	18e4      	addcc	r4, r4, r3
 80042ea:	e7f2      	b.n	80042d2 <floor+0xd2>
 80042ec:	2500      	movs	r5, #0
 80042ee:	462c      	mov	r4, r5
 80042f0:	e7aa      	b.n	8004248 <floor+0x48>
 80042f2:	bf00      	nop
 80042f4:	f3af 8000 	nop.w
 80042f8:	8800759c 	.word	0x8800759c
 80042fc:	7e37e43c 	.word	0x7e37e43c
 8004300:	bff00000 	.word	0xbff00000
 8004304:	000fffff 	.word	0x000fffff

08004308 <scalbn>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	ec55 4b10 	vmov	r4, r5, d0
 800430e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004312:	4606      	mov	r6, r0
 8004314:	462b      	mov	r3, r5
 8004316:	b9aa      	cbnz	r2, 8004344 <scalbn+0x3c>
 8004318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800431c:	4323      	orrs	r3, r4
 800431e:	d03b      	beq.n	8004398 <scalbn+0x90>
 8004320:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <scalbn+0xe0>)
 8004322:	4629      	mov	r1, r5
 8004324:	2200      	movs	r2, #0
 8004326:	ee10 0a10 	vmov	r0, s0
 800432a:	f7fc f91d 	bl	8000568 <__aeabi_dmul>
 800432e:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <scalbn+0xe4>)
 8004330:	429e      	cmp	r6, r3
 8004332:	4604      	mov	r4, r0
 8004334:	460d      	mov	r5, r1
 8004336:	da12      	bge.n	800435e <scalbn+0x56>
 8004338:	a327      	add	r3, pc, #156	; (adr r3, 80043d8 <scalbn+0xd0>)
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f7fc f913 	bl	8000568 <__aeabi_dmul>
 8004342:	e009      	b.n	8004358 <scalbn+0x50>
 8004344:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004348:	428a      	cmp	r2, r1
 800434a:	d10c      	bne.n	8004366 <scalbn+0x5e>
 800434c:	ee10 2a10 	vmov	r2, s0
 8004350:	4620      	mov	r0, r4
 8004352:	4629      	mov	r1, r5
 8004354:	f7fb ff52 	bl	80001fc <__adddf3>
 8004358:	4604      	mov	r4, r0
 800435a:	460d      	mov	r5, r1
 800435c:	e01c      	b.n	8004398 <scalbn+0x90>
 800435e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004362:	460b      	mov	r3, r1
 8004364:	3a36      	subs	r2, #54	; 0x36
 8004366:	4432      	add	r2, r6
 8004368:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800436c:	428a      	cmp	r2, r1
 800436e:	dd0b      	ble.n	8004388 <scalbn+0x80>
 8004370:	ec45 4b11 	vmov	d1, r4, r5
 8004374:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80043e0 <scalbn+0xd8>
 8004378:	f000 f83c 	bl	80043f4 <copysign>
 800437c:	a318      	add	r3, pc, #96	; (adr r3, 80043e0 <scalbn+0xd8>)
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	ec51 0b10 	vmov	r0, r1, d0
 8004386:	e7da      	b.n	800433e <scalbn+0x36>
 8004388:	2a00      	cmp	r2, #0
 800438a:	dd08      	ble.n	800439e <scalbn+0x96>
 800438c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004390:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004394:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004398:	ec45 4b10 	vmov	d0, r4, r5
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80043a2:	da0d      	bge.n	80043c0 <scalbn+0xb8>
 80043a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80043a8:	429e      	cmp	r6, r3
 80043aa:	ec45 4b11 	vmov	d1, r4, r5
 80043ae:	dce1      	bgt.n	8004374 <scalbn+0x6c>
 80043b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80043d8 <scalbn+0xd0>
 80043b4:	f000 f81e 	bl	80043f4 <copysign>
 80043b8:	a307      	add	r3, pc, #28	; (adr r3, 80043d8 <scalbn+0xd0>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	e7e0      	b.n	8004382 <scalbn+0x7a>
 80043c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80043c4:	3236      	adds	r2, #54	; 0x36
 80043c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80043ce:	4620      	mov	r0, r4
 80043d0:	4629      	mov	r1, r5
 80043d2:	2200      	movs	r2, #0
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <scalbn+0xe8>)
 80043d6:	e7b2      	b.n	800433e <scalbn+0x36>
 80043d8:	c2f8f359 	.word	0xc2f8f359
 80043dc:	01a56e1f 	.word	0x01a56e1f
 80043e0:	8800759c 	.word	0x8800759c
 80043e4:	7e37e43c 	.word	0x7e37e43c
 80043e8:	43500000 	.word	0x43500000
 80043ec:	ffff3cb0 	.word	0xffff3cb0
 80043f0:	3c900000 	.word	0x3c900000

080043f4 <copysign>:
 80043f4:	ec51 0b10 	vmov	r0, r1, d0
 80043f8:	ee11 0a90 	vmov	r0, s3
 80043fc:	ee10 2a10 	vmov	r2, s0
 8004400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004404:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004408:	ea41 0300 	orr.w	r3, r1, r0
 800440c:	ec43 2b10 	vmov	d0, r2, r3
 8004410:	4770      	bx	lr
	...

08004414 <_init>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	bf00      	nop
 8004418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441a:	bc08      	pop	{r3}
 800441c:	469e      	mov	lr, r3
 800441e:	4770      	bx	lr

08004420 <_fini>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr
