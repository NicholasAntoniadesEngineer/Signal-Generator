
FreeRTOS_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005424  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a8  080056a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b0  080056b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080056b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a78  20000010  080056c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a88  080056c8  00024a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a4e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d26  00000000  00000000  00037a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0003a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0003bab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003516  00000000  00000000  0003cc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ecd7  00000000  00000000  00040186  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e37d1  00000000  00000000  0004ee5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013262e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f8c  00000000  00000000  001326ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080055bc 	.word	0x080055bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080055bc 	.word	0x080055bc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fba8 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f844 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f930 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f8da 	bl	80006b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f902 	bl	800070c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000508:	f000 f8ac 	bl	8000664 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800050c:	f002 f952 	bl	80027b4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSem */
  BinSemHandle = osSemaphoreNew(1, 1, &BinSem_attributes);
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <main+0x68>)
 8000512:	2101      	movs	r1, #1
 8000514:	2001      	movs	r0, #1
 8000516:	f002 fa8b 	bl	8002a30 <osSemaphoreNew>
 800051a:	4602      	mov	r2, r0
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <main+0x6c>)
 800051e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of NormalTask */
  NormalTaskHandle = osThreadNew(StartNormalTask, NULL, &NormalTask_attributes);
 8000520:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <main+0x70>)
 8000522:	2100      	movs	r1, #0
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0x74>)
 8000526:	f002 f9af 	bl	8002888 <osThreadNew>
 800052a:	4602      	mov	r2, r0
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <main+0x78>)
 800052e:	601a      	str	r2, [r3, #0]

  /* creation of HighTask */
  HighTaskHandle = osThreadNew(StartHighTask, NULL, &HighTask_attributes);
 8000530:	4a0e      	ldr	r2, [pc, #56]	; (800056c <main+0x7c>)
 8000532:	2100      	movs	r1, #0
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <main+0x80>)
 8000536:	f002 f9a7 	bl	8002888 <osThreadNew>
 800053a:	4602      	mov	r2, r0
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <main+0x84>)
 800053e:	601a      	str	r2, [r3, #0]

  /* creation of LowTask */
  LowTaskHandle = osThreadNew(StartLowTask, NULL, &LowTask_attributes);
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <main+0x88>)
 8000542:	2100      	movs	r1, #0
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <main+0x8c>)
 8000546:	f002 f99f 	bl	8002888 <osThreadNew>
 800054a:	4602      	mov	r2, r0
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <main+0x90>)
 800054e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000550:	f002 f964 	bl	800281c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x64>
 8000556:	bf00      	nop
 8000558:	08005680 	.word	0x08005680
 800055c:	20004a00 	.word	0x20004a00
 8000560:	08005614 	.word	0x08005614
 8000564:	08000841 	.word	0x08000841
 8000568:	200049bc 	.word	0x200049bc
 800056c:	08005638 	.word	0x08005638
 8000570:	08000871 	.word	0x08000871
 8000574:	20004934 	.word	0x20004934
 8000578:	0800565c 	.word	0x0800565c
 800057c:	080008a9 	.word	0x080008a9
 8000580:	200049b8 	.word	0x200049b8

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 f809 	bl	80055aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <SystemClock_Config+0xd8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a2a      	ldr	r2, [pc, #168]	; (800065c <SystemClock_Config+0xd8>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xd8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xdc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a24      	ldr	r2, [pc, #144]	; (8000660 <SystemClock_Config+0xdc>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xdc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005f8:	23b4      	movs	r3, #180	; 0xb4
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fe55 	bl	80012b8 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f972 	bl	80008fc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000618:	f000 fdfe 	bl	8001218 <HAL_PWREx_EnableOverDrive>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000622:	f000 f96b 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f8a7 	bl	8001798 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000650:	f000 f954 	bl	80008fc <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART1_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800069c:	f001 fcb8 	bl	8002010 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f929 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20004978 	.word	0x20004978
 80006b4:	40011000 	.word	0x40011000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fc8e 	bl	8002010 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f8ff 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200049c0 	.word	0x200049c0
 8000708:	40004400 	.word	0x40004400

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART3_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000744:	f001 fc64 	bl	8002010 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f8d5 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20004938 	.word	0x20004938
 800075c:	40004800 	.word	0x40004800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <MX_GPIO_Init+0xd4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2d      	ldr	r2, [pc, #180]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a26      	ldr	r2, [pc, #152]	; (8000834 <MX_GPIO_Init+0xd4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <MX_GPIO_Init+0xd8>)
 80007ee:	f000 fcf9 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_GPIO_Init+0xdc>)
 8000808:	f000 fb42 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800080c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000826:	f000 fb33 	bl	8000e90 <HAL_GPIO_Init>

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020400 	.word	0x40020400
 800083c:	40020800 	.word	0x40020800

08000840 <StartNormalTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	osDelay(200);
 8000848:	20c8      	movs	r0, #200	; 0xc8
 800084a:	f002 f8c3 	bl	80029d4 <osDelay>
	    HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <StartNormalTask+0x2c>)
 8000854:	f000 fcc6 	bl	80011e4 <HAL_GPIO_WritePin>
	    osDelay(200);
 8000858:	20c8      	movs	r0, #200	; 0xc8
 800085a:	f002 f8bb 	bl	80029d4 <osDelay>
	    HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <StartNormalTask+0x2c>)
 8000864:	f000 fcbe 	bl	80011e4 <HAL_GPIO_WritePin>
	  	osDelay(200);
 8000868:	e7ee      	b.n	8000848 <StartNormalTask+0x8>
 800086a:	bf00      	nop
 800086c:	40020400 	.word	0x40020400

08000870 <StartHighTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHighTask */
void StartHighTask(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHighTask */
  /* Infinite loop */
  for(;;)
  {
	    osDelay(400);
 8000878:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800087c:	f002 f8aa 	bl	80029d4 <osDelay>
	    HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <StartHighTask+0x34>)
 8000888:	f000 fcac 	bl	80011e4 <HAL_GPIO_WritePin>
	    osDelay(400);
 800088c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000890:	f002 f8a0 	bl	80029d4 <osDelay>
	    HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089a:	4802      	ldr	r0, [pc, #8]	; (80008a4 <StartHighTask+0x34>)
 800089c:	f000 fca2 	bl	80011e4 <HAL_GPIO_WritePin>
	    osDelay(400);
 80008a0:	e7ea      	b.n	8000878 <StartHighTask+0x8>
 80008a2:	bf00      	nop
 80008a4:	40020400 	.word	0x40020400

080008a8 <StartLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask */
void StartLowTask(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowTask */
  /* Infinite loop */
  for(;;)
  {
	  	osDelay(100);
 80008b0:	2064      	movs	r0, #100	; 0x64
 80008b2:	f002 f88f 	bl	80029d4 <osDelay>
	    HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2101      	movs	r1, #1
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <StartLowTask+0x2c>)
 80008bc:	f000 fc92 	bl	80011e4 <HAL_GPIO_WritePin>
	    osDelay(100);
 80008c0:	2064      	movs	r0, #100	; 0x64
 80008c2:	f002 f887 	bl	80029d4 <osDelay>
	    HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2101      	movs	r1, #1
 80008ca:	4802      	ldr	r0, [pc, #8]	; (80008d4 <StartLowTask+0x2c>)
 80008cc:	f000 fc8a 	bl	80011e4 <HAL_GPIO_WritePin>
	  	osDelay(100);
 80008d0:	e7ee      	b.n	80008b0 <StartLowTask+0x8>
 80008d2:	bf00      	nop
 80008d4:	40020400 	.word	0x40020400

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 f9cf 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40001000 	.word	0x40001000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_MspInit+0x54>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_MspInit+0x54>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 fa73 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a4c      	ldr	r2, [pc, #304]	; (8000ab4 <HAL_UART_MspInit+0x150>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12d      	bne.n	80009e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
 800098a:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a4a      	ldr	r2, [pc, #296]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	623b      	str	r3, [r7, #32]
 80009a0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
 80009a6:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
 80009bc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d0:	2307      	movs	r3, #7
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	4838      	ldr	r0, [pc, #224]	; (8000abc <HAL_UART_MspInit+0x158>)
 80009dc:	f000 fa58 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e0:	e063      	b.n	8000aaa <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a36      	ldr	r2, [pc, #216]	; (8000ac0 <HAL_UART_MspInit+0x15c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d12c      	bne.n	8000a46 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a30      	ldr	r2, [pc, #192]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 80009f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a24:	230c      	movs	r3, #12
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a34:	2307      	movs	r3, #7
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481f      	ldr	r0, [pc, #124]	; (8000abc <HAL_UART_MspInit+0x158>)
 8000a40:	f000 fa26 	bl	8000e90 <HAL_GPIO_Init>
}
 8000a44:	e031      	b.n	8000aaa <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <HAL_UART_MspInit+0x160>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d12c      	bne.n	8000aaa <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_UART_MspInit+0x154>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <HAL_UART_MspInit+0x164>)
 8000aa6:	f000 f9f3 	bl	8000e90 <HAL_GPIO_Init>
}
 8000aaa:	bf00      	nop
 8000aac:	3738      	adds	r7, #56	; 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40004800 	.word	0x40004800
 8000ac8:	40020400 	.word	0x40020400

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2036      	movs	r0, #54	; 0x36
 8000ae2:	f000 f9ab 	bl	8000e3c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000ae6:	2036      	movs	r0, #54	; 0x36
 8000ae8:	f000 f9c4 	bl	8000e74 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <HAL_InitTick+0xa4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <HAL_InitTick+0xa4>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_InitTick+0xa4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b08:	f107 0210 	add.w	r2, r7, #16
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f80c 	bl	8001b30 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b18:	f000 ffe2 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_InitTick+0xa8>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	0c9b      	lsrs	r3, r3, #18
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_InitTick+0xac>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <HAL_InitTick+0xb0>)
 8000b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_InitTick+0xac>)
 8000b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_InitTick+0xac>)
 8000b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_InitTick+0xac>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_InitTick+0xac>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_InitTick+0xac>)
 8000b52:	f001 f81f 	bl	8001b94 <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d104      	bne.n	8000b66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <HAL_InitTick+0xac>)
 8000b5e:	f001 f84e 	bl	8001bfe <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	20004a04 	.word	0x20004a04
 8000b7c:	40001000 	.word	0x40001000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <TIM6_DAC_IRQHandler+0x10>)
 8000bba:	f001 f844 	bl	8001c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20004a04 	.word	0x20004a04

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <SystemInit+0x28>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <SystemInit+0x28>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SystemInit+0x28>)
 8000bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be2:	609a      	str	r2, [r3, #8]
#endif
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bfa:	e003      	b.n	8000c04 <LoopCopyDataInit>

08000bfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c02:	3104      	adds	r1, #4

08000c04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c0c:	d3f6      	bcc.n	8000bfc <CopyDataInit>
  ldr  r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c10:	e002      	b.n	8000c18 <LoopFillZerobss>

08000c12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c14:	f842 3b04 	str.w	r3, [r2], #4

08000c18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c1c:	d3f9      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd3 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f004 fc93 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fc63 	bl	80004f0 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000c30:	080056b8 	.word	0x080056b8
  ldr  r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c38:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c3c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c40:	20004a88 	.word	0x20004a88

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f8d8 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff ff28 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe46 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20004a44 	.word	0x20004a44

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20004a44 	.word	0x20004a44

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e177      	b.n	800119c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 8166 	bne.w	8001196 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d00b      	beq.n	8000eea <HAL_GPIO_Init+0x5a>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ede:	2b11      	cmp	r3, #17
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0xfc>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b12      	cmp	r3, #18
 8000f8a:	d123      	bne.n	8000fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80c0 	beq.w	8001196 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <HAL_GPIO_Init+0x320>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a64      	ldr	r2, [pc, #400]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b62      	ldr	r3, [pc, #392]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001032:	4a60      	ldr	r2, [pc, #384]	; (80011b4 <HAL_GPIO_Init+0x324>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a57      	ldr	r2, [pc, #348]	; (80011b8 <HAL_GPIO_Init+0x328>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d037      	beq.n	80010ce <HAL_GPIO_Init+0x23e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x32c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d031      	beq.n	80010ca <HAL_GPIO_Init+0x23a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_GPIO_Init+0x330>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d02b      	beq.n	80010c6 <HAL_GPIO_Init+0x236>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d025      	beq.n	80010c2 <HAL_GPIO_Init+0x232>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a53      	ldr	r2, [pc, #332]	; (80011c8 <HAL_GPIO_Init+0x338>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01f      	beq.n	80010be <HAL_GPIO_Init+0x22e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x33c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d019      	beq.n	80010ba <HAL_GPIO_Init+0x22a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a51      	ldr	r2, [pc, #324]	; (80011d0 <HAL_GPIO_Init+0x340>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_Init+0x344>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x222>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <HAL_GPIO_Init+0x348>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x21e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <HAL_GPIO_Init+0x34c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x21a>
 80010a6:	2309      	movs	r3, #9
 80010a8:	e012      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010aa:	230a      	movs	r3, #10
 80010ac:	e010      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ae:	2308      	movs	r3, #8
 80010b0:	e00e      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e00c      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010b6:	2306      	movs	r3, #6
 80010b8:	e00a      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010be:	2304      	movs	r3, #4
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4934      	ldr	r1, [pc, #208]	; (80011b4 <HAL_GPIO_Init+0x324>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <HAL_GPIO_Init+0x350>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001112:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <HAL_GPIO_Init+0x350>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113c:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <HAL_GPIO_Init+0x350>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_GPIO_Init+0x350>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f ae84 	bls.w	8000eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	3724      	adds	r7, #36	; 0x24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40021400 	.word	0x40021400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021c00 	.word	0x40021c00
 80011d8:	40022000 	.word	0x40022000
 80011dc:	40022400 	.word	0x40022400
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001244:	f7ff fd36 	bl	8000cb4 <HAL_GetTick>
 8001248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800124a:	e009      	b.n	8001260 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800124c:	f7ff fd32 	bl	8000cb4 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800125a:	d901      	bls.n	8001260 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e01f      	b.n	80012a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d1ee      	bne.n	800124c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001274:	f7ff fd1e 	bl	8000cb4 <HAL_GetTick>
 8001278:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800127a:	e009      	b.n	8001290 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800127c:	f7ff fd1a 	bl	8000cb4 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800128a:	d901      	bls.n	8001290 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e007      	b.n	80012a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800129c:	d1ee      	bne.n	800127c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	420e0040 	.word	0x420e0040
 80012b0:	40007000 	.word	0x40007000
 80012b4:	420e0044 	.word	0x420e0044

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e25b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4ba3      	ldr	r3, [pc, #652]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4ba0      	ldr	r3, [pc, #640]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b9d      	ldr	r3, [pc, #628]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e236      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a90      	ldr	r2, [pc, #576]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a8a      	ldr	r2, [pc, #552]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a80      	ldr	r2, [pc, #512]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fca0 	bl	8000cb4 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc9c 	bl	8000cb4 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1fb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc8c 	bl	8000cb4 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fc88 	bl	8000cb4 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1e7      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1bb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4952      	ldr	r1, [pc, #328]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fc41 	bl	8000cb4 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc3d 	bl	8000cb4 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e19c      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4940      	ldr	r1, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc20 	bl	8000cb4 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc1c 	bl	8000cb4 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e17b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc00 	bl	8000cb4 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fbfc 	bl	8000cb4 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e15b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbe9 	bl	8000cb4 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fbe5 	bl	8000cb4 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e144      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a0 	beq.w	8001652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d121      	bne.n	8001592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fbab 	bl	8000cb4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e011      	b.n	8001586 <HAL_RCC_OscConfig+0x2ce>
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	42470000 	.word	0x42470000
 800156c:	42470e80 	.word	0x42470e80
 8001570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff fb9e 	bl	8000cb4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0fd      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x4d4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a7c      	ldr	r2, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x312>
 80015b0:	4b77      	ldr	r3, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a76      	ldr	r2, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015ca:	4b71      	ldr	r3, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a70      	ldr	r2, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	4b6e      	ldr	r3, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb63 	bl	8000cb4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fb5f 	bl	8000cb4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0bc      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x33a>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb4d 	bl	8000cb4 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fb49 	bl	8000cb4 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0a6      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8092 	beq.w	8001780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d05c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d141      	bne.n	80016f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fb1d 	bl	8000cb4 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fb19 	bl	8000cb4 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e078      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	4933      	ldr	r1, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff faf2 	bl	8000cb4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff faee 	bl	8000cb4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04d      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x41c>
 80016f2:	e045      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fadb 	bl	8000cb4 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fad7 	bl	8000cb4 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e036      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x44a>
 8001720:	e02e      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e029      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	429a      	cmp	r2, r3
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d115      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	40023800 	.word	0x40023800
 8001794:	42470060 	.word	0x42470060

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa14 	bl	8000cb4 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff fa10 	bl	8000cb4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	fa21 f303 	lsr.w	r3, r1, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8c4 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08005690 	.word	0x08005690
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d007      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x32>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d008      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x38>
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 808d 	bne.w	8001aaa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001992:	60bb      	str	r3, [r7, #8]
       break;
 8001994:	e08c      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e089      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	ea03 0501 	and.w	r5, r3, r1
 80019c8:	ea04 0602 	and.w	r6, r4, r2
 80019cc:	4a3d      	ldr	r2, [pc, #244]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ce:	fb02 f106 	mul.w	r1, r2, r6
 80019d2:	2200      	movs	r2, #0
 80019d4:	fb02 f205 	mul.w	r2, r2, r5
 80019d8:	440a      	add	r2, r1
 80019da:	493a      	ldr	r1, [pc, #232]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80019dc:	fba5 0101 	umull	r0, r1, r5, r1
 80019e0:	1853      	adds	r3, r2, r1
 80019e2:	4619      	mov	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f04f 0400 	mov.w	r4, #0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	f7fe fbff 	bl	80001f0 <__aeabi_uldivmod>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e049      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	ea03 0501 	and.w	r5, r3, r1
 8001a10:	ea04 0602 	and.w	r6, r4, r2
 8001a14:	4629      	mov	r1, r5
 8001a16:	4632      	mov	r2, r6
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	0154      	lsls	r4, r2, #5
 8001a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a26:	014b      	lsls	r3, r1, #5
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	1b49      	subs	r1, r1, r5
 8001a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	f04f 0400 	mov.w	r4, #0
 8001a3a:	0194      	lsls	r4, r2, #6
 8001a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a40:	018b      	lsls	r3, r1, #6
 8001a42:	1a5b      	subs	r3, r3, r1
 8001a44:	eb64 0402 	sbc.w	r4, r4, r2
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	00e2      	lsls	r2, r4, #3
 8001a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a56:	00d9      	lsls	r1, r3, #3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	195b      	adds	r3, r3, r5
 8001a5e:	eb44 0406 	adc.w	r4, r4, r6
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	02a2      	lsls	r2, r4, #10
 8001a6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a70:	0299      	lsls	r1, r3, #10
 8001a72:	460b      	mov	r3, r1
 8001a74:	4614      	mov	r4, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	4621      	mov	r1, r4
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f04f 0400 	mov.w	r4, #0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	f7fe fbb4 	bl	80001f0 <__aeabi_uldivmod>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	60bb      	str	r3, [r7, #8]
      break;
 8001aa8:	e002      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001aac:	60bb      	str	r3, [r7, #8]
      break;
 8001aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	017d7840 	.word	0x017d7840

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	080056a0 	.word	0x080056a0

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4601      	mov	r1, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	080056a0 	.word	0x080056a0

08001b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RCC_GetClockConfig+0x60>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 020f 	and.w	r2, r3, #15
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e01d      	b.n	8001be2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f815 	bl	8001bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 f968 	bl	8001ea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b06      	cmp	r3, #6
 8001c26:	d007      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d122      	bne.n	8001ca2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d11b      	bne.n	8001ca2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0202 	mvn.w	r2, #2
 8001c72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8ee 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
 8001c8e:	e005      	b.n	8001c9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f8e0 	bl	8001e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8f1 	bl	8001e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d122      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d11b      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0204 	mvn.w	r2, #4
 8001cc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8c4 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
 8001ce2:	e005      	b.n	8001cf0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f8b6 	bl	8001e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8c7 	bl	8001e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d122      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11b      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f06f 0208 	mvn.w	r2, #8
 8001d1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f89a 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
 8001d36:	e005      	b.n	8001d44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f88c 	bl	8001e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f89d 	bl	8001e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d122      	bne.n	8001d9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d11b      	bne.n	8001d9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0210 	mvn.w	r2, #16
 8001d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2208      	movs	r2, #8
 8001d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f870 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
 8001d8a:	e005      	b.n	8001d98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f862 	bl	8001e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f873 	bl	8001e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10e      	bne.n	8001dca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f06f 0201 	mvn.w	r2, #1
 8001dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7fe fd87 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d10e      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b80      	cmp	r3, #128	; 0x80
 8001de4:	d107      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f903 	bl	8001ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d10e      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d107      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f838 	bl	8001e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d10e      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d107      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f06f 0220 	mvn.w	r2, #32
 8001e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8cd 	bl	8001fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec6:	d00f      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3d      	ldr	r2, [pc, #244]	; (8001fc0 <TIM_Base_SetConfig+0x118>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00b      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3c      	ldr	r2, [pc, #240]	; (8001fc4 <TIM_Base_SetConfig+0x11c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <TIM_Base_SetConfig+0x120>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <TIM_Base_SetConfig+0x124>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d108      	bne.n	8001efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <TIM_Base_SetConfig+0x114>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02b      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f08:	d027      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <TIM_Base_SetConfig+0x118>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d023      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <TIM_Base_SetConfig+0x11c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <TIM_Base_SetConfig+0x120>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01b      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a29      	ldr	r2, [pc, #164]	; (8001fcc <TIM_Base_SetConfig+0x124>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d017      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a28      	ldr	r2, [pc, #160]	; (8001fd0 <TIM_Base_SetConfig+0x128>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <TIM_Base_SetConfig+0x12c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00f      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <TIM_Base_SetConfig+0x130>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00b      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <TIM_Base_SetConfig+0x134>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <TIM_Base_SetConfig+0x138>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <TIM_Base_SetConfig+0x13c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <TIM_Base_SetConfig+0x114>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <TIM_Base_SetConfig+0xf8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <TIM_Base_SetConfig+0x124>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d103      	bne.n	8001fa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	615a      	str	r2, [r3, #20]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	40014000 	.word	0x40014000
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800
 8001fdc:	40001800 	.word	0x40001800
 8001fe0:	40001c00 	.word	0x40001c00
 8001fe4:	40002000 	.word	0x40002000

08001fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e03f      	b.n	80020a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc94 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f829 	bl	80020ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020ee:	f023 030c 	bic.w	r3, r3, #12
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	68f9      	ldr	r1, [r7, #12]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211a:	f040 818b 	bne.w	8002434 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4ac1      	ldr	r2, [pc, #772]	; (8002428 <UART_SetConfig+0x37c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d005      	beq.n	8002134 <UART_SetConfig+0x88>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4abf      	ldr	r2, [pc, #764]	; (800242c <UART_SetConfig+0x380>)
 800212e:	4293      	cmp	r3, r2
 8002130:	f040 80bd 	bne.w	80022ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002134:	f7ff fce8 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002138:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	461d      	mov	r5, r3
 800213e:	f04f 0600 	mov.w	r6, #0
 8002142:	46a8      	mov	r8, r5
 8002144:	46b1      	mov	r9, r6
 8002146:	eb18 0308 	adds.w	r3, r8, r8
 800214a:	eb49 0409 	adc.w	r4, r9, r9
 800214e:	4698      	mov	r8, r3
 8002150:	46a1      	mov	r9, r4
 8002152:	eb18 0805 	adds.w	r8, r8, r5
 8002156:	eb49 0906 	adc.w	r9, r9, r6
 800215a:	f04f 0100 	mov.w	r1, #0
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002166:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800216a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800216e:	4688      	mov	r8, r1
 8002170:	4691      	mov	r9, r2
 8002172:	eb18 0005 	adds.w	r0, r8, r5
 8002176:	eb49 0106 	adc.w	r1, r9, r6
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	461d      	mov	r5, r3
 8002180:	f04f 0600 	mov.w	r6, #0
 8002184:	196b      	adds	r3, r5, r5
 8002186:	eb46 0406 	adc.w	r4, r6, r6
 800218a:	461a      	mov	r2, r3
 800218c:	4623      	mov	r3, r4
 800218e:	f7fe f82f 	bl	80001f0 <__aeabi_uldivmod>
 8002192:	4603      	mov	r3, r0
 8002194:	460c      	mov	r4, r1
 8002196:	461a      	mov	r2, r3
 8002198:	4ba5      	ldr	r3, [pc, #660]	; (8002430 <UART_SetConfig+0x384>)
 800219a:	fba3 2302 	umull	r2, r3, r3, r2
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	461d      	mov	r5, r3
 80021a8:	f04f 0600 	mov.w	r6, #0
 80021ac:	46a9      	mov	r9, r5
 80021ae:	46b2      	mov	sl, r6
 80021b0:	eb19 0309 	adds.w	r3, r9, r9
 80021b4:	eb4a 040a 	adc.w	r4, sl, sl
 80021b8:	4699      	mov	r9, r3
 80021ba:	46a2      	mov	sl, r4
 80021bc:	eb19 0905 	adds.w	r9, r9, r5
 80021c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021d8:	4689      	mov	r9, r1
 80021da:	4692      	mov	sl, r2
 80021dc:	eb19 0005 	adds.w	r0, r9, r5
 80021e0:	eb4a 0106 	adc.w	r1, sl, r6
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	461d      	mov	r5, r3
 80021ea:	f04f 0600 	mov.w	r6, #0
 80021ee:	196b      	adds	r3, r5, r5
 80021f0:	eb46 0406 	adc.w	r4, r6, r6
 80021f4:	461a      	mov	r2, r3
 80021f6:	4623      	mov	r3, r4
 80021f8:	f7fd fffa 	bl	80001f0 <__aeabi_uldivmod>
 80021fc:	4603      	mov	r3, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	461a      	mov	r2, r3
 8002202:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <UART_SetConfig+0x384>)
 8002204:	fba3 1302 	umull	r1, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	2164      	movs	r1, #100	; 0x64
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	3332      	adds	r3, #50	; 0x32
 8002216:	4a86      	ldr	r2, [pc, #536]	; (8002430 <UART_SetConfig+0x384>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002224:	4498      	add	r8, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	461d      	mov	r5, r3
 800222a:	f04f 0600 	mov.w	r6, #0
 800222e:	46a9      	mov	r9, r5
 8002230:	46b2      	mov	sl, r6
 8002232:	eb19 0309 	adds.w	r3, r9, r9
 8002236:	eb4a 040a 	adc.w	r4, sl, sl
 800223a:	4699      	mov	r9, r3
 800223c:	46a2      	mov	sl, r4
 800223e:	eb19 0905 	adds.w	r9, r9, r5
 8002242:	eb4a 0a06 	adc.w	sl, sl, r6
 8002246:	f04f 0100 	mov.w	r1, #0
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800225a:	4689      	mov	r9, r1
 800225c:	4692      	mov	sl, r2
 800225e:	eb19 0005 	adds.w	r0, r9, r5
 8002262:	eb4a 0106 	adc.w	r1, sl, r6
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	461d      	mov	r5, r3
 800226c:	f04f 0600 	mov.w	r6, #0
 8002270:	196b      	adds	r3, r5, r5
 8002272:	eb46 0406 	adc.w	r4, r6, r6
 8002276:	461a      	mov	r2, r3
 8002278:	4623      	mov	r3, r4
 800227a:	f7fd ffb9 	bl	80001f0 <__aeabi_uldivmod>
 800227e:	4603      	mov	r3, r0
 8002280:	460c      	mov	r4, r1
 8002282:	461a      	mov	r2, r3
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <UART_SetConfig+0x384>)
 8002286:	fba3 1302 	umull	r1, r3, r3, r2
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2164      	movs	r1, #100	; 0x64
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	3332      	adds	r3, #50	; 0x32
 8002298:	4a65      	ldr	r2, [pc, #404]	; (8002430 <UART_SetConfig+0x384>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	f003 0207 	and.w	r2, r3, #7
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4442      	add	r2, r8
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e26f      	b.n	800278e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ae:	f7ff fc17 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 80022b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	461d      	mov	r5, r3
 80022b8:	f04f 0600 	mov.w	r6, #0
 80022bc:	46a8      	mov	r8, r5
 80022be:	46b1      	mov	r9, r6
 80022c0:	eb18 0308 	adds.w	r3, r8, r8
 80022c4:	eb49 0409 	adc.w	r4, r9, r9
 80022c8:	4698      	mov	r8, r3
 80022ca:	46a1      	mov	r9, r4
 80022cc:	eb18 0805 	adds.w	r8, r8, r5
 80022d0:	eb49 0906 	adc.w	r9, r9, r6
 80022d4:	f04f 0100 	mov.w	r1, #0
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022e8:	4688      	mov	r8, r1
 80022ea:	4691      	mov	r9, r2
 80022ec:	eb18 0005 	adds.w	r0, r8, r5
 80022f0:	eb49 0106 	adc.w	r1, r9, r6
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	461d      	mov	r5, r3
 80022fa:	f04f 0600 	mov.w	r6, #0
 80022fe:	196b      	adds	r3, r5, r5
 8002300:	eb46 0406 	adc.w	r4, r6, r6
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	f7fd ff72 	bl	80001f0 <__aeabi_uldivmod>
 800230c:	4603      	mov	r3, r0
 800230e:	460c      	mov	r4, r1
 8002310:	461a      	mov	r2, r3
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <UART_SetConfig+0x384>)
 8002314:	fba3 2302 	umull	r2, r3, r3, r2
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	461d      	mov	r5, r3
 8002322:	f04f 0600 	mov.w	r6, #0
 8002326:	46a9      	mov	r9, r5
 8002328:	46b2      	mov	sl, r6
 800232a:	eb19 0309 	adds.w	r3, r9, r9
 800232e:	eb4a 040a 	adc.w	r4, sl, sl
 8002332:	4699      	mov	r9, r3
 8002334:	46a2      	mov	sl, r4
 8002336:	eb19 0905 	adds.w	r9, r9, r5
 800233a:	eb4a 0a06 	adc.w	sl, sl, r6
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800234a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800234e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002352:	4689      	mov	r9, r1
 8002354:	4692      	mov	sl, r2
 8002356:	eb19 0005 	adds.w	r0, r9, r5
 800235a:	eb4a 0106 	adc.w	r1, sl, r6
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	461d      	mov	r5, r3
 8002364:	f04f 0600 	mov.w	r6, #0
 8002368:	196b      	adds	r3, r5, r5
 800236a:	eb46 0406 	adc.w	r4, r6, r6
 800236e:	461a      	mov	r2, r3
 8002370:	4623      	mov	r3, r4
 8002372:	f7fd ff3d 	bl	80001f0 <__aeabi_uldivmod>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	461a      	mov	r2, r3
 800237c:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <UART_SetConfig+0x384>)
 800237e:	fba3 1302 	umull	r1, r3, r3, r2
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2164      	movs	r1, #100	; 0x64
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3332      	adds	r3, #50	; 0x32
 8002390:	4a27      	ldr	r2, [pc, #156]	; (8002430 <UART_SetConfig+0x384>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800239e:	4498      	add	r8, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	461d      	mov	r5, r3
 80023a4:	f04f 0600 	mov.w	r6, #0
 80023a8:	46a9      	mov	r9, r5
 80023aa:	46b2      	mov	sl, r6
 80023ac:	eb19 0309 	adds.w	r3, r9, r9
 80023b0:	eb4a 040a 	adc.w	r4, sl, sl
 80023b4:	4699      	mov	r9, r3
 80023b6:	46a2      	mov	sl, r4
 80023b8:	eb19 0905 	adds.w	r9, r9, r5
 80023bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80023c0:	f04f 0100 	mov.w	r1, #0
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023d4:	4689      	mov	r9, r1
 80023d6:	4692      	mov	sl, r2
 80023d8:	eb19 0005 	adds.w	r0, r9, r5
 80023dc:	eb4a 0106 	adc.w	r1, sl, r6
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	461d      	mov	r5, r3
 80023e6:	f04f 0600 	mov.w	r6, #0
 80023ea:	196b      	adds	r3, r5, r5
 80023ec:	eb46 0406 	adc.w	r4, r6, r6
 80023f0:	461a      	mov	r2, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	f7fd fefc 	bl	80001f0 <__aeabi_uldivmod>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <UART_SetConfig+0x384>)
 8002400:	fba3 1302 	umull	r1, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	2164      	movs	r1, #100	; 0x64
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	3332      	adds	r3, #50	; 0x32
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <UART_SetConfig+0x384>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	f003 0207 	and.w	r2, r3, #7
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4442      	add	r2, r8
 8002424:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002426:	e1b2      	b.n	800278e <UART_SetConfig+0x6e2>
 8002428:	40011000 	.word	0x40011000
 800242c:	40011400 	.word	0x40011400
 8002430:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4ad7      	ldr	r2, [pc, #860]	; (8002798 <UART_SetConfig+0x6ec>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d005      	beq.n	800244a <UART_SetConfig+0x39e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4ad6      	ldr	r2, [pc, #856]	; (800279c <UART_SetConfig+0x6f0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	f040 80d1 	bne.w	80025ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800244a:	f7ff fb5d 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 800244e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	469a      	mov	sl, r3
 8002454:	f04f 0b00 	mov.w	fp, #0
 8002458:	46d0      	mov	r8, sl
 800245a:	46d9      	mov	r9, fp
 800245c:	eb18 0308 	adds.w	r3, r8, r8
 8002460:	eb49 0409 	adc.w	r4, r9, r9
 8002464:	4698      	mov	r8, r3
 8002466:	46a1      	mov	r9, r4
 8002468:	eb18 080a 	adds.w	r8, r8, sl
 800246c:	eb49 090b 	adc.w	r9, r9, fp
 8002470:	f04f 0100 	mov.w	r1, #0
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800247c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002480:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002484:	4688      	mov	r8, r1
 8002486:	4691      	mov	r9, r2
 8002488:	eb1a 0508 	adds.w	r5, sl, r8
 800248c:	eb4b 0609 	adc.w	r6, fp, r9
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4619      	mov	r1, r3
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	f04f 0400 	mov.w	r4, #0
 80024a2:	0094      	lsls	r4, r2, #2
 80024a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024a8:	008b      	lsls	r3, r1, #2
 80024aa:	461a      	mov	r2, r3
 80024ac:	4623      	mov	r3, r4
 80024ae:	4628      	mov	r0, r5
 80024b0:	4631      	mov	r1, r6
 80024b2:	f7fd fe9d 	bl	80001f0 <__aeabi_uldivmod>
 80024b6:	4603      	mov	r3, r0
 80024b8:	460c      	mov	r4, r1
 80024ba:	461a      	mov	r2, r3
 80024bc:	4bb8      	ldr	r3, [pc, #736]	; (80027a0 <UART_SetConfig+0x6f4>)
 80024be:	fba3 2302 	umull	r2, r3, r3, r2
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	469b      	mov	fp, r3
 80024cc:	f04f 0c00 	mov.w	ip, #0
 80024d0:	46d9      	mov	r9, fp
 80024d2:	46e2      	mov	sl, ip
 80024d4:	eb19 0309 	adds.w	r3, r9, r9
 80024d8:	eb4a 040a 	adc.w	r4, sl, sl
 80024dc:	4699      	mov	r9, r3
 80024de:	46a2      	mov	sl, r4
 80024e0:	eb19 090b 	adds.w	r9, r9, fp
 80024e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024fc:	4689      	mov	r9, r1
 80024fe:	4692      	mov	sl, r2
 8002500:	eb1b 0509 	adds.w	r5, fp, r9
 8002504:	eb4c 060a 	adc.w	r6, ip, sl
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4619      	mov	r1, r3
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	f04f 0400 	mov.w	r4, #0
 800251a:	0094      	lsls	r4, r2, #2
 800251c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002520:	008b      	lsls	r3, r1, #2
 8002522:	461a      	mov	r2, r3
 8002524:	4623      	mov	r3, r4
 8002526:	4628      	mov	r0, r5
 8002528:	4631      	mov	r1, r6
 800252a:	f7fd fe61 	bl	80001f0 <__aeabi_uldivmod>
 800252e:	4603      	mov	r3, r0
 8002530:	460c      	mov	r4, r1
 8002532:	461a      	mov	r2, r3
 8002534:	4b9a      	ldr	r3, [pc, #616]	; (80027a0 <UART_SetConfig+0x6f4>)
 8002536:	fba3 1302 	umull	r1, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2164      	movs	r1, #100	; 0x64
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	3332      	adds	r3, #50	; 0x32
 8002548:	4a95      	ldr	r2, [pc, #596]	; (80027a0 <UART_SetConfig+0x6f4>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002554:	4498      	add	r8, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	469b      	mov	fp, r3
 800255a:	f04f 0c00 	mov.w	ip, #0
 800255e:	46d9      	mov	r9, fp
 8002560:	46e2      	mov	sl, ip
 8002562:	eb19 0309 	adds.w	r3, r9, r9
 8002566:	eb4a 040a 	adc.w	r4, sl, sl
 800256a:	4699      	mov	r9, r3
 800256c:	46a2      	mov	sl, r4
 800256e:	eb19 090b 	adds.w	r9, r9, fp
 8002572:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800258a:	4689      	mov	r9, r1
 800258c:	4692      	mov	sl, r2
 800258e:	eb1b 0509 	adds.w	r5, fp, r9
 8002592:	eb4c 060a 	adc.w	r6, ip, sl
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4619      	mov	r1, r3
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	f04f 0400 	mov.w	r4, #0
 80025a8:	0094      	lsls	r4, r2, #2
 80025aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ae:	008b      	lsls	r3, r1, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4623      	mov	r3, r4
 80025b4:	4628      	mov	r0, r5
 80025b6:	4631      	mov	r1, r6
 80025b8:	f7fd fe1a 	bl	80001f0 <__aeabi_uldivmod>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b77      	ldr	r3, [pc, #476]	; (80027a0 <UART_SetConfig+0x6f4>)
 80025c4:	fba3 1302 	umull	r1, r3, r3, r2
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	2164      	movs	r1, #100	; 0x64
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	3332      	adds	r3, #50	; 0x32
 80025d6:	4a72      	ldr	r2, [pc, #456]	; (80027a0 <UART_SetConfig+0x6f4>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	f003 020f 	and.w	r2, r3, #15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4442      	add	r2, r8
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	e0d0      	b.n	800278e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ec:	f7ff fa78 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 80025f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	469a      	mov	sl, r3
 80025f6:	f04f 0b00 	mov.w	fp, #0
 80025fa:	46d0      	mov	r8, sl
 80025fc:	46d9      	mov	r9, fp
 80025fe:	eb18 0308 	adds.w	r3, r8, r8
 8002602:	eb49 0409 	adc.w	r4, r9, r9
 8002606:	4698      	mov	r8, r3
 8002608:	46a1      	mov	r9, r4
 800260a:	eb18 080a 	adds.w	r8, r8, sl
 800260e:	eb49 090b 	adc.w	r9, r9, fp
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800261e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002622:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002626:	4688      	mov	r8, r1
 8002628:	4691      	mov	r9, r2
 800262a:	eb1a 0508 	adds.w	r5, sl, r8
 800262e:	eb4b 0609 	adc.w	r6, fp, r9
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4619      	mov	r1, r3
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	f04f 0400 	mov.w	r4, #0
 8002644:	0094      	lsls	r4, r2, #2
 8002646:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800264a:	008b      	lsls	r3, r1, #2
 800264c:	461a      	mov	r2, r3
 800264e:	4623      	mov	r3, r4
 8002650:	4628      	mov	r0, r5
 8002652:	4631      	mov	r1, r6
 8002654:	f7fd fdcc 	bl	80001f0 <__aeabi_uldivmod>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	461a      	mov	r2, r3
 800265e:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <UART_SetConfig+0x6f4>)
 8002660:	fba3 2302 	umull	r2, r3, r3, r2
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	469b      	mov	fp, r3
 800266e:	f04f 0c00 	mov.w	ip, #0
 8002672:	46d9      	mov	r9, fp
 8002674:	46e2      	mov	sl, ip
 8002676:	eb19 0309 	adds.w	r3, r9, r9
 800267a:	eb4a 040a 	adc.w	r4, sl, sl
 800267e:	4699      	mov	r9, r3
 8002680:	46a2      	mov	sl, r4
 8002682:	eb19 090b 	adds.w	r9, r9, fp
 8002686:	eb4a 0a0c 	adc.w	sl, sl, ip
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800269a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800269e:	4689      	mov	r9, r1
 80026a0:	4692      	mov	sl, r2
 80026a2:	eb1b 0509 	adds.w	r5, fp, r9
 80026a6:	eb4c 060a 	adc.w	r6, ip, sl
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4619      	mov	r1, r3
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	f04f 0400 	mov.w	r4, #0
 80026bc:	0094      	lsls	r4, r2, #2
 80026be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026c2:	008b      	lsls	r3, r1, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	4628      	mov	r0, r5
 80026ca:	4631      	mov	r1, r6
 80026cc:	f7fd fd90 	bl	80001f0 <__aeabi_uldivmod>
 80026d0:	4603      	mov	r3, r0
 80026d2:	460c      	mov	r4, r1
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <UART_SetConfig+0x6f4>)
 80026d8:	fba3 1302 	umull	r1, r3, r3, r2
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	2164      	movs	r1, #100	; 0x64
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	3332      	adds	r3, #50	; 0x32
 80026ea:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <UART_SetConfig+0x6f4>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f6:	4498      	add	r8, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	469b      	mov	fp, r3
 80026fc:	f04f 0c00 	mov.w	ip, #0
 8002700:	46d9      	mov	r9, fp
 8002702:	46e2      	mov	sl, ip
 8002704:	eb19 0309 	adds.w	r3, r9, r9
 8002708:	eb4a 040a 	adc.w	r4, sl, sl
 800270c:	4699      	mov	r9, r3
 800270e:	46a2      	mov	sl, r4
 8002710:	eb19 090b 	adds.w	r9, r9, fp
 8002714:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002724:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002728:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800272c:	4689      	mov	r9, r1
 800272e:	4692      	mov	sl, r2
 8002730:	eb1b 0509 	adds.w	r5, fp, r9
 8002734:	eb4c 060a 	adc.w	r6, ip, sl
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f04f 0400 	mov.w	r4, #0
 800274a:	0094      	lsls	r4, r2, #2
 800274c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002750:	008b      	lsls	r3, r1, #2
 8002752:	461a      	mov	r2, r3
 8002754:	4623      	mov	r3, r4
 8002756:	4628      	mov	r0, r5
 8002758:	4631      	mov	r1, r6
 800275a:	f7fd fd49 	bl	80001f0 <__aeabi_uldivmod>
 800275e:	4603      	mov	r3, r0
 8002760:	460c      	mov	r4, r1
 8002762:	461a      	mov	r2, r3
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <UART_SetConfig+0x6f4>)
 8002766:	fba3 1302 	umull	r1, r3, r3, r2
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2164      	movs	r1, #100	; 0x64
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	3332      	adds	r3, #50	; 0x32
 8002778:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <UART_SetConfig+0x6f4>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4442      	add	r2, r8
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	e7ff      	b.n	800278e <UART_SetConfig+0x6e2>
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002798:	40011000 	.word	0x40011000
 800279c:	40011400 	.word	0x40011400
 80027a0:	51eb851f 	.word	0x51eb851f

080027a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ba:	f3ef 8305 	mrs	r3, IPSR
 80027be:	60bb      	str	r3, [r7, #8]
  return(result);
 80027c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c6:	f3ef 8310 	mrs	r3, PRIMASK
 80027ca:	607b      	str	r3, [r7, #4]
  return(result);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027d2:	f3ef 8311 	mrs	r3, BASEPRI
 80027d6:	603b      	str	r3, [r7, #0]
  return(result);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <osKernelInitialize+0x3a>
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <osKernelInitialize+0x64>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d103      	bne.n	80027ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80027e6:	f06f 0305 	mvn.w	r3, #5
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e00c      	b.n	8002808 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <osKernelInitialize+0x64>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <osKernelInitialize+0x64>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e002      	b.n	8002808 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002808:	68fb      	ldr	r3, [r7, #12]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	2000002c 	.word	0x2000002c

0800281c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002822:	f3ef 8305 	mrs	r3, IPSR
 8002826:	60bb      	str	r3, [r7, #8]
  return(result);
 8002828:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8310 	mrs	r3, PRIMASK
 8002832:	607b      	str	r3, [r7, #4]
  return(result);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800283a:	f3ef 8311 	mrs	r3, BASEPRI
 800283e:	603b      	str	r3, [r7, #0]
  return(result);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <osKernelStart+0x3a>
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <osKernelStart+0x68>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d103      	bne.n	8002856 <osKernelStart+0x3a>
    stat = osErrorISR;
 800284e:	f06f 0305 	mvn.w	r3, #5
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e010      	b.n	8002878 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <osKernelStart+0x68>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d109      	bne.n	8002872 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800285e:	f7ff ffa1 	bl	80027a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <osKernelStart+0x68>)
 8002864:	2202      	movs	r2, #2
 8002866:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002868:	f001 fa00 	bl	8003c6c <vTaskStartScheduler>
      stat = osOK;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e002      	b.n	8002878 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
 8002876:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002878:	68fb      	ldr	r3, [r7, #12]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000002c 	.word	0x2000002c

08002888 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af04      	add	r7, sp, #16
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002898:	f3ef 8305 	mrs	r3, IPSR
 800289c:	61fb      	str	r3, [r7, #28]
  return(result);
 800289e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 808f 	bne.w	80029c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a6:	f3ef 8310 	mrs	r3, PRIMASK
 80028aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028b2:	f3ef 8311 	mrs	r3, BASEPRI
 80028b6:	617b      	str	r3, [r7, #20]
  return(result);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <osThreadNew+0x3e>
 80028be:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <osThreadNew+0x148>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d07e      	beq.n	80029c4 <osThreadNew+0x13c>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d07b      	beq.n	80029c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80028d0:	2318      	movs	r3, #24
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
 80028dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d045      	beq.n	8002970 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <osThreadNew+0x6a>
        name = attr->name;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <osThreadNew+0x90>
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	2b38      	cmp	r3, #56	; 0x38
 800290a:	d805      	bhi.n	8002918 <osThreadNew+0x90>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <osThreadNew+0x94>
        return (NULL);
 8002918:	2300      	movs	r3, #0
 800291a:	e054      	b.n	80029c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <osThreadNew+0xca>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b5b      	cmp	r3, #91	; 0x5b
 800293a:	d90a      	bls.n	8002952 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <osThreadNew+0xca>
        mem = 1;
 800294c:	2301      	movs	r3, #1
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	e010      	b.n	8002974 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <osThreadNew+0xec>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d108      	bne.n	8002974 <osThreadNew+0xec>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <osThreadNew+0xec>
          mem = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	e001      	b.n	8002974 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d110      	bne.n	800299c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002982:	9202      	str	r2, [sp, #8]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 ff99 	bl	80038c8 <xTaskCreateStatic>
 8002996:	4603      	mov	r3, r0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	e013      	b.n	80029c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d110      	bne.n	80029c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 ffe1 	bl	800397c <xTaskCreate>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d001      	beq.n	80029c4 <osThreadNew+0x13c>
          hTask = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029c4:	693b      	ldr	r3, [r7, #16]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000002c 	.word	0x2000002c

080029d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029dc:	f3ef 8305 	mrs	r3, IPSR
 80029e0:	613b      	str	r3, [r7, #16]
  return(result);
 80029e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10f      	bne.n	8002a08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e8:	f3ef 8310 	mrs	r3, PRIMASK
 80029ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029f4:	f3ef 8311 	mrs	r3, BASEPRI
 80029f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <osDelay+0x3c>
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <osDelay+0x58>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d103      	bne.n	8002a10 <osDelay+0x3c>
    stat = osErrorISR;
 8002a08:	f06f 0305 	mvn.w	r3, #5
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e007      	b.n	8002a20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f001 f8f2 	bl	8003c04 <vTaskDelay>
    }
  }

  return (stat);
 8002a20:	697b      	ldr	r3, [r7, #20]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000002c 	.word	0x2000002c

08002a30 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a40:	f3ef 8305 	mrs	r3, IPSR
 8002a44:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 8087 	bne.w	8002b5c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a52:	617b      	str	r3, [r7, #20]
  return(result);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a5e:	613b      	str	r3, [r7, #16]
  return(result);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <osSemaphoreNew+0x3e>
 8002a66:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <osSemaphoreNew+0x138>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d076      	beq.n	8002b5c <osSemaphoreNew+0x12c>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d073      	beq.n	8002b5c <osSemaphoreNew+0x12c>
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d86f      	bhi.n	8002b5c <osSemaphoreNew+0x12c>
    mem = -1;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <osSemaphoreNew+0x6e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b4f      	cmp	r3, #79	; 0x4f
 8002a96:	d902      	bls.n	8002a9e <osSemaphoreNew+0x6e>
        mem = 1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	623b      	str	r3, [r7, #32]
 8002a9c:	e00c      	b.n	8002ab8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d108      	bne.n	8002ab8 <osSemaphoreNew+0x88>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <osSemaphoreNew+0x88>
          mem = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	e001      	b.n	8002ab8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d04d      	beq.n	8002b5c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d129      	bne.n	8002b1a <osSemaphoreNew+0xea>
        if (mem == 1) {
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10b      	bne.n	8002ae4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2001      	movs	r0, #1
 8002adc:	f000 f996 	bl	8002e0c <xQueueGenericCreateStatic>
 8002ae0:	6278      	str	r0, [r7, #36]	; 0x24
 8002ae2:	e005      	b.n	8002af0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f000 fa02 	bl	8002ef2 <xQueueGenericCreate>
 8002aee:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d022      	beq.n	8002b3c <osSemaphoreNew+0x10c>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01f      	beq.n	8002b3c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002afc:	2300      	movs	r3, #0
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b04:	f000 fabe 	bl	8003084 <xQueueGenericSend>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d016      	beq.n	8002b3c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8002b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b10:	f000 fd22 	bl	8003558 <vQueueDelete>
            hSemaphore = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	e010      	b.n	8002b3c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	461a      	mov	r2, r3
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fa44 	bl	8002fb6 <xQueueCreateCountingSemaphoreStatic>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8002b30:	e004      	b.n	8002b3c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fa73 	bl	8003020 <xQueueCreateCountingSemaphore>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <osSemaphoreNew+0x120>
          name = attr->name;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e001      	b.n	8002b54 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002b54:	69f9      	ldr	r1, [r7, #28]
 8002b56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b58:	f000 fe30 	bl	80037bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2000002c 	.word	0x2000002c

08002b6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <vApplicationGetIdleTaskMemory+0x30>)
 8002b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	601a      	str	r2, [r3, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000030 	.word	0x20000030
 8002b9c:	2000008c 	.word	0x2000008c

08002ba0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <vApplicationGetTimerTaskMemory+0x2c>)
 8002bb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <vApplicationGetTimerTaskMemory+0x30>)
 8002bb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bbe:	601a      	str	r2, [r3, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	2000028c 	.word	0x2000028c
 8002bd0:	200002e8 	.word	0x200002e8

08002bd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f103 0208 	add.w	r2, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f103 0208 	add.w	r2, r3, #8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f103 0208 	add.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d103      	bne.n	8002c96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e00c      	b.n	8002cb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e002      	b.n	8002ca4 <vListInsert+0x2e>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d2f6      	bcs.n	8002c9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6852      	ldr	r2, [r2, #4]
 8002d08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d103      	bne.n	8002d1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	1e5a      	subs	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	e7fe      	b.n	8002d62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002d64:	f002 f902 	bl	8004f6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	441a      	add	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	3b01      	subs	r3, #1
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	441a      	add	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	22ff      	movs	r2, #255	; 0xff
 8002da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d114      	bne.n	8002de4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01a      	beq.n	8002df8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3310      	adds	r3, #16
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 f9d0 	bl	800416c <xTaskRemoveFromEventList>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <xQueueGenericReset+0xcc>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	e009      	b.n	8002df8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3310      	adds	r3, #16
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fef3 	bl	8002bd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3324      	adds	r3, #36	; 0x24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff feee 	bl	8002bd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002df8:	f002 f8e6 	bl	8004fc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dfc:	2301      	movs	r3, #1
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08e      	sub	sp, #56	; 0x38
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <xQueueGenericCreateStatic+0x28>
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e32:	e7fe      	b.n	8002e32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <xQueueGenericCreateStatic+0x42>
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <xQueueGenericCreateStatic+0x4e>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <xQueueGenericCreateStatic+0x52>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <xQueueGenericCreateStatic+0x54>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <xQueueGenericCreateStatic+0x6c>
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	e7fe      	b.n	8002e76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <xQueueGenericCreateStatic+0x78>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <xQueueGenericCreateStatic+0x7c>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <xQueueGenericCreateStatic+0x7e>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <xQueueGenericCreateStatic+0x96>
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ea2:	2350      	movs	r3, #80	; 0x50
 8002ea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b50      	cmp	r3, #80	; 0x50
 8002eaa:	d009      	beq.n	8002ec0 <xQueueGenericCreateStatic+0xb4>
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e7fe      	b.n	8002ebe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ec0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ed4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f844 	bl	8002f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3730      	adds	r7, #48	; 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b08a      	sub	sp, #40	; 0x28
 8002ef6:	af02      	add	r7, sp, #8
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <xQueueGenericCreate+0x28>
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	e004      	b.n	8002f30 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3350      	adds	r3, #80	; 0x50
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 f933 	bl	80051a0 <pvPortMalloc>
 8002f3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d011      	beq.n	8002f66 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3350      	adds	r3, #80	; 0x50
 8002f4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f54:	79fa      	ldrb	r2, [r7, #7]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f805 	bl	8002f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f66:	69bb      	ldr	r3, [r7, #24]
	}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e002      	b.n	8002f92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	69b8      	ldr	r0, [r7, #24]
 8002fa2:	f7ff fecb 	bl	8002d3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b08a      	sub	sp, #40	; 0x28
 8002fba:	af02      	add	r7, sp, #8
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <xQueueCreateCountingSemaphoreStatic+0x26>
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	e7fe      	b.n	8002fda <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d909      	bls.n	8002ff8 <xQueueCreateCountingSemaphoreStatic+0x42>
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e7fe      	b.n	8002ff6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff ff02 	bl	8002e0c <xQueueGenericCreateStatic>
 8003008:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003016:	69fb      	ldr	r3, [r7, #28]
	}
 8003018:	4618      	mov	r0, r3
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <xQueueCreateCountingSemaphore+0x24>
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	e7fe      	b.n	8003042 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	d909      	bls.n	8003060 <xQueueCreateCountingSemaphore+0x40>
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e7fe      	b.n	800305e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003060:	2202      	movs	r2, #2
 8003062:	2100      	movs	r1, #0
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff44 	bl	8002ef2 <xQueueGenericCreate>
 800306a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003078:	697b      	ldr	r3, [r7, #20]
	}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <xQueueGenericSend+0x30>
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b2:	e7fe      	b.n	80030b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <xQueueGenericSend+0x3e>
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xQueueGenericSend+0x42>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueGenericSend+0x44>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <xQueueGenericSend+0x5c>
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	e7fe      	b.n	80030de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d103      	bne.n	80030ee <xQueueGenericSend+0x6a>
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <xQueueGenericSend+0x6e>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <xQueueGenericSend+0x70>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <xQueueGenericSend+0x88>
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	623b      	str	r3, [r7, #32]
 800310a:	e7fe      	b.n	800310a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800310c:	f001 f9e4 	bl	80044d8 <xTaskGetSchedulerState>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <xQueueGenericSend+0x98>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <xQueueGenericSend+0x9c>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <xQueueGenericSend+0x9e>
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <xQueueGenericSend+0xb6>
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	e7fe      	b.n	8003138 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800313a:	f001 ff17 	bl	8004f6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <xQueueGenericSend+0xcc>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d129      	bne.n	80031a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003156:	f000 fa21 	bl	800359c <prvCopyDataToQueue>
 800315a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	3324      	adds	r3, #36	; 0x24
 8003168:	4618      	mov	r0, r3
 800316a:	f000 ffff 	bl	800416c <xTaskRemoveFromEventList>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003174:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <xQueueGenericSend+0x1f0>)
 8003176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	e00a      	b.n	800319c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <xQueueGenericSend+0x1f0>)
 800318e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800319c:	f001 ff14 	bl	8004fc8 <vPortExitCritical>
				return pdPASS;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e063      	b.n	800326c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031aa:	f001 ff0d 	bl	8004fc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e05c      	b.n	800326c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f837 	bl	8004230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031c6:	f001 feff 	bl	8004fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031ca:	f000 fdb3 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ce:	f001 fecd 	bl	8004f6c <vPortEnterCritical>
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d8:	b25b      	sxtb	r3, r3
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d103      	bne.n	80031e8 <xQueueGenericSend+0x164>
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d103      	bne.n	80031fe <xQueueGenericSend+0x17a>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fe:	f001 fee3 	bl	8004fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003202:	1d3a      	adds	r2, r7, #4
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f001 f826 	bl	800425c <xTaskCheckForTimeOut>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d124      	bne.n	8003260 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003218:	f000 fab8 	bl	800378c <prvIsQueueFull>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d018      	beq.n	8003254 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	3310      	adds	r3, #16
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f000 ff50 	bl	80040d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003232:	f000 fa43 	bl	80036bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003236:	f000 fd8b 	bl	8003d50 <xTaskResumeAll>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f47f af7c 	bne.w	800313a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <xQueueGenericSend+0x1f0>)
 8003244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	e772      	b.n	800313a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003256:	f000 fa31 	bl	80036bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800325a:	f000 fd79 	bl	8003d50 <xTaskResumeAll>
 800325e:	e76c      	b.n	800313a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003262:	f000 fa2b 	bl	80036bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003266:	f000 fd73 	bl	8003d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800326a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800326c:	4618      	mov	r0, r3
 800326e:	3738      	adds	r7, #56	; 0x38
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08e      	sub	sp, #56	; 0x38
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <xQueueGenericSendFromISR+0x2c>
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	e7fe      	b.n	80032a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <xQueueGenericSendFromISR+0x3a>
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <xQueueGenericSendFromISR+0x3e>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <xQueueGenericSendFromISR+0x40>
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <xQueueGenericSendFromISR+0x58>
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	e7fe      	b.n	80032ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d103      	bne.n	80032de <xQueueGenericSendFromISR+0x66>
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <xQueueGenericSendFromISR+0x6a>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <xQueueGenericSendFromISR+0x6c>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <xQueueGenericSendFromISR+0x84>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e7fe      	b.n	80032fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032fc:	f001 ff12 	bl	8005124 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003300:	f3ef 8211 	mrs	r2, BASEPRI
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	61ba      	str	r2, [r7, #24]
 8003316:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003318:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	429a      	cmp	r2, r3
 8003326:	d302      	bcc.n	800332e <xQueueGenericSendFromISR+0xb6>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d12c      	bne.n	8003388 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333e:	f000 f92d 	bl	800359c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003342:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d112      	bne.n	8003372 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d016      	beq.n	8003382 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	3324      	adds	r3, #36	; 0x24
 8003358:	4618      	mov	r0, r3
 800335a:	f000 ff07 	bl	800416c <xTaskRemoveFromEventList>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e007      	b.n	8003382 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003376:	3301      	adds	r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	b25a      	sxtb	r2, r3
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003382:	2301      	movs	r3, #1
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003386:	e001      	b.n	800338c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003388:	2300      	movs	r3, #0
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003398:	4618      	mov	r0, r3
 800339a:	3738      	adds	r7, #56	; 0x38
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <xQueueReceive+0x2e>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	e7fe      	b.n	80033cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <xQueueReceive+0x3c>
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <xQueueReceive+0x40>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <xQueueReceive+0x42>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <xQueueReceive+0x5a>
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	e7fe      	b.n	80033f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033fa:	f001 f86d 	bl	80044d8 <xTaskGetSchedulerState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <xQueueReceive+0x6a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <xQueueReceive+0x6e>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <xQueueReceive+0x70>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <xQueueReceive+0x88>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e7fe      	b.n	8003426 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003428:	f001 fda0 	bl	8004f6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01f      	beq.n	8003478 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800343c:	f000 f918 	bl	8003670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	1e5a      	subs	r2, r3, #1
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00f      	beq.n	8003470 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fe89 	bl	800416c <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003460:	4b3c      	ldr	r3, [pc, #240]	; (8003554 <xQueueReceive+0x1b4>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003470:	f001 fdaa 	bl	8004fc8 <vPortExitCritical>
				return pdPASS;
 8003474:	2301      	movs	r3, #1
 8003476:	e069      	b.n	800354c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800347e:	f001 fda3 	bl	8004fc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003482:	2300      	movs	r3, #0
 8003484:	e062      	b.n	800354c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fecd 	bl	8004230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800349a:	f001 fd95 	bl	8004fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800349e:	f000 fc49 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034a2:	f001 fd63 	bl	8004f6c <vPortEnterCritical>
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d103      	bne.n	80034bc <xQueueReceive+0x11c>
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d103      	bne.n	80034d2 <xQueueReceive+0x132>
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d2:	f001 fd79 	bl	8004fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d6:	1d3a      	adds	r2, r7, #4
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 febc 	bl	800425c <xTaskCheckForTimeOut>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d123      	bne.n	8003532 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ec:	f000 f938 	bl	8003760 <prvIsQueueEmpty>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d017      	beq.n	8003526 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	3324      	adds	r3, #36	; 0x24
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fde6 	bl	80040d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003506:	f000 f8d9 	bl	80036bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800350a:	f000 fc21 	bl	8003d50 <xTaskResumeAll>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d189      	bne.n	8003428 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <xQueueReceive+0x1b4>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	e780      	b.n	8003428 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003528:	f000 f8c8 	bl	80036bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800352c:	f000 fc10 	bl	8003d50 <xTaskResumeAll>
 8003530:	e77a      	b.n	8003428 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003534:	f000 f8c2 	bl	80036bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003538:	f000 fc0a 	bl	8003d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800353c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800353e:	f000 f90f 	bl	8003760 <prvIsQueueEmpty>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f43f af6f 	beq.w	8003428 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800354a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800354c:	4618      	mov	r0, r3
 800354e:	3730      	adds	r7, #48	; 0x30
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <vQueueDelete+0x26>
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	e7fe      	b.n	800357c <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f944 	bl	800380c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f001 fec8 	bl	8005324 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d14d      	bne.n	800365e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 ffa4 	bl	8004514 <xTaskPriorityDisinherit>
 80035cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e043      	b.n	800365e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d119      	bne.n	8003610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6858      	ldr	r0, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	461a      	mov	r2, r3
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	f001 ffd4 	bl	8005594 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	441a      	add	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	d32b      	bcc.n	800365e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e026      	b.n	800365e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68d8      	ldr	r0, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	461a      	mov	r2, r3
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	f001 ffba 	bl	8005594 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	425b      	negs	r3, r3
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d207      	bcs.n	800364c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	425b      	negs	r3, r3
 8003646:	441a      	add	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d105      	bne.n	800365e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3b01      	subs	r3, #1
 800365c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003666:	697b      	ldr	r3, [r7, #20]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	441a      	add	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d303      	bcc.n	80036a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68d9      	ldr	r1, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	f001 ff70 	bl	8005594 <memcpy>
	}
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036c4:	f001 fc52 	bl	8004f6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036d0:	e011      	b.n	80036f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3324      	adds	r3, #36	; 0x24
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fd44 	bl	800416c <xTaskRemoveFromEventList>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036ea:	f000 fe17 	bl	800431c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dce9      	bgt.n	80036d2 <prvUnlockQueue+0x16>
 80036fe:	e000      	b.n	8003702 <prvUnlockQueue+0x46>
					break;
 8003700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	22ff      	movs	r2, #255	; 0xff
 8003706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800370a:	f001 fc5d 	bl	8004fc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800370e:	f001 fc2d 	bl	8004f6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800371a:	e011      	b.n	8003740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d012      	beq.n	800374a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3310      	adds	r3, #16
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fd1f 	bl	800416c <xTaskRemoveFromEventList>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003734:	f000 fdf2 	bl	800431c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003738:	7bbb      	ldrb	r3, [r7, #14]
 800373a:	3b01      	subs	r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003744:	2b00      	cmp	r3, #0
 8003746:	dce9      	bgt.n	800371c <prvUnlockQueue+0x60>
 8003748:	e000      	b.n	800374c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800374a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003754:	f001 fc38 	bl	8004fc8 <vPortExitCritical>
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003768:	f001 fc00 	bl	8004f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e001      	b.n	800377e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800377e:	f001 fc23 	bl	8004fc8 <vPortExitCritical>

	return xReturn;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003794:	f001 fbea 	bl	8004f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d102      	bne.n	80037aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e001      	b.n	80037ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ae:	f001 fc0b 	bl	8004fc8 <vPortExitCritical>

	return xReturn;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e014      	b.n	80037f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <vQueueAddToRegistry+0x4c>)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037d8:	490b      	ldr	r1, [pc, #44]	; (8003808 <vQueueAddToRegistry+0x4c>)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <vQueueAddToRegistry+0x4c>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037ee:	e005      	b.n	80037fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b07      	cmp	r3, #7
 80037fa:	d9e7      	bls.n	80037cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	20004a48 	.word	0x20004a48

0800380c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e016      	b.n	8003848 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <vQueueUnregisterQueue+0x50>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d10b      	bne.n	8003842 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <vQueueUnregisterQueue+0x50>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2100      	movs	r1, #0
 8003830:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003834:	4a09      	ldr	r2, [pc, #36]	; (800385c <vQueueUnregisterQueue+0x50>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	2200      	movs	r2, #0
 800383e:	605a      	str	r2, [r3, #4]
				break;
 8003840:	e005      	b.n	800384e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b07      	cmp	r3, #7
 800384c:	d9e5      	bls.n	800381a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20004a48 	.word	0x20004a48

08003860 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003870:	f001 fb7c 	bl	8004f6c <vPortEnterCritical>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800387a:	b25b      	sxtb	r3, r3
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d103      	bne.n	800388a <vQueueWaitForMessageRestricted+0x2a>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003890:	b25b      	sxtb	r3, r3
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d103      	bne.n	80038a0 <vQueueWaitForMessageRestricted+0x40>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038a0:	f001 fb92 	bl	8004fc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3324      	adds	r3, #36	; 0x24
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fc2f 	bl	8004118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff fefe 	bl	80036bc <prvUnlockQueue>
	}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	; 0x38
 80038cc:	af04      	add	r7, sp, #16
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <xTaskCreateStatic+0x28>
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	e7fe      	b.n	80038ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <xTaskCreateStatic+0x42>
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e7fe      	b.n	8003908 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800390a:	235c      	movs	r3, #92	; 0x5c
 800390c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b5c      	cmp	r3, #92	; 0x5c
 8003912:	d009      	beq.n	8003928 <xTaskCreateStatic+0x60>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e7fe      	b.n	8003926 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003928:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01e      	beq.n	800396e <xTaskCreateStatic+0xa6>
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01b      	beq.n	800396e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800393e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003948:	2300      	movs	r3, #0
 800394a:	9303      	str	r3, [sp, #12]
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f850 	bl	8003a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003968:	f000 f8dc 	bl	8003b24 <prvAddNewTaskToReadyList>
 800396c:	e001      	b.n	8003972 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003972:	697b      	ldr	r3, [r7, #20]
	}
 8003974:	4618      	mov	r0, r3
 8003976:	3728      	adds	r7, #40	; 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af04      	add	r7, sp, #16
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4618      	mov	r0, r3
 8003992:	f001 fc05 	bl	80051a0 <pvPortMalloc>
 8003996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800399e:	205c      	movs	r0, #92	; 0x5c
 80039a0:	f001 fbfe 	bl	80051a0 <pvPortMalloc>
 80039a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
 80039b2:	e005      	b.n	80039c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039b4:	6978      	ldr	r0, [r7, #20]
 80039b6:	f001 fcb5 	bl	8005324 <vPortFree>
 80039ba:	e001      	b.n	80039c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	2300      	movs	r3, #0
 80039d2:	9303      	str	r3, [sp, #12]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f80e 	bl	8003a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ea:	69f8      	ldr	r0, [r7, #28]
 80039ec:	f000 f89a 	bl	8003b24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039f0:	2301      	movs	r3, #1
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	e002      	b.n	80039fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039fc:	69bb      	ldr	r3, [r7, #24]
	}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b088      	sub	sp, #32
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	21a5      	movs	r1, #165	; 0xa5
 8003a20:	f001 fdc3 	bl	80055aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f023 0307 	bic.w	r3, r3, #7
 8003a3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <prvInitialiseNewTask+0x56>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e7fe      	b.n	8003a5a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01f      	beq.n	8003aa2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e012      	b.n	8003a8e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	7819      	ldrb	r1, [r3, #0]
 8003a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	3334      	adds	r3, #52	; 0x34
 8003a78:	460a      	mov	r2, r1
 8003a7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d9e9      	bls.n	8003a68 <prvInitialiseNewTask+0x62>
 8003a94:	e000      	b.n	8003a98 <prvInitialiseNewTask+0x92>
			{
				break;
 8003a96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aa0:	e003      	b.n	8003aaa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2b37      	cmp	r3, #55	; 0x37
 8003aae:	d901      	bls.n	8003ab4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ab0:	2337      	movs	r3, #55	; 0x37
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003abe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f8a2 	bl	8002c14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f89d 	bl	8002c14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	69b8      	ldr	r0, [r7, #24]
 8003b04:	f001 f90c 	bl	8004d20 <pxPortInitialiseStack>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b1a:	bf00      	nop
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b2c:	f001 fa1e 	bl	8004f6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b42:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d110      	bne.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b50:	f000 fc08 	bl	8004364 <prvInitialiseTaskLists>
 8003b54:	e00d      	b.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <prvAddNewTaskToReadyList+0xcc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d802      	bhi.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <prvAddNewTaskToReadyList+0xd0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <prvAddNewTaskToReadyList+0xd0>)
 8003b7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <prvAddNewTaskToReadyList+0xd0>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <prvAddNewTaskToReadyList+0xd4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d903      	bls.n	8003b98 <prvAddNewTaskToReadyList+0x74>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <prvAddNewTaskToReadyList+0xd4>)
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <prvAddNewTaskToReadyList+0xd8>)
 8003ba6:	441a      	add	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f7ff f83d 	bl	8002c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bb4:	f001 fa08 	bl	8004fc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <prvAddNewTaskToReadyList+0xcc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d207      	bcs.n	8003bde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <prvAddNewTaskToReadyList+0xdc>)
 8003bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000bbc 	.word	0x20000bbc
 8003bec:	200006e8 	.word	0x200006e8
 8003bf0:	20000bc8 	.word	0x20000bc8
 8003bf4:	20000bd8 	.word	0x20000bd8
 8003bf8:	20000bc4 	.word	0x20000bc4
 8003bfc:	200006ec 	.word	0x200006ec
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <vTaskDelay+0x60>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <vTaskDelay+0x2e>
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	e7fe      	b.n	8003c30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c32:	f000 f87f 	bl	8003d34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c36:	2100      	movs	r1, #0
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fcd7 	bl	80045ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c3e:	f000 f887 	bl	8003d50 <xTaskResumeAll>
 8003c42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <vTaskDelay+0x64>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000be4 	.word	0x20000be4
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c7a:	463a      	mov	r2, r7
 8003c7c:	1d39      	adds	r1, r7, #4
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff72 	bl	8002b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	9202      	str	r2, [sp, #8]
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	460a      	mov	r2, r1
 8003c9a:	4920      	ldr	r1, [pc, #128]	; (8003d1c <vTaskStartScheduler+0xb0>)
 8003c9c:	4820      	ldr	r0, [pc, #128]	; (8003d20 <vTaskStartScheduler+0xb4>)
 8003c9e:	f7ff fe13 	bl	80038c8 <xTaskCreateStatic>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <vTaskStartScheduler+0xb8>)
 8003ca6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <vTaskStartScheduler+0xb8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e001      	b.n	8003cba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cc0:	f000 fce8 	bl	8004694 <xTimerCreateTimerTask>
 8003cc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d115      	bne.n	8003cf8 <vTaskStartScheduler+0x8c>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <vTaskStartScheduler+0xbc>)
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <vTaskStartScheduler+0xc0>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <vTaskStartScheduler+0xc4>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cf2:	f001 f89d 	bl	8004e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cf6:	e00d      	b.n	8003d14 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d109      	bne.n	8003d14 <vTaskStartScheduler+0xa8>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e7fe      	b.n	8003d12 <vTaskStartScheduler+0xa6>
}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	080055fc 	.word	0x080055fc
 8003d20:	08004335 	.word	0x08004335
 8003d24:	20000be0 	.word	0x20000be0
 8003d28:	20000bdc 	.word	0x20000bdc
 8003d2c:	20000bc8 	.word	0x20000bc8
 8003d30:	20000bc0 	.word	0x20000bc0

08003d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <vTaskSuspendAll+0x18>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a03      	ldr	r2, [pc, #12]	; (8003d4c <vTaskSuspendAll+0x18>)
 8003d40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	20000be4 	.word	0x20000be4

08003d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <xTaskResumeAll+0x2a>
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	e7fe      	b.n	8003d78 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d7a:	f001 f8f7 	bl	8004f6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	4a37      	ldr	r2, [pc, #220]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d162      	bne.n	8003e56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <xTaskResumeAll+0x118>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05e      	beq.n	8003e56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d98:	e02f      	b.n	8003dfa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <xTaskResumeAll+0x11c>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ff9e 	bl	8002ce8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe ff99 	bl	8002ce8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <xTaskResumeAll+0x120>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d903      	bls.n	8003dca <xTaskResumeAll+0x7a>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <xTaskResumeAll+0x120>)
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <xTaskResumeAll+0x124>)
 8003dd8:	441a      	add	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7fe ff24 	bl	8002c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <xTaskResumeAll+0x128>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dfa:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <xTaskResumeAll+0x11c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1cb      	bne.n	8003d9a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e08:	f000 fb46 	bl	8004498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <xTaskResumeAll+0x130>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d010      	beq.n	8003e3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e18:	f000 f846 	bl	8003ea8 <xTaskIncrementTick>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f1      	bne.n	8003e18 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <xTaskResumeAll+0x130>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <xTaskResumeAll+0x134>)
 8003e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e56:	f001 f8b7 	bl	8004fc8 <vPortExitCritical>

	return xAlreadyYielded;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000be4 	.word	0x20000be4
 8003e68:	20000bbc 	.word	0x20000bbc
 8003e6c:	20000b7c 	.word	0x20000b7c
 8003e70:	20000bc4 	.word	0x20000bc4
 8003e74:	200006ec 	.word	0x200006ec
 8003e78:	200006e8 	.word	0x200006e8
 8003e7c:	20000bd0 	.word	0x20000bd0
 8003e80:	20000bcc 	.word	0x20000bcc
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <xTaskGetTickCount+0x1c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e94:	687b      	ldr	r3, [r7, #4]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000bc0 	.word	0x20000bc0

08003ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <xTaskIncrementTick+0x144>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 8088 	bne.w	8003fcc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ebc:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <xTaskIncrementTick+0x148>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ec4:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <xTaskIncrementTick+0x148>)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11f      	bne.n	8003f10 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ed0:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <xTaskIncrementTick+0x46>
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	e7fe      	b.n	8003eec <xTaskIncrementTick+0x44>
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <xTaskIncrementTick+0x150>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3e      	ldr	r2, [pc, #248]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4a3e      	ldr	r2, [pc, #248]	; (8003ff8 <xTaskIncrementTick+0x150>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b3e      	ldr	r3, [pc, #248]	; (8003ffc <xTaskIncrementTick+0x154>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3301      	adds	r3, #1
 8003f08:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <xTaskIncrementTick+0x154>)
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	f000 fac4 	bl	8004498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f10:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <xTaskIncrementTick+0x158>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d349      	bcc.n	8003fae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <xTaskIncrementTick+0x158>)
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	601a      	str	r2, [r3, #0]
					break;
 8003f2c:	e03f      	b.n	8003fae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d203      	bcs.n	8003f4e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f46:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <xTaskIncrementTick+0x158>)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f4c:	e02f      	b.n	8003fae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fec8 	bl	8002ce8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3318      	adds	r3, #24
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe febf 	bl	8002ce8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <xTaskIncrementTick+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d903      	bls.n	8003f7e <xTaskIncrementTick+0xd6>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	4a22      	ldr	r2, [pc, #136]	; (8004004 <xTaskIncrementTick+0x15c>)
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <xTaskIncrementTick+0x160>)
 8003f8c:	441a      	add	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fe fe4a 	bl	8002c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	; (800400c <xTaskIncrementTick+0x164>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3b8      	bcc.n	8003f1a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fac:	e7b5      	b.n	8003f1a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fae:	4b17      	ldr	r3, [pc, #92]	; (800400c <xTaskIncrementTick+0x164>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	4914      	ldr	r1, [pc, #80]	; (8004008 <xTaskIncrementTick+0x160>)
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d907      	bls.n	8003fd6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e004      	b.n	8003fd6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xTaskIncrementTick+0x168>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	4a0f      	ldr	r2, [pc, #60]	; (8004010 <xTaskIncrementTick+0x168>)
 8003fd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <xTaskIncrementTick+0x16c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fe2:	697b      	ldr	r3, [r7, #20]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000be4 	.word	0x20000be4
 8003ff0:	20000bc0 	.word	0x20000bc0
 8003ff4:	20000b74 	.word	0x20000b74
 8003ff8:	20000b78 	.word	0x20000b78
 8003ffc:	20000bd4 	.word	0x20000bd4
 8004000:	20000bdc 	.word	0x20000bdc
 8004004:	20000bc4 	.word	0x20000bc4
 8004008:	200006ec 	.word	0x200006ec
 800400c:	200006e8 	.word	0x200006e8
 8004010:	20000bcc 	.word	0x20000bcc
 8004014:	20000bd0 	.word	0x20000bd0

08004018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800401e:	4b27      	ldr	r3, [pc, #156]	; (80040bc <vTaskSwitchContext+0xa4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004026:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <vTaskSwitchContext+0xa8>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800402c:	e040      	b.n	80040b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <vTaskSwitchContext+0xa8>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004034:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <vTaskSwitchContext+0xac>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	e00f      	b.n	800405c <vTaskSwitchContext+0x44>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <vTaskSwitchContext+0x3e>
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e7fe      	b.n	8004054 <vTaskSwitchContext+0x3c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b01      	subs	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	491a      	ldr	r1, [pc, #104]	; (80040c8 <vTaskSwitchContext+0xb0>)
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0e5      	beq.n	800403c <vTaskSwitchContext+0x24>
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <vTaskSwitchContext+0xb0>)
 800407c:	4413      	add	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3308      	adds	r3, #8
 8004092:	429a      	cmp	r2, r3
 8004094:	d104      	bne.n	80040a0 <vTaskSwitchContext+0x88>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <vTaskSwitchContext+0xb4>)
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <vTaskSwitchContext+0xac>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20000be4 	.word	0x20000be4
 80040c0:	20000bd0 	.word	0x20000bd0
 80040c4:	20000bc4 	.word	0x20000bc4
 80040c8:	200006ec 	.word	0x200006ec
 80040cc:	200006e8 	.word	0x200006e8

080040d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <vTaskPlaceOnEventList+0x24>
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e7fe      	b.n	80040f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <vTaskPlaceOnEventList+0x44>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3318      	adds	r3, #24
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fe fdba 	bl	8002c76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004102:	2101      	movs	r1, #1
 8004104:	6838      	ldr	r0, [r7, #0]
 8004106:	f000 fa71 	bl	80045ec <prvAddCurrentTaskToDelayedList>
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200006e8 	.word	0x200006e8

08004118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <vTaskPlaceOnEventListRestricted+0x26>
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e7fe      	b.n	800413c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <vTaskPlaceOnEventListRestricted+0x50>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3318      	adds	r3, #24
 8004144:	4619      	mov	r1, r3
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7fe fd71 	bl	8002c2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	68b8      	ldr	r0, [r7, #8]
 800415c:	f000 fa46 	bl	80045ec <prvAddCurrentTaskToDelayedList>
	}
 8004160:	bf00      	nop
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	200006e8 	.word	0x200006e8

0800416c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <xTaskRemoveFromEventList+0x2a>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e7fe      	b.n	8004194 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3318      	adds	r3, #24
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fda4 	bl	8002ce8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <xTaskRemoveFromEventList+0xac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fd9b 	bl	8002ce8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <xTaskRemoveFromEventList+0xb0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d903      	bls.n	80041c6 <xTaskRemoveFromEventList+0x5a>
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <xTaskRemoveFromEventList+0xb0>)
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <xTaskRemoveFromEventList+0xb4>)
 80041d4:	441a      	add	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7fe fd26 	bl	8002c2e <vListInsertEnd>
 80041e2:	e005      	b.n	80041f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	3318      	adds	r3, #24
 80041e8:	4619      	mov	r1, r3
 80041ea:	480e      	ldr	r0, [pc, #56]	; (8004224 <xTaskRemoveFromEventList+0xb8>)
 80041ec:	f7fe fd1f 	bl	8002c2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <xTaskRemoveFromEventList+0xbc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d905      	bls.n	800420a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <xTaskRemoveFromEventList+0xc0>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e001      	b.n	800420e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800420e:	697b      	ldr	r3, [r7, #20]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000be4 	.word	0x20000be4
 800421c:	20000bc4 	.word	0x20000bc4
 8004220:	200006ec 	.word	0x200006ec
 8004224:	20000b7c 	.word	0x20000b7c
 8004228:	200006e8 	.word	0x200006e8
 800422c:	20000bd0 	.word	0x20000bd0

08004230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <vTaskInternalSetTimeOutState+0x24>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <vTaskInternalSetTimeOutState+0x28>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	20000bd4 	.word	0x20000bd4
 8004258:	20000bc0 	.word	0x20000bc0

0800425c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <xTaskCheckForTimeOut+0x24>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e7fe      	b.n	800427e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <xTaskCheckForTimeOut+0x3e>
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e7fe      	b.n	8004298 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800429a:	f000 fe67 	bl	8004f6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <xTaskCheckForTimeOut+0xb8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d102      	bne.n	80042be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e023      	b.n	8004306 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <xTaskCheckForTimeOut+0xbc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d007      	beq.n	80042da <xTaskCheckForTimeOut+0x7e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042d4:	2301      	movs	r3, #1
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e015      	b.n	8004306 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d20b      	bcs.n	80042fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff9d 	bl	8004230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e004      	b.n	8004306 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004306:	f000 fe5f 	bl	8004fc8 <vPortExitCritical>

	return xReturn;
 800430a:	69fb      	ldr	r3, [r7, #28]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000bc0 	.word	0x20000bc0
 8004318:	20000bd4 	.word	0x20000bd4

0800431c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <vTaskMissedYield+0x14>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000bd0 	.word	0x20000bd0

08004334 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800433c:	f000 f852 	bl	80043e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <prvIdleTask+0x28>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d9f9      	bls.n	800433c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <prvIdleTask+0x2c>)
 800434a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004358:	e7f0      	b.n	800433c <prvIdleTask+0x8>
 800435a:	bf00      	nop
 800435c:	200006ec 	.word	0x200006ec
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	e00c      	b.n	800438a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <prvInitialiseTaskLists+0x60>)
 800437c:	4413      	add	r3, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fc28 	bl	8002bd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3301      	adds	r3, #1
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b37      	cmp	r3, #55	; 0x37
 800438e:	d9ef      	bls.n	8004370 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004390:	480d      	ldr	r0, [pc, #52]	; (80043c8 <prvInitialiseTaskLists+0x64>)
 8004392:	f7fe fc1f 	bl	8002bd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004396:	480d      	ldr	r0, [pc, #52]	; (80043cc <prvInitialiseTaskLists+0x68>)
 8004398:	f7fe fc1c 	bl	8002bd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800439c:	480c      	ldr	r0, [pc, #48]	; (80043d0 <prvInitialiseTaskLists+0x6c>)
 800439e:	f7fe fc19 	bl	8002bd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043a2:	480c      	ldr	r0, [pc, #48]	; (80043d4 <prvInitialiseTaskLists+0x70>)
 80043a4:	f7fe fc16 	bl	8002bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043a8:	480b      	ldr	r0, [pc, #44]	; (80043d8 <prvInitialiseTaskLists+0x74>)
 80043aa:	f7fe fc13 	bl	8002bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <prvInitialiseTaskLists+0x78>)
 80043b0:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <prvInitialiseTaskLists+0x64>)
 80043b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <prvInitialiseTaskLists+0x7c>)
 80043b6:	4a05      	ldr	r2, [pc, #20]	; (80043cc <prvInitialiseTaskLists+0x68>)
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200006ec 	.word	0x200006ec
 80043c8:	20000b4c 	.word	0x20000b4c
 80043cc:	20000b60 	.word	0x20000b60
 80043d0:	20000b7c 	.word	0x20000b7c
 80043d4:	20000b90 	.word	0x20000b90
 80043d8:	20000ba8 	.word	0x20000ba8
 80043dc:	20000b74 	.word	0x20000b74
 80043e0:	20000b78 	.word	0x20000b78

080043e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ea:	e019      	b.n	8004420 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043ec:	f000 fdbe 	bl	8004f6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <prvCheckTasksWaitingTermination+0x4c>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fc73 	bl	8002ce8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <prvCheckTasksWaitingTermination+0x50>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3b01      	subs	r3, #1
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <prvCheckTasksWaitingTermination+0x50>)
 800440a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <prvCheckTasksWaitingTermination+0x54>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3b01      	subs	r3, #1
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <prvCheckTasksWaitingTermination+0x54>)
 8004414:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004416:	f000 fdd7 	bl	8004fc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f80e 	bl	800443c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <prvCheckTasksWaitingTermination+0x54>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e1      	bne.n	80043ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000b90 	.word	0x20000b90
 8004434:	20000bbc 	.word	0x20000bbc
 8004438:	20000ba4 	.word	0x20000ba4

0800443c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4618      	mov	r0, r3
 8004454:	f000 ff66 	bl	8005324 <vPortFree>
				vPortFree( pxTCB );
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 ff63 	bl	8005324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800445e:	e017      	b.n	8004490 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004466:	2b01      	cmp	r3, #1
 8004468:	d103      	bne.n	8004472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 ff5a 	bl	8005324 <vPortFree>
	}
 8004470:	e00e      	b.n	8004490 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004478:	2b02      	cmp	r3, #2
 800447a:	d009      	beq.n	8004490 <prvDeleteTCB+0x54>
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e7fe      	b.n	800448e <prvDeleteTCB+0x52>
	}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <prvResetNextTaskUnblockTime+0x38>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <prvResetNextTaskUnblockTime+0x3c>)
 80044aa:	f04f 32ff 	mov.w	r2, #4294967295
 80044ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044b0:	e008      	b.n	80044c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <prvResetNextTaskUnblockTime+0x38>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <prvResetNextTaskUnblockTime+0x3c>)
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000b74 	.word	0x20000b74
 80044d4:	20000bdc 	.word	0x20000bdc

080044d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <xTaskGetSchedulerState+0x34>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044e6:	2301      	movs	r3, #1
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	e008      	b.n	80044fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <xTaskGetSchedulerState+0x38>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044f4:	2302      	movs	r3, #2
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	e001      	b.n	80044fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044fe:	687b      	ldr	r3, [r7, #4]
	}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20000bc8 	.word	0x20000bc8
 8004510:	20000be4 	.word	0x20000be4

08004514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d054      	beq.n	80045d4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800452a:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <xTaskPriorityDisinherit+0xcc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	429a      	cmp	r2, r3
 8004532:	d009      	beq.n	8004548 <xTaskPriorityDisinherit+0x34>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e7fe      	b.n	8004546 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <xTaskPriorityDisinherit+0x50>
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	e7fe      	b.n	8004562 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	1e5a      	subs	r2, r3, #1
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	429a      	cmp	r2, r3
 8004578:	d02c      	beq.n	80045d4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457e:	2b00      	cmp	r3, #0
 8004580:	d128      	bne.n	80045d4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fbae 	bl	8002ce8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <xTaskPriorityDisinherit+0xd0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d903      	bls.n	80045b4 <xTaskPriorityDisinherit+0xa0>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <xTaskPriorityDisinherit+0xd0>)
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <xTaskPriorityDisinherit+0xd4>)
 80045c2:	441a      	add	r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe fb2f 	bl	8002c2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045d4:	697b      	ldr	r3, [r7, #20]
	}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200006e8 	.word	0x200006e8
 80045e4:	20000bc4 	.word	0x20000bc4
 80045e8:	200006ec 	.word	0x200006ec

080045ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045f6:	4b21      	ldr	r3, [pc, #132]	; (800467c <prvAddCurrentTaskToDelayedList+0x90>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3304      	adds	r3, #4
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fb70 	bl	8002ce8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d10a      	bne.n	8004626 <prvAddCurrentTaskToDelayedList+0x3a>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4819      	ldr	r0, [pc, #100]	; (8004684 <prvAddCurrentTaskToDelayedList+0x98>)
 8004620:	f7fe fb05 	bl	8002c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004624:	e026      	b.n	8004674 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	429a      	cmp	r2, r3
 800463c:	d209      	bcs.n	8004652 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3304      	adds	r3, #4
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f7fe fb13 	bl	8002c76 <vListInsert>
}
 8004650:	e010      	b.n	8004674 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7fe fb09 	bl	8002c76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d202      	bcs.n	8004674 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000bc0 	.word	0x20000bc0
 8004680:	200006e8 	.word	0x200006e8
 8004684:	20000ba8 	.word	0x20000ba8
 8004688:	20000b78 	.word	0x20000b78
 800468c:	20000b74 	.word	0x20000b74
 8004690:	20000bdc 	.word	0x20000bdc

08004694 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800469e:	f000 faff 	bl	8004ca0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <xTimerCreateTimerTask+0x80>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d021      	beq.n	80046ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046b2:	1d3a      	adds	r2, r7, #4
 80046b4:	f107 0108 	add.w	r1, r7, #8
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fa6f 	bl	8002ba0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	9202      	str	r2, [sp, #8]
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	2302      	movs	r3, #2
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	460a      	mov	r2, r1
 80046d4:	4910      	ldr	r1, [pc, #64]	; (8004718 <xTimerCreateTimerTask+0x84>)
 80046d6:	4811      	ldr	r0, [pc, #68]	; (800471c <xTimerCreateTimerTask+0x88>)
 80046d8:	f7ff f8f6 	bl	80038c8 <xTaskCreateStatic>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <xTimerCreateTimerTask+0x8c>)
 80046e0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <xTimerCreateTimerTask+0x8c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046ea:	2301      	movs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <xTimerCreateTimerTask+0x74>
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	e7fe      	b.n	8004706 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004708:	697b      	ldr	r3, [r7, #20]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000c18 	.word	0x20000c18
 8004718:	08005604 	.word	0x08005604
 800471c:	08004855 	.word	0x08004855
 8004720:	20000c1c 	.word	0x20000c1c

08004724 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <xTimerGenericCommand+0x2c>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	e7fe      	b.n	800474e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <xTimerGenericCommand+0x94>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02a      	beq.n	80047ae <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b05      	cmp	r3, #5
 8004768:	dc18      	bgt.n	800479c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800476a:	f7ff feb5 	bl	80044d8 <xTaskGetSchedulerState>
 800476e:	4603      	mov	r3, r0
 8004770:	2b02      	cmp	r3, #2
 8004772:	d109      	bne.n	8004788 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004774:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <xTimerGenericCommand+0x94>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	f107 0110 	add.w	r1, r7, #16
 800477c:	2300      	movs	r3, #0
 800477e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004780:	f7fe fc80 	bl	8003084 <xQueueGenericSend>
 8004784:	6278      	str	r0, [r7, #36]	; 0x24
 8004786:	e012      	b.n	80047ae <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <xTimerGenericCommand+0x94>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	f107 0110 	add.w	r1, r7, #16
 8004790:	2300      	movs	r3, #0
 8004792:	2200      	movs	r2, #0
 8004794:	f7fe fc76 	bl	8003084 <xQueueGenericSend>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24
 800479a:	e008      	b.n	80047ae <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <xTimerGenericCommand+0x94>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	f107 0110 	add.w	r1, r7, #16
 80047a4:	2300      	movs	r3, #0
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	f7fe fd66 	bl	8003278 <xQueueGenericSendFromISR>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000c18 	.word	0x20000c18

080047bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <prvProcessExpiredTimer+0x94>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fa87 	bl	8002ce8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d021      	beq.n	800482c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	18d1      	adds	r1, r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	f000 f8d1 	bl	800499c <prvInsertTimerInActiveList>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01e      	beq.n	800483e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004800:	2300      	movs	r3, #0
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2300      	movs	r3, #0
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	2100      	movs	r1, #0
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff ff8a 	bl	8004724 <xTimerGenericCommand>
 8004810:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d112      	bne.n	800483e <prvProcessExpiredTimer+0x82>
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e7fe      	b.n	800482a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	4798      	blx	r3
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000c10 	.word	0x20000c10

08004854 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f857 	bl	8004914 <prvGetNextExpireTime>
 8004866:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4619      	mov	r1, r3
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f803 	bl	8004878 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004872:	f000 f8d5 	bl	8004a20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004876:	e7f1      	b.n	800485c <prvTimerTask+0x8>

08004878 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004882:	f7ff fa57 	bl	8003d34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f866 	bl	800495c <prvSampleTimeNow>
 8004890:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d130      	bne.n	80048fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <prvProcessTimerOrBlockTask+0x3c>
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d806      	bhi.n	80048b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048a6:	f7ff fa53 	bl	8003d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff85 	bl	80047bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048b2:	e024      	b.n	80048fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <prvProcessTimerOrBlockTask+0x90>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <prvProcessTimerOrBlockTask+0x50>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <prvProcessTimerOrBlockTask+0x52>
 80048c8:	2300      	movs	r3, #0
 80048ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <prvProcessTimerOrBlockTask+0x94>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	f7fe ffc1 	bl	8003860 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048de:	f7ff fa37 	bl	8003d50 <xTaskResumeAll>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <prvProcessTimerOrBlockTask+0x98>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
}
 80048f8:	e001      	b.n	80048fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048fa:	f7ff fa29 	bl	8003d50 <xTaskResumeAll>
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000c14 	.word	0x20000c14
 800490c:	20000c18 	.word	0x20000c18
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <prvGetNextExpireTime+0x44>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <prvGetNextExpireTime+0x16>
 8004926:	2201      	movs	r2, #1
 8004928:	e000      	b.n	800492c <prvGetNextExpireTime+0x18>
 800492a:	2200      	movs	r2, #0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <prvGetNextExpireTime+0x44>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e001      	b.n	8004948 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000c10 	.word	0x20000c10

0800495c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004964:	f7ff fa90 	bl	8003e88 <xTaskGetTickCount>
 8004968:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <prvSampleTimeNow+0x3c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	429a      	cmp	r2, r3
 8004972:	d205      	bcs.n	8004980 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004974:	f000 f930 	bl	8004bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e002      	b.n	8004986 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <prvSampleTimeNow+0x3c>)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800498c:	68fb      	ldr	r3, [r7, #12]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000c20 	.word	0x20000c20

0800499c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d812      	bhi.n	80049e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	1ad2      	subs	r2, r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	e01b      	b.n	8004a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <prvInsertTimerInActiveList+0x7c>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7fe f948 	bl	8002c76 <vListInsert>
 80049e6:	e012      	b.n	8004a0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d206      	bcs.n	80049fe <prvInsertTimerInActiveList+0x62>
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e007      	b.n	8004a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <prvInsertTimerInActiveList+0x80>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7fe f934 	bl	8002c76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a0e:	697b      	ldr	r3, [r7, #20]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000c14 	.word	0x20000c14
 8004a1c:	20000c10 	.word	0x20000c10

08004a20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	; 0x38
 8004a24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a26:	e0c6      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	da17      	bge.n	8004a5e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	3304      	adds	r3, #4
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <prvProcessReceivedCommands+0x2e>
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e7fe      	b.n	8004a4c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a54:	6850      	ldr	r0, [r2, #4]
 8004a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f2c0 80a7 	blt.w	8004bb4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe f936 	bl	8002ce8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff6c 	bl	800495c <prvSampleTimeNow>
 8004a84:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b09      	cmp	r3, #9
 8004a8a:	f200 8094 	bhi.w	8004bb6 <prvProcessReceivedCommands+0x196>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <prvProcessReceivedCommands+0x74>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004abd 	.word	0x08004abd
 8004aa0:	08004b2f 	.word	0x08004b2f
 8004aa4:	08004b43 	.word	0x08004b43
 8004aa8:	08004b8b 	.word	0x08004b8b
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004abd 	.word	0x08004abd
 8004ab4:	08004b2f 	.word	0x08004b2f
 8004ab8:	08004b43 	.word	0x08004b43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	18d1      	adds	r1, r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004adc:	f7ff ff5e 	bl	800499c <prvInsertTimerInActiveList>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d067      	beq.n	8004bb6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05c      	beq.n	8004bb6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	441a      	add	r2, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0e:	f7ff fe09 	bl	8004724 <xTimerGenericCommand>
 8004b12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d14d      	bne.n	8004bb6 <prvProcessReceivedCommands+0x196>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	e7fe      	b.n	8004b2c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b40:	e039      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <prvProcessReceivedCommands+0x156>
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e7fe      	b.n	8004b74 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	18d1      	adds	r1, r2, r3
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b84:	f7ff ff0a 	bl	800499c <prvInsertTimerInActiveList>
					break;
 8004b88:	e015      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9a:	f000 fbc3 	bl	8005324 <vPortFree>
 8004b9e:	e00a      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bb2:	e000      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bb6:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <prvProcessReceivedCommands+0x1b4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1d39      	adds	r1, r7, #4
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fbee 	bl	80033a0 <xQueueReceive>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f47f af2e 	bne.w	8004a28 <prvProcessReceivedCommands+0x8>
	}
}
 8004bcc:	bf00      	nop
 8004bce:	3730      	adds	r7, #48	; 0x30
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000c18 	.word	0x20000c18

08004bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bde:	e047      	b.n	8004c70 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be0:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe f875 	bl	8002ce8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02d      	beq.n	8004c70 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d90e      	bls.n	8004c44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7fe f81a 	bl	8002c76 <vListInsert>
 8004c42:	e015      	b.n	8004c70 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fd68 	bl	8004724 <xTimerGenericCommand>
 8004c54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <prvSwitchTimerLists+0x98>
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	e7fe      	b.n	8004c6e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1b2      	bne.n	8004be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <prvSwitchTimerLists+0xc4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c88:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <prvSwitchTimerLists+0xc4>)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6013      	str	r3, [r2, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000c10 	.word	0x20000c10
 8004c9c:	20000c14 	.word	0x20000c14

08004ca0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ca6:	f000 f961 	bl	8004f6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d120      	bne.n	8004cf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cb2:	4814      	ldr	r0, [pc, #80]	; (8004d04 <prvCheckForValidListAndQueue+0x64>)
 8004cb4:	f7fd ff8e 	bl	8002bd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cb8:	4813      	ldr	r0, [pc, #76]	; (8004d08 <prvCheckForValidListAndQueue+0x68>)
 8004cba:	f7fd ff8b 	bl	8002bd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <prvCheckForValidListAndQueue+0x6c>)
 8004cc0:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <prvCheckForValidListAndQueue+0x64>)
 8004cc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <prvCheckForValidListAndQueue+0x70>)
 8004cc6:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <prvCheckForValidListAndQueue+0x68>)
 8004cc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <prvCheckForValidListAndQueue+0x74>)
 8004cd0:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <prvCheckForValidListAndQueue+0x78>)
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	200a      	movs	r0, #10
 8004cd6:	f7fe f899 	bl	8002e0c <xQueueGenericCreateStatic>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004cde:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	490b      	ldr	r1, [pc, #44]	; (8004d1c <prvCheckForValidListAndQueue+0x7c>)
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fd64 	bl	80037bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cf4:	f000 f968 	bl	8004fc8 <vPortExitCritical>
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000c18 	.word	0x20000c18
 8004d04:	20000be8 	.word	0x20000be8
 8004d08:	20000bfc 	.word	0x20000bfc
 8004d0c:	20000c10 	.word	0x20000c10
 8004d10:	20000c14 	.word	0x20000c14
 8004d14:	20000cc4 	.word	0x20000cc4
 8004d18:	20000c24 	.word	0x20000c24
 8004d1c:	0800560c 	.word	0x0800560c

08004d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b04      	subs	r3, #4
 8004d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b04      	subs	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <pxPortInitialiseStack+0x64>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3b14      	subs	r3, #20
 8004d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f06f 0202 	mvn.w	r2, #2
 8004d6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3b20      	subs	r3, #32
 8004d74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	08004d89 	.word	0x08004d89

08004d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <prvTaskExitError+0x50>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d009      	beq.n	8004db0 <prvTaskExitError+0x28>
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e7fe      	b.n	8004dae <prvTaskExitError+0x26>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dc2:	bf00      	nop
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0fc      	beq.n	8004dc4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	2000000c 	.word	0x2000000c
 8004ddc:	00000000 	.word	0x00000000

08004de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <pxCurrentTCBConst2>)
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	6808      	ldr	r0, [r1, #0]
 8004de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	f380 8809 	msr	PSP, r0
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f380 8811 	msr	BASEPRI, r0
 8004dfa:	4770      	bx	lr
 8004dfc:	f3af 8000 	nop.w

08004e00 <pxCurrentTCBConst2>:
 8004e00:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e08:	4808      	ldr	r0, [pc, #32]	; (8004e2c <prvPortStartFirstTask+0x24>)
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	6800      	ldr	r0, [r0, #0]
 8004e0e:	f380 8808 	msr	MSP, r0
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8814 	msr	CONTROL, r0
 8004e1a:	b662      	cpsie	i
 8004e1c:	b661      	cpsie	f
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	df00      	svc	0
 8004e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e2a:	bf00      	nop
 8004e2c:	e000ed08 	.word	0xe000ed08

08004e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e36:	4b44      	ldr	r3, [pc, #272]	; (8004f48 <xPortStartScheduler+0x118>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a44      	ldr	r2, [pc, #272]	; (8004f4c <xPortStartScheduler+0x11c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d109      	bne.n	8004e54 <xPortStartScheduler+0x24>
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e7fe      	b.n	8004e52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e54:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <xPortStartScheduler+0x118>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3d      	ldr	r2, [pc, #244]	; (8004f50 <xPortStartScheduler+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d109      	bne.n	8004e72 <xPortStartScheduler+0x42>
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e7fe      	b.n	8004e70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e72:	4b38      	ldr	r3, [pc, #224]	; (8004f54 <xPortStartScheduler+0x124>)
 8004e74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	22ff      	movs	r2, #255	; 0xff
 8004e82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <xPortStartScheduler+0x128>)
 8004e98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e9a:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ea0:	e009      	b.n	8004eb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ea2:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004eaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d0ef      	beq.n	8004ea2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ec2:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1c3 0307 	rsb	r3, r3, #7
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d009      	beq.n	8004ee2 <xPortStartScheduler+0xb2>
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	e7fe      	b.n	8004ee0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004eea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ef6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f0c:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f18:	f000 f8d6 	bl	80050c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f1c:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <xPortStartScheduler+0x134>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f22:	f000 f8f5 	bl	8005110 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f26:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <xPortStartScheduler+0x138>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0f      	ldr	r2, [pc, #60]	; (8004f68 <xPortStartScheduler+0x138>)
 8004f2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f32:	f7ff ff69 	bl	8004e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f36:	f7ff f86f 	bl	8004018 <vTaskSwitchContext>
	prvTaskExitError();
 8004f3a:	f7ff ff25 	bl	8004d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed00 	.word	0xe000ed00
 8004f4c:	410fc271 	.word	0x410fc271
 8004f50:	410fc270 	.word	0x410fc270
 8004f54:	e000e400 	.word	0xe000e400
 8004f58:	20000d14 	.word	0x20000d14
 8004f5c:	20000d18 	.word	0x20000d18
 8004f60:	e000ed20 	.word	0xe000ed20
 8004f64:	2000000c 	.word	0x2000000c
 8004f68:	e000ef34 	.word	0xe000ef34

08004f6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <vPortEnterCritical+0x54>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <vPortEnterCritical+0x54>)
 8004f8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <vPortEnterCritical+0x54>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10e      	bne.n	8004fb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <vPortEnterCritical+0x58>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <vPortEnterCritical+0x48>
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	e7fe      	b.n	8004fb2 <vPortEnterCritical+0x46>
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	2000000c 	.word	0x2000000c
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <vPortExitCritical+0x4c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <vPortExitCritical+0x22>
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e7fe      	b.n	8004fe8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <vPortExitCritical+0x4c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <vPortExitCritical+0x4c>)
 8004ff2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <vPortExitCritical+0x4c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <vPortExitCritical+0x3e>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
	...

08005020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005020:	f3ef 8009 	mrs	r0, PSP
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	4b15      	ldr	r3, [pc, #84]	; (8005080 <pxCurrentTCBConst>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	f01e 0f10 	tst.w	lr, #16
 8005030:	bf08      	it	eq
 8005032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	6010      	str	r0, [r2, #0]
 800503c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005044:	f380 8811 	msr	BASEPRI, r0
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f7fe ffe2 	bl	8004018 <vTaskSwitchContext>
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	f380 8811 	msr	BASEPRI, r0
 800505c:	bc09      	pop	{r0, r3}
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	6808      	ldr	r0, [r1, #0]
 8005062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005066:	f01e 0f10 	tst.w	lr, #16
 800506a:	bf08      	it	eq
 800506c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005070:	f380 8809 	msr	PSP, r0
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst>:
 8005080:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050a0:	f7fe ff02 	bl	8003ea8 <xTaskIncrementTick>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050aa:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <SysTick_Handler+0x3c>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <vPortSetupTimerInterrupt+0x34>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <vPortSetupTimerInterrupt+0x38>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <vPortSetupTimerInterrupt+0x3c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <vPortSetupTimerInterrupt+0x40>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <vPortSetupTimerInterrupt+0x44>)
 80050e6:	3b01      	subs	r3, #1
 80050e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <vPortSetupTimerInterrupt+0x34>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000e010 	.word	0xe000e010
 8005100:	e000e018 	.word	0xe000e018
 8005104:	20000000 	.word	0x20000000
 8005108:	10624dd3 	.word	0x10624dd3
 800510c:	e000e014 	.word	0xe000e014

08005110 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005110:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005120 <vPortEnableVFP+0x10>
 8005114:	6801      	ldr	r1, [r0, #0]
 8005116:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800511a:	6001      	str	r1, [r0, #0]
 800511c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800511e:	bf00      	nop
 8005120:	e000ed88 	.word	0xe000ed88

08005124 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800512a:	f3ef 8305 	mrs	r3, IPSR
 800512e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d913      	bls.n	800515e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005136:	4a16      	ldr	r2, [pc, #88]	; (8005190 <vPortValidateInterruptPriority+0x6c>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <vPortValidateInterruptPriority+0x70>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	7afa      	ldrb	r2, [r7, #11]
 8005146:	429a      	cmp	r2, r3
 8005148:	d209      	bcs.n	800515e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e7fe      	b.n	800515c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <vPortValidateInterruptPriority+0x74>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <vPortValidateInterruptPriority+0x78>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d909      	bls.n	8005182 <vPortValidateInterruptPriority+0x5e>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	e7fe      	b.n	8005180 <vPortValidateInterruptPriority+0x5c>
	}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000e3f0 	.word	0xe000e3f0
 8005194:	20000d14 	.word	0x20000d14
 8005198:	e000ed0c 	.word	0xe000ed0c
 800519c:	20000d18 	.word	0x20000d18

080051a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051ac:	f7fe fdc2 	bl	8003d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051b0:	4b57      	ldr	r3, [pc, #348]	; (8005310 <pvPortMalloc+0x170>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b8:	f000 f90c 	bl	80053d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051bc:	4b55      	ldr	r3, [pc, #340]	; (8005314 <pvPortMalloc+0x174>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 808c 	bne.w	80052e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01c      	beq.n	800520a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80051d0:	2208      	movs	r2, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f023 0307 	bic.w	r3, r3, #7
 80051e8:	3308      	adds	r3, #8
 80051ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <pvPortMalloc+0x6a>
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e7fe      	b.n	8005208 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d068      	beq.n	80052e2 <pvPortMalloc+0x142>
 8005210:	4b41      	ldr	r3, [pc, #260]	; (8005318 <pvPortMalloc+0x178>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d863      	bhi.n	80052e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800521a:	4b40      	ldr	r3, [pc, #256]	; (800531c <pvPortMalloc+0x17c>)
 800521c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800521e:	4b3f      	ldr	r3, [pc, #252]	; (800531c <pvPortMalloc+0x17c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005224:	e004      	b.n	8005230 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d903      	bls.n	8005242 <pvPortMalloc+0xa2>
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f1      	bne.n	8005226 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005242:	4b33      	ldr	r3, [pc, #204]	; (8005310 <pvPortMalloc+0x170>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	429a      	cmp	r2, r3
 800524a:	d04a      	beq.n	80052e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2208      	movs	r2, #8
 8005252:	4413      	add	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	1ad2      	subs	r2, r2, r3
 8005266:	2308      	movs	r3, #8
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	429a      	cmp	r2, r3
 800526c:	d91e      	bls.n	80052ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <pvPortMalloc+0xf4>
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	e7fe      	b.n	8005292 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	1ad2      	subs	r2, r2, r3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052a6:	69b8      	ldr	r0, [r7, #24]
 80052a8:	f000 f8f6 	bl	8005498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <pvPortMalloc+0x178>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x178>)
 80052b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ba:	4b17      	ldr	r3, [pc, #92]	; (8005318 <pvPortMalloc+0x178>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b18      	ldr	r3, [pc, #96]	; (8005320 <pvPortMalloc+0x180>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d203      	bcs.n	80052ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <pvPortMalloc+0x178>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a15      	ldr	r2, [pc, #84]	; (8005320 <pvPortMalloc+0x180>)
 80052cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <pvPortMalloc+0x174>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052e2:	f7fe fd35 	bl	8003d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <pvPortMalloc+0x164>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e7fe      	b.n	8005302 <pvPortMalloc+0x162>
	return pvReturn;
 8005304:	69fb      	ldr	r3, [r7, #28]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3728      	adds	r7, #40	; 0x28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20004924 	.word	0x20004924
 8005314:	20004930 	.word	0x20004930
 8005318:	20004928 	.word	0x20004928
 800531c:	2000491c 	.word	0x2000491c
 8005320:	2000492c 	.word	0x2000492c

08005324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d046      	beq.n	80053c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005336:	2308      	movs	r3, #8
 8005338:	425b      	negs	r3, r3
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4413      	add	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	4b20      	ldr	r3, [pc, #128]	; (80053cc <vPortFree+0xa8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <vPortFree+0x42>
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e7fe      	b.n	8005364 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <vPortFree+0x5e>
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b11      	ldr	r3, [pc, #68]	; (80053cc <vPortFree+0xa8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d019      	beq.n	80053c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d115      	bne.n	80053c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <vPortFree+0xa8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fcc4 	bl	8003d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <vPortFree+0xac>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <vPortFree+0xac>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f86c 	bl	8005498 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053c0:	f7fe fcc6 	bl	8003d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20004930 	.word	0x20004930
 80053d0:	20004928 	.word	0x20004928

080053d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <prvHeapInit+0xac>)
 80053e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3307      	adds	r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0307 	bic.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <prvHeapInit+0xac>)
 8005404:	4413      	add	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800540c:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <prvHeapInit+0xb0>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005412:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <prvHeapInit+0xb0>)
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005420:	2208      	movs	r2, #8
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a15      	ldr	r2, [pc, #84]	; (8005488 <prvHeapInit+0xb4>)
 8005434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <prvHeapInit+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <prvHeapInit+0xb4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvHeapInit+0xb4>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <prvHeapInit+0xb8>)
 8005462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <prvHeapInit+0xbc>)
 800546a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <prvHeapInit+0xc0>)
 800546e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000d1c 	.word	0x20000d1c
 8005484:	2000491c 	.word	0x2000491c
 8005488:	20004924 	.word	0x20004924
 800548c:	2000492c 	.word	0x2000492c
 8005490:	20004928 	.word	0x20004928
 8005494:	20004930 	.word	0x20004930

08005498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <prvInsertBlockIntoFreeList+0xac>)
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e002      	b.n	80054ac <prvInsertBlockIntoFreeList+0x14>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d8f7      	bhi.n	80054a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4413      	add	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d108      	bne.n	80054da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	441a      	add	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d118      	bne.n	8005520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <prvInsertBlockIntoFreeList+0xb0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d00d      	beq.n	8005516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e008      	b.n	8005528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <prvInsertBlockIntoFreeList+0xb0>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e003      	b.n	8005528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d002      	beq.n	8005536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	2000491c 	.word	0x2000491c
 8005548:	20004924 	.word	0x20004924

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4e0d      	ldr	r6, [pc, #52]	; (8005584 <__libc_init_array+0x38>)
 8005550:	4c0d      	ldr	r4, [pc, #52]	; (8005588 <__libc_init_array+0x3c>)
 8005552:	1ba4      	subs	r4, r4, r6
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	2500      	movs	r5, #0
 8005558:	42a5      	cmp	r5, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	4e0b      	ldr	r6, [pc, #44]	; (800558c <__libc_init_array+0x40>)
 800555e:	4c0c      	ldr	r4, [pc, #48]	; (8005590 <__libc_init_array+0x44>)
 8005560:	f000 f82c 	bl	80055bc <_init>
 8005564:	1ba4      	subs	r4, r4, r6
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	2500      	movs	r5, #0
 800556a:	42a5      	cmp	r5, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005574:	4798      	blx	r3
 8005576:	3501      	adds	r5, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800557e:	4798      	blx	r3
 8005580:	3501      	adds	r5, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	080056b0 	.word	0x080056b0
 8005588:	080056b0 	.word	0x080056b0
 800558c:	080056b0 	.word	0x080056b0
 8005590:	080056b4 	.word	0x080056b4

08005594 <memcpy>:
 8005594:	b510      	push	{r4, lr}
 8005596:	1e43      	subs	r3, r0, #1
 8005598:	440a      	add	r2, r1
 800559a:	4291      	cmp	r1, r2
 800559c:	d100      	bne.n	80055a0 <memcpy+0xc>
 800559e:	bd10      	pop	{r4, pc}
 80055a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a8:	e7f7      	b.n	800559a <memcpy+0x6>

080055aa <memset>:
 80055aa:	4402      	add	r2, r0
 80055ac:	4603      	mov	r3, r0
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d100      	bne.n	80055b4 <memset+0xa>
 80055b2:	4770      	bx	lr
 80055b4:	f803 1b01 	strb.w	r1, [r3], #1
 80055b8:	e7f9      	b.n	80055ae <memset+0x4>
	...

080055bc <_init>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr

080055c8 <_fini>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	bf00      	nop
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr
